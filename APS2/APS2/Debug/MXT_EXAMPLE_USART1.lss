
MXT_EXAMPLE_USART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000525c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040525c  0040525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c0  20400000  00405264  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000004cc  204009c0  00405c24  000209c0  2**2
                  ALLOC
  4 .stack        00002004  20400e8c  004060f0  000209c0  2**0
                  ALLOC
  5 .heap         00000200  20402e90  004080f4  000209c0  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000209ee  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001c95f  00000000  00000000  00020a47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003d57  00000000  00000000  0003d3a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000878c  00000000  00000000  000410fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d68  00000000  00000000  00049889  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ea8  00000000  00000000  0004a5f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022895  00000000  00000000  0004b499  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f3d2  00000000  00000000  0006dd2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000952a8  00000000  00000000  0007d100  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002c5c  00000000  00000000  001123a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	90 2e 40 20 b5 19 40 00 b3 19 40 00 b3 19 40 00     ..@ ..@...@...@.
  400010:	b3 19 40 00 b3 19 40 00 b3 19 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	b3 19 40 00 b3 19 40 00 00 00 00 00 b3 19 40 00     ..@...@.......@.
  40003c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40004c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40005c:	b3 19 40 00 b3 19 40 00 00 00 00 00 2d 13 40 00     ..@...@.....-.@.
  40006c:	41 13 40 00 55 13 40 00 b3 19 40 00 b3 19 40 00     A.@.U.@...@...@.
  40007c:	b3 19 40 00 69 13 40 00 7d 13 40 00 b3 19 40 00     ..@.i.@.}.@...@.
  40008c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40009c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000ac:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000bc:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000cc:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000dc:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000ec:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  4000fc:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40010c:	b3 19 40 00 b3 19 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ......@...@...@.
  40012c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40013c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40014c:	b3 19 40 00 b3 19 40 00 b3 19 40 00 b3 19 40 00     ..@...@...@...@.
  40015c:	b3 19 40 00 b3 19 40 00 b3 19 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c0 	.word	0x204009c0
  400184:	00000000 	.word	0x00000000
  400188:	00405264 	.word	0x00405264

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	00405264 	.word	0x00405264
  4001c8:	204009c4 	.word	0x204009c4
  4001cc:	00405264 	.word	0x00405264
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	00402141 	.word	0x00402141
  400464:	00401731 	.word	0x00401731
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	004017dd 	.word	0x004017dd

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	004017dd 	.word	0x004017dd

0040056c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40056c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40056e:	4810      	ldr	r0, [pc, #64]	; (4005b0 <sysclk_init+0x44>)
  400570:	4b10      	ldr	r3, [pc, #64]	; (4005b4 <sysclk_init+0x48>)
  400572:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400574:	213e      	movs	r1, #62	; 0x3e
  400576:	2000      	movs	r0, #0
  400578:	4b0f      	ldr	r3, [pc, #60]	; (4005b8 <sysclk_init+0x4c>)
  40057a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40057c:	4c0f      	ldr	r4, [pc, #60]	; (4005bc <sysclk_init+0x50>)
  40057e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400580:	2800      	cmp	r0, #0
  400582:	d0fc      	beq.n	40057e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400584:	4b0e      	ldr	r3, [pc, #56]	; (4005c0 <sysclk_init+0x54>)
  400586:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400588:	4a0e      	ldr	r2, [pc, #56]	; (4005c4 <sysclk_init+0x58>)
  40058a:	4b0f      	ldr	r3, [pc, #60]	; (4005c8 <sysclk_init+0x5c>)
  40058c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40058e:	4c0f      	ldr	r4, [pc, #60]	; (4005cc <sysclk_init+0x60>)
  400590:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400592:	2800      	cmp	r0, #0
  400594:	d0fc      	beq.n	400590 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400596:	2002      	movs	r0, #2
  400598:	4b0d      	ldr	r3, [pc, #52]	; (4005d0 <sysclk_init+0x64>)
  40059a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40059c:	2000      	movs	r0, #0
  40059e:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <sysclk_init+0x68>)
  4005a0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4005a2:	4b0d      	ldr	r3, [pc, #52]	; (4005d8 <sysclk_init+0x6c>)
  4005a4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4005a6:	480d      	ldr	r0, [pc, #52]	; (4005dc <sysclk_init+0x70>)
  4005a8:	4b02      	ldr	r3, [pc, #8]	; (4005b4 <sysclk_init+0x48>)
  4005aa:	4798      	blx	r3
  4005ac:	bd10      	pop	{r4, pc}
  4005ae:	bf00      	nop
  4005b0:	07270e00 	.word	0x07270e00
  4005b4:	00401b89 	.word	0x00401b89
  4005b8:	0040142d 	.word	0x0040142d
  4005bc:	00401481 	.word	0x00401481
  4005c0:	00401491 	.word	0x00401491
  4005c4:	20183f01 	.word	0x20183f01
  4005c8:	400e0600 	.word	0x400e0600
  4005cc:	004014a1 	.word	0x004014a1
  4005d0:	00401391 	.word	0x00401391
  4005d4:	004013c9 	.word	0x004013c9
  4005d8:	00401a7d 	.word	0x00401a7d
  4005dc:	11e1a300 	.word	0x11e1a300

004005e0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4005e0:	b510      	push	{r4, lr}
  4005e2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4005e4:	4b10      	ldr	r3, [pc, #64]	; (400628 <spi_master_init+0x48>)
  4005e6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4005e8:	2380      	movs	r3, #128	; 0x80
  4005ea:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4005ec:	6863      	ldr	r3, [r4, #4]
  4005ee:	f043 0301 	orr.w	r3, r3, #1
  4005f2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4005f4:	6863      	ldr	r3, [r4, #4]
  4005f6:	f043 0310 	orr.w	r3, r3, #16
  4005fa:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4005fc:	6863      	ldr	r3, [r4, #4]
  4005fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400602:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  400604:	2100      	movs	r1, #0
  400606:	4620      	mov	r0, r4
  400608:	4b08      	ldr	r3, [pc, #32]	; (40062c <spi_master_init+0x4c>)
  40060a:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  40060c:	6863      	ldr	r3, [r4, #4]
  40060e:	f023 0302 	bic.w	r3, r3, #2
  400612:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  400614:	6863      	ldr	r3, [r4, #4]
  400616:	f023 0304 	bic.w	r3, r3, #4
  40061a:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  40061c:	2100      	movs	r1, #0
  40061e:	4620      	mov	r0, r4
  400620:	4b03      	ldr	r3, [pc, #12]	; (400630 <spi_master_init+0x50>)
  400622:	4798      	blx	r3
  400624:	bd10      	pop	{r4, pc}
  400626:	bf00      	nop
  400628:	004014d1 	.word	0x004014d1
  40062c:	004014fd 	.word	0x004014fd
  400630:	00401513 	.word	0x00401513

00400634 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400638:	4604      	mov	r4, r0
  40063a:	460d      	mov	r5, r1
  40063c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40063e:	4915      	ldr	r1, [pc, #84]	; (400694 <spi_master_setup_device+0x60>)
  400640:	4618      	mov	r0, r3
  400642:	4b15      	ldr	r3, [pc, #84]	; (400698 <spi_master_setup_device+0x64>)
  400644:	4798      	blx	r3
  400646:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400648:	2300      	movs	r3, #0
  40064a:	461a      	mov	r2, r3
  40064c:	6829      	ldr	r1, [r5, #0]
  40064e:	4620      	mov	r0, r4
  400650:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4006b0 <spi_master_setup_device+0x7c>
  400654:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400656:	2208      	movs	r2, #8
  400658:	6829      	ldr	r1, [r5, #0]
  40065a:	4620      	mov	r0, r4
  40065c:	4b0f      	ldr	r3, [pc, #60]	; (40069c <spi_master_setup_device+0x68>)
  40065e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400660:	b2fa      	uxtb	r2, r7
  400662:	6829      	ldr	r1, [r5, #0]
  400664:	4620      	mov	r0, r4
  400666:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <spi_master_setup_device+0x6c>)
  400668:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  40066a:	2208      	movs	r2, #8
  40066c:	6829      	ldr	r1, [r5, #0]
  40066e:	4620      	mov	r0, r4
  400670:	4b0c      	ldr	r3, [pc, #48]	; (4006a4 <spi_master_setup_device+0x70>)
  400672:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400674:	0872      	lsrs	r2, r6, #1
  400676:	6829      	ldr	r1, [r5, #0]
  400678:	4620      	mov	r0, r4
  40067a:	4b0b      	ldr	r3, [pc, #44]	; (4006a8 <spi_master_setup_device+0x74>)
  40067c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40067e:	f086 0201 	eor.w	r2, r6, #1
  400682:	f002 0201 	and.w	r2, r2, #1
  400686:	6829      	ldr	r1, [r5, #0]
  400688:	4620      	mov	r0, r4
  40068a:	4b08      	ldr	r3, [pc, #32]	; (4006ac <spi_master_setup_device+0x78>)
  40068c:	4798      	blx	r3
  40068e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400692:	bf00      	nop
  400694:	08f0d180 	.word	0x08f0d180
  400698:	004015ef 	.word	0x004015ef
  40069c:	004015db 	.word	0x004015db
  4006a0:	00401605 	.word	0x00401605
  4006a4:	00401595 	.word	0x00401595
  4006a8:	00401559 	.word	0x00401559
  4006ac:	00401577 	.word	0x00401577
  4006b0:	0040162d 	.word	0x0040162d

004006b4 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  4006b4:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  4006b6:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  4006b8:	f013 0f04 	tst.w	r3, #4
  4006bc:	d006      	beq.n	4006cc <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  4006be:	6809      	ldr	r1, [r1, #0]
  4006c0:	290f      	cmp	r1, #15
  4006c2:	d900      	bls.n	4006c6 <spi_select_device+0x12>
  4006c4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4006c6:	4b06      	ldr	r3, [pc, #24]	; (4006e0 <spi_select_device+0x2c>)
  4006c8:	4798      	blx	r3
  4006ca:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4006cc:	6809      	ldr	r1, [r1, #0]
  4006ce:	2903      	cmp	r1, #3
  4006d0:	d8f8      	bhi.n	4006c4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4006d2:	2301      	movs	r3, #1
  4006d4:	fa03 f101 	lsl.w	r1, r3, r1
  4006d8:	43c9      	mvns	r1, r1
  4006da:	4b01      	ldr	r3, [pc, #4]	; (4006e0 <spi_select_device+0x2c>)
  4006dc:	4798      	blx	r3
		}
	}
}
  4006de:	e7f1      	b.n	4006c4 <spi_select_device+0x10>
  4006e0:	004014fd 	.word	0x004014fd

004006e4 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4006e4:	b11a      	cbz	r2, 4006ee <spi_write_packet+0xa>
{
  4006e6:	b410      	push	{r4}
  4006e8:	460c      	mov	r4, r1
  4006ea:	4411      	add	r1, r2
  4006ec:	e006      	b.n	4006fc <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4006ee:	2000      	movs	r0, #0
  4006f0:	4770      	bx	lr
		val = data[i];
  4006f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4006f6:	60c3      	str	r3, [r0, #12]
	while (len) {
  4006f8:	42a1      	cmp	r1, r4
  4006fa:	d00c      	beq.n	400716 <spi_write_packet+0x32>
{
  4006fc:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400700:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400702:	f012 0f02 	tst.w	r2, #2
  400706:	d1f4      	bne.n	4006f2 <spi_write_packet+0xe>
			if (!timeout--) {
  400708:	3b01      	subs	r3, #1
  40070a:	d1f9      	bne.n	400700 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  40070c:	f06f 0002 	mvn.w	r0, #2
}
  400710:	f85d 4b04 	ldr.w	r4, [sp], #4
  400714:	4770      	bx	lr
	return STATUS_OK;
  400716:	2000      	movs	r0, #0
  400718:	e7fa      	b.n	400710 <spi_write_packet+0x2c>

0040071a <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  40071a:	b13a      	cbz	r2, 40072c <spi_read_packet+0x12>
{
  40071c:	b470      	push	{r4, r5, r6}
  40071e:	4615      	mov	r5, r2
  400720:	460c      	mov	r4, r1
  400722:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400724:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400726:	f240 2101 	movw	r1, #513	; 0x201
  40072a:	e012      	b.n	400752 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  40072c:	2000      	movs	r0, #0
  40072e:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400730:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400732:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400736:	6902      	ldr	r2, [r0, #16]
  400738:	ea31 0202 	bics.w	r2, r1, r2
  40073c:	d004      	beq.n	400748 <spi_read_packet+0x2e>
			if (!timeout--) {
  40073e:	3b01      	subs	r3, #1
  400740:	d1f9      	bne.n	400736 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400742:	f06f 0002 	mvn.w	r0, #2
  400746:	e00e      	b.n	400766 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400748:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40074a:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  40074e:	42a5      	cmp	r5, r4
  400750:	d00b      	beq.n	40076a <spi_read_packet+0x50>
{
  400752:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400756:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400758:	f012 0f02 	tst.w	r2, #2
  40075c:	d1e8      	bne.n	400730 <spi_read_packet+0x16>
			if (!timeout--) {
  40075e:	3b01      	subs	r3, #1
  400760:	d1f9      	bne.n	400756 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400762:	f06f 0002 	mvn.w	r0, #2
}
  400766:	bc70      	pop	{r4, r5, r6}
  400768:	4770      	bx	lr
	return STATUS_OK;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fb      	b.n	400766 <spi_read_packet+0x4c>
	...

00400770 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400774:	b980      	cbnz	r0, 400798 <_read+0x28>
  400776:	460c      	mov	r4, r1
  400778:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40077a:	2a00      	cmp	r2, #0
  40077c:	dd0f      	ble.n	40079e <_read+0x2e>
  40077e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400780:	4e08      	ldr	r6, [pc, #32]	; (4007a4 <_read+0x34>)
  400782:	4d09      	ldr	r5, [pc, #36]	; (4007a8 <_read+0x38>)
  400784:	6830      	ldr	r0, [r6, #0]
  400786:	4621      	mov	r1, r4
  400788:	682b      	ldr	r3, [r5, #0]
  40078a:	4798      	blx	r3
		ptr++;
  40078c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40078e:	42bc      	cmp	r4, r7
  400790:	d1f8      	bne.n	400784 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400792:	4640      	mov	r0, r8
  400794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400798:	f04f 38ff 	mov.w	r8, #4294967295
  40079c:	e7f9      	b.n	400792 <_read+0x22>
	for (; len > 0; --len) {
  40079e:	4680      	mov	r8, r0
  4007a0:	e7f7      	b.n	400792 <_read+0x22>
  4007a2:	bf00      	nop
  4007a4:	20400e50 	.word	0x20400e50
  4007a8:	20400e48 	.word	0x20400e48

004007ac <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  4007ac:	3801      	subs	r0, #1
  4007ae:	2802      	cmp	r0, #2
  4007b0:	d815      	bhi.n	4007de <_write+0x32>
{
  4007b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4007b6:	460e      	mov	r6, r1
  4007b8:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  4007ba:	b19a      	cbz	r2, 4007e4 <_write+0x38>
  4007bc:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  4007be:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4007f8 <_write+0x4c>
  4007c2:	4f0c      	ldr	r7, [pc, #48]	; (4007f4 <_write+0x48>)
  4007c4:	f8d8 0000 	ldr.w	r0, [r8]
  4007c8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4007cc:	683b      	ldr	r3, [r7, #0]
  4007ce:	4798      	blx	r3
  4007d0:	2800      	cmp	r0, #0
  4007d2:	db0a      	blt.n	4007ea <_write+0x3e>
  4007d4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4007d6:	3c01      	subs	r4, #1
  4007d8:	d1f4      	bne.n	4007c4 <_write+0x18>
  4007da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4007de:	f04f 30ff 	mov.w	r0, #4294967295
  4007e2:	4770      	bx	lr
	for (; len != 0; --len) {
  4007e4:	4610      	mov	r0, r2
  4007e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4007ea:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4007ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4007f2:	bf00      	nop
  4007f4:	20400e4c 	.word	0x20400e4c
  4007f8:	20400e50 	.word	0x20400e50

004007fc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4007fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400800:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400804:	4b9e      	ldr	r3, [pc, #632]	; (400a80 <board_init+0x284>)
  400806:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40080c:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400810:	4b9c      	ldr	r3, [pc, #624]	; (400a84 <board_init+0x288>)
  400812:	2200      	movs	r2, #0
  400814:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  400818:	695a      	ldr	r2, [r3, #20]
  40081a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  40081e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400820:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400824:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400828:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40082c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400830:	f007 0007 	and.w	r0, r7, #7
  400834:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400836:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40083a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40083e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400842:	f3bf 8f4f 	dsb	sy
  400846:	f04f 34ff 	mov.w	r4, #4294967295
  40084a:	fa04 fc00 	lsl.w	ip, r4, r0
  40084e:	fa06 f000 	lsl.w	r0, r6, r0
  400852:	fa04 f40e 	lsl.w	r4, r4, lr
  400856:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40085a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40085c:	463a      	mov	r2, r7
  40085e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400860:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400864:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400868:	3a01      	subs	r2, #1
  40086a:	4423      	add	r3, r4
  40086c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400870:	d1f6      	bne.n	400860 <board_init+0x64>
        } while(sets--);
  400872:	3e01      	subs	r6, #1
  400874:	4460      	add	r0, ip
  400876:	f1b6 3fff 	cmp.w	r6, #4294967295
  40087a:	d1ef      	bne.n	40085c <board_init+0x60>
  40087c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400880:	4b80      	ldr	r3, [pc, #512]	; (400a84 <board_init+0x288>)
  400882:	695a      	ldr	r2, [r3, #20]
  400884:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400888:	615a      	str	r2, [r3, #20]
  40088a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40088e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400892:	4a7d      	ldr	r2, [pc, #500]	; (400a88 <board_init+0x28c>)
  400894:	497d      	ldr	r1, [pc, #500]	; (400a8c <board_init+0x290>)
  400896:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400898:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40089c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40089e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008a2:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  4008a6:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  4008aa:	f022 0201 	bic.w	r2, r2, #1
  4008ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  4008b2:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4008b6:	f022 0201 	bic.w	r2, r2, #1
  4008ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4008be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008c2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4008c6:	200a      	movs	r0, #10
  4008c8:	4c71      	ldr	r4, [pc, #452]	; (400a90 <board_init+0x294>)
  4008ca:	47a0      	blx	r4
  4008cc:	200b      	movs	r0, #11
  4008ce:	47a0      	blx	r4
  4008d0:	200c      	movs	r0, #12
  4008d2:	47a0      	blx	r4
  4008d4:	2010      	movs	r0, #16
  4008d6:	47a0      	blx	r4
  4008d8:	2011      	movs	r0, #17
  4008da:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4008dc:	4e6d      	ldr	r6, [pc, #436]	; (400a94 <board_init+0x298>)
  4008de:	f44f 7880 	mov.w	r8, #256	; 0x100
  4008e2:	f8c6 8010 	str.w	r8, [r6, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008e6:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4008ea:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4008ee:	4c6a      	ldr	r4, [pc, #424]	; (400a98 <board_init+0x29c>)
  4008f0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4008f4:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4008f6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4008fa:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4008fc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400900:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  400902:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  400904:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  400908:	6f23      	ldr	r3, [r4, #112]	; 0x70
  40090a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  40090e:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400910:	6f63      	ldr	r3, [r4, #116]	; 0x74
  400912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  400916:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  400918:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  40091c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400920:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400924:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400928:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40092a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  40092e:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400930:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400932:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400936:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400938:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  40093c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  40093e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400940:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400944:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400946:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400948:	4a54      	ldr	r2, [pc, #336]	; (400a9c <board_init+0x2a0>)
  40094a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  40094e:	f043 0310 	orr.w	r3, r3, #16
  400952:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400956:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  40095a:	2310      	movs	r3, #16
  40095c:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40095e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400962:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400964:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400966:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  40096a:	6f11      	ldr	r1, [r2, #112]	; 0x70
  40096c:	4319      	orrs	r1, r3
  40096e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400970:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400972:	4319      	orrs	r1, r3
  400974:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400976:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400978:	2208      	movs	r2, #8
  40097a:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40097c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400980:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400982:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400984:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400988:	6f21      	ldr	r1, [r4, #112]	; 0x70
  40098a:	f021 0108 	bic.w	r1, r1, #8
  40098e:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400990:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400992:	f021 0108 	bic.w	r1, r1, #8
  400996:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400998:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  40099a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  40099c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009a0:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  4009a2:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  4009a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  4009a8:	6f22      	ldr	r2, [r4, #112]	; 0x70
  4009aa:	f022 0210 	bic.w	r2, r2, #16
  4009ae:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009b0:	6f62      	ldr	r2, [r4, #116]	; 0x74
  4009b2:	f022 0210 	bic.w	r2, r2, #16
  4009b6:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  4009b8:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  4009ba:	2300      	movs	r3, #0
  4009bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  4009c0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009c4:	4630      	mov	r0, r6
  4009c6:	4f36      	ldr	r7, [pc, #216]	; (400aa0 <board_init+0x2a4>)
  4009c8:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  4009ca:	2300      	movs	r3, #0
  4009cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4009d0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  4009d4:	4630      	mov	r0, r6
  4009d6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  4009d8:	2301      	movs	r3, #1
  4009da:	22ff      	movs	r2, #255	; 0xff
  4009dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009e0:	4630      	mov	r0, r6
  4009e2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  4009e4:	2301      	movs	r3, #1
  4009e6:	223f      	movs	r2, #63	; 0x3f
  4009e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009ec:	482d      	ldr	r0, [pc, #180]	; (400aa4 <board_init+0x2a8>)
  4009ee:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  4009f0:	2301      	movs	r3, #1
  4009f2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  4009f6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  4009fa:	4620      	mov	r0, r4
  4009fc:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  4009fe:	2301      	movs	r3, #1
  400a00:	4642      	mov	r2, r8
  400a02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a06:	4630      	mov	r0, r6
  400a08:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400a0a:	2301      	movs	r3, #1
  400a0c:	462a      	mov	r2, r5
  400a0e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a12:	4630      	mov	r0, r6
  400a14:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400a16:	2301      	movs	r3, #1
  400a18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400a1c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400a20:	4821      	ldr	r0, [pc, #132]	; (400aa8 <board_init+0x2ac>)
  400a22:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400a24:	2300      	movs	r3, #0
  400a26:	f44f 7200 	mov.w	r2, #512	; 0x200
  400a2a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a2e:	4630      	mov	r0, r6
  400a30:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400a32:	f44f 7100 	mov.w	r1, #512	; 0x200
  400a36:	4630      	mov	r0, r6
  400a38:	4b1c      	ldr	r3, [pc, #112]	; (400aac <board_init+0x2b0>)
  400a3a:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400a3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a40:	2074      	movs	r0, #116	; 0x74
  400a42:	4c1b      	ldr	r4, [pc, #108]	; (400ab0 <board_init+0x2b4>)
  400a44:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400a46:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a4a:	2075      	movs	r0, #117	; 0x75
  400a4c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400a4e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a52:	2076      	movs	r0, #118	; 0x76
  400a54:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400a56:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400a5a:	207b      	movs	r0, #123	; 0x7b
  400a5c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400a5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a62:	2018      	movs	r0, #24
  400a64:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400a66:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a6a:	2006      	movs	r0, #6
  400a6c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400a6e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400a72:	2053      	movs	r0, #83	; 0x53
  400a74:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400a76:	2053      	movs	r0, #83	; 0x53
  400a78:	4b0e      	ldr	r3, [pc, #56]	; (400ab4 <board_init+0x2b8>)
  400a7a:	4798      	blx	r3
  400a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400a80:	400e1850 	.word	0x400e1850
  400a84:	e000ed00 	.word	0xe000ed00
  400a88:	400e0c00 	.word	0x400e0c00
  400a8c:	5a00080c 	.word	0x5a00080c
  400a90:	004014b1 	.word	0x004014b1
  400a94:	400e1200 	.word	0x400e1200
  400a98:	400e0e00 	.word	0x400e0e00
  400a9c:	40088000 	.word	0x40088000
  400aa0:	004010dd 	.word	0x004010dd
  400aa4:	400e1600 	.word	0x400e1600
  400aa8:	400e1400 	.word	0x400e1400
  400aac:	00400fe9 	.word	0x00400fe9
  400ab0:	004011ad 	.word	0x004011ad
  400ab4:	00401175 	.word	0x00401175

00400ab8 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400ab8:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400aba:	6804      	ldr	r4, [r0, #0]
  400abc:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400ac0:	d302      	bcc.n	400ac8 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400ac2:	f240 143f 	movw	r4, #319	; 0x13f
  400ac6:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400ac8:	6814      	ldr	r4, [r2, #0]
  400aca:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400ace:	d302      	bcc.n	400ad6 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400ad0:	f240 143f 	movw	r4, #319	; 0x13f
  400ad4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400ad6:	680c      	ldr	r4, [r1, #0]
  400ad8:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400adc:	d302      	bcc.n	400ae4 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400ade:	f240 14df 	movw	r4, #479	; 0x1df
  400ae2:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400ae4:	681c      	ldr	r4, [r3, #0]
  400ae6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400aea:	d302      	bcc.n	400af2 <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400aec:	f240 14df 	movw	r4, #479	; 0x1df
  400af0:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400af2:	6804      	ldr	r4, [r0, #0]
  400af4:	6815      	ldr	r5, [r2, #0]
  400af6:	42ac      	cmp	r4, r5
  400af8:	d901      	bls.n	400afe <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400afa:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400afc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400afe:	680a      	ldr	r2, [r1, #0]
  400b00:	6818      	ldr	r0, [r3, #0]
  400b02:	4282      	cmp	r2, r0
  400b04:	d901      	bls.n	400b0a <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400b06:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400b08:	601a      	str	r2, [r3, #0]
	}
}
  400b0a:	bc30      	pop	{r4, r5}
  400b0c:	4770      	bx	lr
	...

00400b10 <ili9488_write_ram_prepare>:
{
  400b10:	b510      	push	{r4, lr}
  400b12:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400b14:	2006      	movs	r0, #6
  400b16:	4b0a      	ldr	r3, [pc, #40]	; (400b40 <ili9488_write_ram_prepare+0x30>)
  400b18:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400b1a:	2300      	movs	r3, #0
  400b1c:	2203      	movs	r2, #3
  400b1e:	212c      	movs	r1, #44	; 0x2c
  400b20:	4808      	ldr	r0, [pc, #32]	; (400b44 <ili9488_write_ram_prepare+0x34>)
  400b22:	4c09      	ldr	r4, [pc, #36]	; (400b48 <ili9488_write_ram_prepare+0x38>)
  400b24:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400b26:	2300      	movs	r3, #0
  400b28:	9301      	str	r3, [sp, #4]
  400b2a:	9b01      	ldr	r3, [sp, #4]
  400b2c:	2bfe      	cmp	r3, #254	; 0xfe
  400b2e:	d805      	bhi.n	400b3c <ili9488_write_ram_prepare+0x2c>
  400b30:	9b01      	ldr	r3, [sp, #4]
  400b32:	3301      	adds	r3, #1
  400b34:	9301      	str	r3, [sp, #4]
  400b36:	9b01      	ldr	r3, [sp, #4]
  400b38:	2bfe      	cmp	r3, #254	; 0xfe
  400b3a:	d9f9      	bls.n	400b30 <ili9488_write_ram_prepare+0x20>
}
  400b3c:	b002      	add	sp, #8
  400b3e:	bd10      	pop	{r4, pc}
  400b40:	00401191 	.word	0x00401191
  400b44:	40008000 	.word	0x40008000
  400b48:	00401525 	.word	0x00401525

00400b4c <ili9488_write_register>:
{
  400b4c:	b570      	push	{r4, r5, r6, lr}
  400b4e:	b082      	sub	sp, #8
  400b50:	4605      	mov	r5, r0
  400b52:	460e      	mov	r6, r1
  400b54:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400b56:	2006      	movs	r0, #6
  400b58:	4b14      	ldr	r3, [pc, #80]	; (400bac <ili9488_write_register+0x60>)
  400b5a:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400b5c:	2300      	movs	r3, #0
  400b5e:	2203      	movs	r2, #3
  400b60:	4629      	mov	r1, r5
  400b62:	4813      	ldr	r0, [pc, #76]	; (400bb0 <ili9488_write_register+0x64>)
  400b64:	4d13      	ldr	r5, [pc, #76]	; (400bb4 <ili9488_write_register+0x68>)
  400b66:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400b68:	2300      	movs	r3, #0
  400b6a:	9301      	str	r3, [sp, #4]
  400b6c:	9b01      	ldr	r3, [sp, #4]
  400b6e:	2bfe      	cmp	r3, #254	; 0xfe
  400b70:	d805      	bhi.n	400b7e <ili9488_write_register+0x32>
  400b72:	9b01      	ldr	r3, [sp, #4]
  400b74:	3301      	adds	r3, #1
  400b76:	9301      	str	r3, [sp, #4]
  400b78:	9b01      	ldr	r3, [sp, #4]
  400b7a:	2bfe      	cmp	r3, #254	; 0xfe
  400b7c:	d9f9      	bls.n	400b72 <ili9488_write_register+0x26>
	if(size > 0) {
  400b7e:	b90c      	cbnz	r4, 400b84 <ili9488_write_register+0x38>
}
  400b80:	b002      	add	sp, #8
  400b82:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400b84:	2006      	movs	r0, #6
  400b86:	4b0c      	ldr	r3, [pc, #48]	; (400bb8 <ili9488_write_register+0x6c>)
  400b88:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400b8a:	4622      	mov	r2, r4
  400b8c:	4631      	mov	r1, r6
  400b8e:	4808      	ldr	r0, [pc, #32]	; (400bb0 <ili9488_write_register+0x64>)
  400b90:	4b0a      	ldr	r3, [pc, #40]	; (400bbc <ili9488_write_register+0x70>)
  400b92:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400b94:	2300      	movs	r3, #0
  400b96:	9301      	str	r3, [sp, #4]
  400b98:	9b01      	ldr	r3, [sp, #4]
  400b9a:	2b5e      	cmp	r3, #94	; 0x5e
  400b9c:	d8f0      	bhi.n	400b80 <ili9488_write_register+0x34>
  400b9e:	9b01      	ldr	r3, [sp, #4]
  400ba0:	3301      	adds	r3, #1
  400ba2:	9301      	str	r3, [sp, #4]
  400ba4:	9b01      	ldr	r3, [sp, #4]
  400ba6:	2b5e      	cmp	r3, #94	; 0x5e
  400ba8:	d9f9      	bls.n	400b9e <ili9488_write_register+0x52>
  400baa:	e7e9      	b.n	400b80 <ili9488_write_register+0x34>
  400bac:	00401191 	.word	0x00401191
  400bb0:	40008000 	.word	0x40008000
  400bb4:	00401525 	.word	0x00401525
  400bb8:	00401175 	.word	0x00401175
  400bbc:	004006e5 	.word	0x004006e5

00400bc0 <ili9488_write_ram_buffer>:
{
  400bc0:	b530      	push	{r4, r5, lr}
  400bc2:	b083      	sub	sp, #12
  400bc4:	4604      	mov	r4, r0
  400bc6:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400bc8:	2006      	movs	r0, #6
  400bca:	4b0a      	ldr	r3, [pc, #40]	; (400bf4 <ili9488_write_ram_buffer+0x34>)
  400bcc:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400bce:	462a      	mov	r2, r5
  400bd0:	4621      	mov	r1, r4
  400bd2:	4809      	ldr	r0, [pc, #36]	; (400bf8 <ili9488_write_ram_buffer+0x38>)
  400bd4:	4b09      	ldr	r3, [pc, #36]	; (400bfc <ili9488_write_ram_buffer+0x3c>)
  400bd6:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400bd8:	2300      	movs	r3, #0
  400bda:	9301      	str	r3, [sp, #4]
  400bdc:	9b01      	ldr	r3, [sp, #4]
  400bde:	2bfe      	cmp	r3, #254	; 0xfe
  400be0:	d805      	bhi.n	400bee <ili9488_write_ram_buffer+0x2e>
  400be2:	9b01      	ldr	r3, [sp, #4]
  400be4:	3301      	adds	r3, #1
  400be6:	9301      	str	r3, [sp, #4]
  400be8:	9b01      	ldr	r3, [sp, #4]
  400bea:	2bfe      	cmp	r3, #254	; 0xfe
  400bec:	d9f9      	bls.n	400be2 <ili9488_write_ram_buffer+0x22>
}
  400bee:	b003      	add	sp, #12
  400bf0:	bd30      	pop	{r4, r5, pc}
  400bf2:	bf00      	nop
  400bf4:	00401175 	.word	0x00401175
  400bf8:	40008000 	.word	0x40008000
  400bfc:	004006e5 	.word	0x004006e5

00400c00 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400c00:	4601      	mov	r1, r0
  400c02:	b130      	cbz	r0, 400c12 <ili9488_delay+0x12>
  400c04:	4a03      	ldr	r2, [pc, #12]	; (400c14 <ili9488_delay+0x14>)
{
  400c06:	4b04      	ldr	r3, [pc, #16]	; (400c18 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400c08:	3b01      	subs	r3, #1
  400c0a:	d1fd      	bne.n	400c08 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400c0c:	4291      	cmp	r1, r2
  400c0e:	d8fa      	bhi.n	400c06 <ili9488_delay+0x6>
  400c10:	4770      	bx	lr
  400c12:	4770      	bx	lr
  400c14:	000186a1 	.word	0x000186a1
  400c18:	000186a0 	.word	0x000186a0

00400c1c <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400c1c:	b500      	push	{lr}
  400c1e:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400c20:	b958      	cbnz	r0, 400c3a <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400c22:	2348      	movs	r3, #72	; 0x48
  400c24:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400c28:	2201      	movs	r2, #1
  400c2a:	f10d 0107 	add.w	r1, sp, #7
  400c2e:	2036      	movs	r0, #54	; 0x36
  400c30:	4b04      	ldr	r3, [pc, #16]	; (400c44 <ili9488_set_display_direction+0x28>)
  400c32:	4798      	blx	r3
}
  400c34:	b003      	add	sp, #12
  400c36:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400c3a:	23e8      	movs	r3, #232	; 0xe8
  400c3c:	f88d 3007 	strb.w	r3, [sp, #7]
  400c40:	e7f2      	b.n	400c28 <ili9488_set_display_direction+0xc>
  400c42:	bf00      	nop
  400c44:	00400b4d 	.word	0x00400b4d

00400c48 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400c48:	b510      	push	{r4, lr}
  400c4a:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400c4c:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400c50:	3a01      	subs	r2, #1
  400c52:	4402      	add	r2, r0
  400c54:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400c58:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400c5c:	3b01      	subs	r3, #1
  400c5e:	4419      	add	r1, r3
  400c60:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400c64:	0a03      	lsrs	r3, r0, #8
  400c66:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400c6a:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400c6e:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400c72:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400c76:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400c7a:	2204      	movs	r2, #4
  400c7c:	eb0d 0102 	add.w	r1, sp, r2
  400c80:	202a      	movs	r0, #42	; 0x2a
  400c82:	4c10      	ldr	r4, [pc, #64]	; (400cc4 <ili9488_set_window+0x7c>)
  400c84:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400c86:	2200      	movs	r2, #0
  400c88:	4611      	mov	r1, r2
  400c8a:	4610      	mov	r0, r2
  400c8c:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400c8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400c92:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400c96:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400c9a:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400c9e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400ca2:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400ca6:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400caa:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400cae:	2204      	movs	r2, #4
  400cb0:	eb0d 0102 	add.w	r1, sp, r2
  400cb4:	202b      	movs	r0, #43	; 0x2b
  400cb6:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400cb8:	2200      	movs	r2, #0
  400cba:	4611      	mov	r1, r2
  400cbc:	4610      	mov	r0, r2
  400cbe:	47a0      	blx	r4
}
  400cc0:	b004      	add	sp, #16
  400cc2:	bd10      	pop	{r4, pc}
  400cc4:	00400b4d 	.word	0x00400b4d

00400cc8 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400cc8:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400cca:	2200      	movs	r2, #0
  400ccc:	4611      	mov	r1, r2
  400cce:	2029      	movs	r0, #41	; 0x29
  400cd0:	4b01      	ldr	r3, [pc, #4]	; (400cd8 <ili9488_display_on+0x10>)
  400cd2:	4798      	blx	r3
  400cd4:	bd08      	pop	{r3, pc}
  400cd6:	bf00      	nop
  400cd8:	00400b4d 	.word	0x00400b4d

00400cdc <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400cdc:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400cde:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400ce2:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400ce6:	4b06      	ldr	r3, [pc, #24]	; (400d00 <ili9488_set_foreground_color+0x24>)
  400ce8:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400cec:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400cee:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400cf0:	7098      	strb	r0, [r3, #2]
  400cf2:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400cf4:	4293      	cmp	r3, r2
  400cf6:	d1f9      	bne.n	400cec <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400cf8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400cfc:	4770      	bx	lr
  400cfe:	bf00      	nop
  400d00:	204009dc 	.word	0x204009dc

00400d04 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400d04:	b510      	push	{r4, lr}
  400d06:	b084      	sub	sp, #16
  400d08:	f8ad 0006 	strh.w	r0, [sp, #6]
  400d0c:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400d10:	0a03      	lsrs	r3, r0, #8
  400d12:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400d16:	b2c0      	uxtb	r0, r0
  400d18:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400d1c:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400d20:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400d24:	2204      	movs	r2, #4
  400d26:	a903      	add	r1, sp, #12
  400d28:	202a      	movs	r0, #42	; 0x2a
  400d2a:	4c0e      	ldr	r4, [pc, #56]	; (400d64 <ili9488_set_cursor_position+0x60>)
  400d2c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d2e:	2200      	movs	r2, #0
  400d30:	4611      	mov	r1, r2
  400d32:	4610      	mov	r0, r2
  400d34:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400d36:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400d3a:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400d3e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400d42:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400d46:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400d4a:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400d4e:	2204      	movs	r2, #4
  400d50:	a903      	add	r1, sp, #12
  400d52:	202b      	movs	r0, #43	; 0x2b
  400d54:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d56:	2200      	movs	r2, #0
  400d58:	4611      	mov	r1, r2
  400d5a:	4610      	mov	r0, r2
  400d5c:	47a0      	blx	r4
}
  400d5e:	b004      	add	sp, #16
  400d60:	bd10      	pop	{r4, pc}
  400d62:	bf00      	nop
  400d64:	00400b4d 	.word	0x00400b4d

00400d68 <ili9488_init>:
{
  400d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400d6c:	b087      	sub	sp, #28
  400d6e:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400d70:	2703      	movs	r7, #3
  400d72:	ae06      	add	r6, sp, #24
  400d74:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400d78:	4d5d      	ldr	r5, [pc, #372]	; (400ef0 <ili9488_init+0x188>)
  400d7a:	4628      	mov	r0, r5
  400d7c:	4b5d      	ldr	r3, [pc, #372]	; (400ef4 <ili9488_init+0x18c>)
  400d7e:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400d80:	2400      	movs	r4, #0
  400d82:	9400      	str	r4, [sp, #0]
  400d84:	4b5c      	ldr	r3, [pc, #368]	; (400ef8 <ili9488_init+0x190>)
  400d86:	463a      	mov	r2, r7
  400d88:	4631      	mov	r1, r6
  400d8a:	4628      	mov	r0, r5
  400d8c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 400f28 <ili9488_init+0x1c0>
  400d90:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400d92:	4622      	mov	r2, r4
  400d94:	4639      	mov	r1, r7
  400d96:	4628      	mov	r0, r5
  400d98:	4b58      	ldr	r3, [pc, #352]	; (400efc <ili9488_init+0x194>)
  400d9a:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400d9c:	4631      	mov	r1, r6
  400d9e:	4628      	mov	r0, r5
  400da0:	4b57      	ldr	r3, [pc, #348]	; (400f00 <ili9488_init+0x198>)
  400da2:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400da4:	2001      	movs	r0, #1
  400da6:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400da8:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400daa:	4622      	mov	r2, r4
  400dac:	4621      	mov	r1, r4
  400dae:	4e55      	ldr	r6, [pc, #340]	; (400f04 <ili9488_init+0x19c>)
  400db0:	47b0      	blx	r6
	ili9488_delay(200);
  400db2:	20c8      	movs	r0, #200	; 0xc8
  400db4:	4d54      	ldr	r5, [pc, #336]	; (400f08 <ili9488_init+0x1a0>)
  400db6:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400db8:	4622      	mov	r2, r4
  400dba:	4621      	mov	r1, r4
  400dbc:	2011      	movs	r0, #17
  400dbe:	47b0      	blx	r6
	ili9488_delay(200);
  400dc0:	20c8      	movs	r0, #200	; 0xc8
  400dc2:	47a8      	blx	r5
	reg = 0x81;
  400dc4:	2381      	movs	r3, #129	; 0x81
  400dc6:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400dca:	f88d 400b 	strb.w	r4, [sp, #11]
  400dce:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400dd0:	f04f 0801 	mov.w	r8, #1
  400dd4:	4f4b      	ldr	r7, [pc, #300]	; (400f04 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400dd6:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400dd8:	4642      	mov	r2, r8
  400dda:	f10d 010a 	add.w	r1, sp, #10
  400dde:	20fb      	movs	r0, #251	; 0xfb
  400de0:	47b8      	blx	r7
		reg++;
  400de2:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400de6:	3301      	adds	r3, #1
  400de8:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400dec:	9503      	str	r5, [sp, #12]
  400dee:	9b03      	ldr	r3, [sp, #12]
  400df0:	2bfe      	cmp	r3, #254	; 0xfe
  400df2:	d805      	bhi.n	400e00 <ili9488_init+0x98>
  400df4:	9b03      	ldr	r3, [sp, #12]
  400df6:	3301      	adds	r3, #1
  400df8:	9303      	str	r3, [sp, #12]
  400dfa:	9b03      	ldr	r3, [sp, #12]
  400dfc:	2bfe      	cmp	r3, #254	; 0xfe
  400dfe:	d9f9      	bls.n	400df4 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400e00:	462a      	mov	r2, r5
  400e02:	4629      	mov	r1, r5
  400e04:	20d3      	movs	r0, #211	; 0xd3
  400e06:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400e08:	2006      	movs	r0, #6
  400e0a:	4b40      	ldr	r3, [pc, #256]	; (400f0c <ili9488_init+0x1a4>)
  400e0c:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400e0e:	4642      	mov	r2, r8
  400e10:	f10d 0109 	add.w	r1, sp, #9
  400e14:	4836      	ldr	r0, [pc, #216]	; (400ef0 <ili9488_init+0x188>)
  400e16:	4b3e      	ldr	r3, [pc, #248]	; (400f10 <ili9488_init+0x1a8>)
  400e18:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400e1a:	9503      	str	r5, [sp, #12]
  400e1c:	9b03      	ldr	r3, [sp, #12]
  400e1e:	2bfe      	cmp	r3, #254	; 0xfe
  400e20:	d805      	bhi.n	400e2e <ili9488_init+0xc6>
  400e22:	9b03      	ldr	r3, [sp, #12]
  400e24:	3301      	adds	r3, #1
  400e26:	9303      	str	r3, [sp, #12]
  400e28:	9b03      	ldr	r3, [sp, #12]
  400e2a:	2bfe      	cmp	r3, #254	; 0xfe
  400e2c:	d9f9      	bls.n	400e22 <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400e2e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400e32:	40b3      	lsls	r3, r6
  400e34:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400e36:	4642      	mov	r2, r8
  400e38:	f10d 010b 	add.w	r1, sp, #11
  400e3c:	20fb      	movs	r0, #251	; 0xfb
  400e3e:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400e40:	9503      	str	r5, [sp, #12]
  400e42:	9a03      	ldr	r2, [sp, #12]
  400e44:	f640 73fe 	movw	r3, #4094	; 0xffe
  400e48:	429a      	cmp	r2, r3
  400e4a:	d806      	bhi.n	400e5a <ili9488_init+0xf2>
  400e4c:	461a      	mov	r2, r3
  400e4e:	9b03      	ldr	r3, [sp, #12]
  400e50:	3301      	adds	r3, #1
  400e52:	9303      	str	r3, [sp, #12]
  400e54:	9b03      	ldr	r3, [sp, #12]
  400e56:	4293      	cmp	r3, r2
  400e58:	d9f9      	bls.n	400e4e <ili9488_init+0xe6>
  400e5a:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  400e5c:	f116 0f08 	cmn.w	r6, #8
  400e60:	d1ba      	bne.n	400dd8 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  400e62:	f249 4388 	movw	r3, #38024	; 0x9488
  400e66:	429c      	cmp	r4, r3
  400e68:	d003      	beq.n	400e72 <ili9488_init+0x10a>
		return 1;
  400e6a:	2001      	movs	r0, #1
}
  400e6c:	b007      	add	sp, #28
  400e6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  400e72:	ad06      	add	r5, sp, #24
  400e74:	2348      	movs	r3, #72	; 0x48
  400e76:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400e7a:	2201      	movs	r2, #1
  400e7c:	4629      	mov	r1, r5
  400e7e:	2036      	movs	r0, #54	; 0x36
  400e80:	4e20      	ldr	r6, [pc, #128]	; (400f04 <ili9488_init+0x19c>)
  400e82:	47b0      	blx	r6
	ili9488_delay(100);
  400e84:	2064      	movs	r0, #100	; 0x64
  400e86:	4c20      	ldr	r4, [pc, #128]	; (400f08 <ili9488_init+0x1a0>)
  400e88:	47a0      	blx	r4
	param = 0x04;
  400e8a:	2304      	movs	r3, #4
  400e8c:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400e90:	2201      	movs	r2, #1
  400e92:	4629      	mov	r1, r5
  400e94:	20cf      	movs	r0, #207	; 0xcf
  400e96:	47b0      	blx	r6
	ili9488_delay(100);
  400e98:	2064      	movs	r0, #100	; 0x64
  400e9a:	47a0      	blx	r4
	param = 0x06;
  400e9c:	2306      	movs	r3, #6
  400e9e:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400ea2:	2201      	movs	r2, #1
  400ea4:	4629      	mov	r1, r5
  400ea6:	203a      	movs	r0, #58	; 0x3a
  400ea8:	47b0      	blx	r6
	ili9488_delay(100);
  400eaa:	2064      	movs	r0, #100	; 0x64
  400eac:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  400eae:	2200      	movs	r2, #0
  400eb0:	4611      	mov	r1, r2
  400eb2:	2013      	movs	r0, #19
  400eb4:	47b0      	blx	r6
	ili9488_delay(100);
  400eb6:	2064      	movs	r0, #100	; 0x64
  400eb8:	47a0      	blx	r4
	ili9488_display_on();
  400eba:	4b16      	ldr	r3, [pc, #88]	; (400f14 <ili9488_init+0x1ac>)
  400ebc:	4798      	blx	r3
	ili9488_delay(100);
  400ebe:	2064      	movs	r0, #100	; 0x64
  400ec0:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  400ec2:	2000      	movs	r0, #0
  400ec4:	4b14      	ldr	r3, [pc, #80]	; (400f18 <ili9488_init+0x1b0>)
  400ec6:	4798      	blx	r3
	ili9488_delay(100);
  400ec8:	2064      	movs	r0, #100	; 0x64
  400eca:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400ecc:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  400ed0:	f8b9 2000 	ldrh.w	r2, [r9]
  400ed4:	2100      	movs	r1, #0
  400ed6:	4608      	mov	r0, r1
  400ed8:	4c10      	ldr	r4, [pc, #64]	; (400f1c <ili9488_init+0x1b4>)
  400eda:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  400edc:	f8d9 0008 	ldr.w	r0, [r9, #8]
  400ee0:	4b0f      	ldr	r3, [pc, #60]	; (400f20 <ili9488_init+0x1b8>)
  400ee2:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400ee4:	2100      	movs	r1, #0
  400ee6:	4608      	mov	r0, r1
  400ee8:	4b0e      	ldr	r3, [pc, #56]	; (400f24 <ili9488_init+0x1bc>)
  400eea:	4798      	blx	r3
	return 0;
  400eec:	2000      	movs	r0, #0
  400eee:	e7bd      	b.n	400e6c <ili9488_init+0x104>
  400ef0:	40008000 	.word	0x40008000
  400ef4:	004005e1 	.word	0x004005e1
  400ef8:	01312d00 	.word	0x01312d00
  400efc:	00401595 	.word	0x00401595
  400f00:	004006b5 	.word	0x004006b5
  400f04:	00400b4d 	.word	0x00400b4d
  400f08:	00400c01 	.word	0x00400c01
  400f0c:	00401175 	.word	0x00401175
  400f10:	0040071b 	.word	0x0040071b
  400f14:	00400cc9 	.word	0x00400cc9
  400f18:	00400c1d 	.word	0x00400c1d
  400f1c:	00400c49 	.word	0x00400c49
  400f20:	00400cdd 	.word	0x00400cdd
  400f24:	00400d05 	.word	0x00400d05
  400f28:	00400635 	.word	0x00400635

00400f2c <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  400f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f30:	b084      	sub	sp, #16
  400f32:	9003      	str	r0, [sp, #12]
  400f34:	9102      	str	r1, [sp, #8]
  400f36:	9201      	str	r2, [sp, #4]
  400f38:	aa04      	add	r2, sp, #16
  400f3a:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  400f3e:	4613      	mov	r3, r2
  400f40:	aa01      	add	r2, sp, #4
  400f42:	a902      	add	r1, sp, #8
  400f44:	a803      	add	r0, sp, #12
  400f46:	4c22      	ldr	r4, [pc, #136]	; (400fd0 <ili9488_draw_filled_rectangle+0xa4>)
  400f48:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  400f4a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  400f4e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  400f52:	9b00      	ldr	r3, [sp, #0]
  400f54:	3301      	adds	r3, #1
  400f56:	1a5b      	subs	r3, r3, r1
  400f58:	9a01      	ldr	r2, [sp, #4]
  400f5a:	3201      	adds	r2, #1
  400f5c:	1a12      	subs	r2, r2, r0
  400f5e:	b29b      	uxth	r3, r3
  400f60:	b292      	uxth	r2, r2
  400f62:	4c1c      	ldr	r4, [pc, #112]	; (400fd4 <ili9488_draw_filled_rectangle+0xa8>)
  400f64:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  400f66:	4b1c      	ldr	r3, [pc, #112]	; (400fd8 <ili9488_draw_filled_rectangle+0xac>)
  400f68:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  400f6a:	9903      	ldr	r1, [sp, #12]
  400f6c:	9d01      	ldr	r5, [sp, #4]
  400f6e:	1a69      	subs	r1, r5, r1
  400f70:	9d00      	ldr	r5, [sp, #0]
  400f72:	3501      	adds	r5, #1
  400f74:	9b02      	ldr	r3, [sp, #8]
  400f76:	1aed      	subs	r5, r5, r3
  400f78:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  400f7c:	4b17      	ldr	r3, [pc, #92]	; (400fdc <ili9488_draw_filled_rectangle+0xb0>)
  400f7e:	fba3 2305 	umull	r2, r3, r3, r5
  400f82:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  400f84:	b163      	cbz	r3, 400fa0 <ili9488_draw_filled_rectangle+0x74>
  400f86:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  400f88:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400fe4 <ili9488_draw_filled_rectangle+0xb8>
  400f8c:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  400f90:	4e13      	ldr	r6, [pc, #76]	; (400fe0 <ili9488_draw_filled_rectangle+0xb4>)
  400f92:	4639      	mov	r1, r7
  400f94:	4640      	mov	r0, r8
  400f96:	47b0      	blx	r6
	while (blocks--) {
  400f98:	3c01      	subs	r4, #1
  400f9a:	f1b4 3fff 	cmp.w	r4, #4294967295
  400f9e:	d1f8      	bne.n	400f92 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  400fa0:	490e      	ldr	r1, [pc, #56]	; (400fdc <ili9488_draw_filled_rectangle+0xb0>)
  400fa2:	fba1 3105 	umull	r3, r1, r1, r5
  400fa6:	0a09      	lsrs	r1, r1, #8
  400fa8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  400fac:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  400fb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  400fb4:	480b      	ldr	r0, [pc, #44]	; (400fe4 <ili9488_draw_filled_rectangle+0xb8>)
  400fb6:	4b0a      	ldr	r3, [pc, #40]	; (400fe0 <ili9488_draw_filled_rectangle+0xb4>)
  400fb8:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  400fba:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  400fbe:	f44f 72a0 	mov.w	r2, #320	; 0x140
  400fc2:	2100      	movs	r1, #0
  400fc4:	4608      	mov	r0, r1
  400fc6:	4c03      	ldr	r4, [pc, #12]	; (400fd4 <ili9488_draw_filled_rectangle+0xa8>)
  400fc8:	47a0      	blx	r4

}
  400fca:	b004      	add	sp, #16
  400fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400fd0:	00400ab9 	.word	0x00400ab9
  400fd4:	00400c49 	.word	0x00400c49
  400fd8:	00400b11 	.word	0x00400b11
  400fdc:	cccccccd 	.word	0xcccccccd
  400fe0:	00400bc1 	.word	0x00400bc1
  400fe4:	204009dc 	.word	0x204009dc

00400fe8 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400fe8:	6301      	str	r1, [r0, #48]	; 0x30
  400fea:	4770      	bx	lr

00400fec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400fec:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400fee:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400ff2:	d03a      	beq.n	40106a <pio_set_peripheral+0x7e>
  400ff4:	d813      	bhi.n	40101e <pio_set_peripheral+0x32>
  400ff6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400ffa:	d025      	beq.n	401048 <pio_set_peripheral+0x5c>
  400ffc:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401000:	d10a      	bne.n	401018 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401002:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401004:	4313      	orrs	r3, r2
  401006:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401008:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40100a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40100c:	400b      	ands	r3, r1
  40100e:	ea23 0302 	bic.w	r3, r3, r2
  401012:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401014:	6042      	str	r2, [r0, #4]
  401016:	4770      	bx	lr
	switch (ul_type) {
  401018:	2900      	cmp	r1, #0
  40101a:	d1fb      	bne.n	401014 <pio_set_peripheral+0x28>
  40101c:	4770      	bx	lr
  40101e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401022:	d021      	beq.n	401068 <pio_set_peripheral+0x7c>
  401024:	d809      	bhi.n	40103a <pio_set_peripheral+0x4e>
  401026:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40102a:	d1f3      	bne.n	401014 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  40102c:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40102e:	4313      	orrs	r3, r2
  401030:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401032:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401034:	4313      	orrs	r3, r2
  401036:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401038:	e7ec      	b.n	401014 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40103a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40103e:	d013      	beq.n	401068 <pio_set_peripheral+0x7c>
  401040:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401044:	d010      	beq.n	401068 <pio_set_peripheral+0x7c>
  401046:	e7e5      	b.n	401014 <pio_set_peripheral+0x28>
{
  401048:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40104a:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40104c:	6f04      	ldr	r4, [r0, #112]	; 0x70
  40104e:	43d3      	mvns	r3, r2
  401050:	4021      	ands	r1, r4
  401052:	461c      	mov	r4, r3
  401054:	4019      	ands	r1, r3
  401056:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401058:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40105a:	6f41      	ldr	r1, [r0, #116]	; 0x74
  40105c:	400b      	ands	r3, r1
  40105e:	4023      	ands	r3, r4
  401060:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  401062:	6042      	str	r2, [r0, #4]
}
  401064:	f85d 4b04 	ldr.w	r4, [sp], #4
  401068:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  40106a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  40106c:	6f01      	ldr	r1, [r0, #112]	; 0x70
  40106e:	400b      	ands	r3, r1
  401070:	ea23 0302 	bic.w	r3, r3, r2
  401074:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401076:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401078:	4313      	orrs	r3, r2
  40107a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40107c:	e7ca      	b.n	401014 <pio_set_peripheral+0x28>

0040107e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  40107e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401080:	f012 0f01 	tst.w	r2, #1
  401084:	d10d      	bne.n	4010a2 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  401086:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401088:	f012 0f0a 	tst.w	r2, #10
  40108c:	d00b      	beq.n	4010a6 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  40108e:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  401090:	f012 0f02 	tst.w	r2, #2
  401094:	d109      	bne.n	4010aa <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  401096:	f012 0f08 	tst.w	r2, #8
  40109a:	d008      	beq.n	4010ae <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  40109c:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4010a0:	e005      	b.n	4010ae <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4010a2:	6641      	str	r1, [r0, #100]	; 0x64
  4010a4:	e7f0      	b.n	401088 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4010a6:	6241      	str	r1, [r0, #36]	; 0x24
  4010a8:	e7f2      	b.n	401090 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4010aa:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4010ae:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4010b0:	6001      	str	r1, [r0, #0]
  4010b2:	4770      	bx	lr

004010b4 <pio_set_output>:
{
  4010b4:	b410      	push	{r4}
  4010b6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4010b8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4010ba:	b94c      	cbnz	r4, 4010d0 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4010bc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4010be:	b14b      	cbz	r3, 4010d4 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4010c0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4010c2:	b94a      	cbnz	r2, 4010d8 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4010c4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4010c6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  4010c8:	6001      	str	r1, [r0, #0]
}
  4010ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  4010ce:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  4010d0:	6641      	str	r1, [r0, #100]	; 0x64
  4010d2:	e7f4      	b.n	4010be <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  4010d4:	6541      	str	r1, [r0, #84]	; 0x54
  4010d6:	e7f4      	b.n	4010c2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4010d8:	6301      	str	r1, [r0, #48]	; 0x30
  4010da:	e7f4      	b.n	4010c6 <pio_set_output+0x12>

004010dc <pio_configure>:
{
  4010dc:	b570      	push	{r4, r5, r6, lr}
  4010de:	b082      	sub	sp, #8
  4010e0:	4605      	mov	r5, r0
  4010e2:	4616      	mov	r6, r2
  4010e4:	461c      	mov	r4, r3
	switch (ul_type) {
  4010e6:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  4010ea:	d014      	beq.n	401116 <pio_configure+0x3a>
  4010ec:	d90a      	bls.n	401104 <pio_configure+0x28>
  4010ee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  4010f2:	d024      	beq.n	40113e <pio_configure+0x62>
  4010f4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4010f8:	d021      	beq.n	40113e <pio_configure+0x62>
  4010fa:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  4010fe:	d017      	beq.n	401130 <pio_configure+0x54>
		return 0;
  401100:	2000      	movs	r0, #0
  401102:	e01a      	b.n	40113a <pio_configure+0x5e>
	switch (ul_type) {
  401104:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401108:	d005      	beq.n	401116 <pio_configure+0x3a>
  40110a:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40110e:	d002      	beq.n	401116 <pio_configure+0x3a>
  401110:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401114:	d1f4      	bne.n	401100 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401116:	4632      	mov	r2, r6
  401118:	4628      	mov	r0, r5
  40111a:	4b11      	ldr	r3, [pc, #68]	; (401160 <pio_configure+0x84>)
  40111c:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40111e:	f014 0f01 	tst.w	r4, #1
  401122:	d102      	bne.n	40112a <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401124:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  401126:	2001      	movs	r0, #1
  401128:	e007      	b.n	40113a <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40112a:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  40112c:	2001      	movs	r0, #1
  40112e:	e004      	b.n	40113a <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401130:	461a      	mov	r2, r3
  401132:	4631      	mov	r1, r6
  401134:	4b0b      	ldr	r3, [pc, #44]	; (401164 <pio_configure+0x88>)
  401136:	4798      	blx	r3
	return 1;
  401138:	2001      	movs	r0, #1
}
  40113a:	b002      	add	sp, #8
  40113c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  40113e:	f004 0301 	and.w	r3, r4, #1
  401142:	9300      	str	r3, [sp, #0]
  401144:	f3c4 0380 	ubfx	r3, r4, #2, #1
  401148:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40114c:	bf14      	ite	ne
  40114e:	2200      	movne	r2, #0
  401150:	2201      	moveq	r2, #1
  401152:	4631      	mov	r1, r6
  401154:	4628      	mov	r0, r5
  401156:	4c04      	ldr	r4, [pc, #16]	; (401168 <pio_configure+0x8c>)
  401158:	47a0      	blx	r4
	return 1;
  40115a:	2001      	movs	r0, #1
		break;
  40115c:	e7ed      	b.n	40113a <pio_configure+0x5e>
  40115e:	bf00      	nop
  401160:	00400fed 	.word	0x00400fed
  401164:	0040107f 	.word	0x0040107f
  401168:	004010b5 	.word	0x004010b5

0040116c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  40116c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  40116e:	4770      	bx	lr

00401170 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  401170:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  401172:	4770      	bx	lr

00401174 <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401174:	4b05      	ldr	r3, [pc, #20]	; (40118c <pio_set_pin_high+0x18>)
  401176:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  40117a:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  40117c:	f000 001f 	and.w	r0, r0, #31
  401180:	2201      	movs	r2, #1
  401182:	fa02 f000 	lsl.w	r0, r2, r0
  401186:	6318      	str	r0, [r3, #48]	; 0x30
  401188:	4770      	bx	lr
  40118a:	bf00      	nop
  40118c:	00200707 	.word	0x00200707

00401190 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  401190:	4b05      	ldr	r3, [pc, #20]	; (4011a8 <pio_set_pin_low+0x18>)
  401192:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  401196:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  401198:	f000 001f 	and.w	r0, r0, #31
  40119c:	2201      	movs	r2, #1
  40119e:	fa02 f000 	lsl.w	r0, r2, r0
  4011a2:	6358      	str	r0, [r3, #52]	; 0x34
  4011a4:	4770      	bx	lr
  4011a6:	bf00      	nop
  4011a8:	00200707 	.word	0x00200707

004011ac <pio_configure_pin>:
{
  4011ac:	b570      	push	{r4, r5, r6, lr}
  4011ae:	b082      	sub	sp, #8
  4011b0:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4011b2:	4c46      	ldr	r4, [pc, #280]	; (4012cc <pio_configure_pin+0x120>)
  4011b4:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  4011b8:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  4011ba:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  4011be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  4011c2:	d059      	beq.n	401278 <pio_configure_pin+0xcc>
  4011c4:	d80a      	bhi.n	4011dc <pio_configure_pin+0x30>
  4011c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  4011ca:	d02f      	beq.n	40122c <pio_configure_pin+0x80>
  4011cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  4011d0:	d03f      	beq.n	401252 <pio_configure_pin+0xa6>
  4011d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  4011d6:	d016      	beq.n	401206 <pio_configure_pin+0x5a>
		return 0;
  4011d8:	2000      	movs	r0, #0
  4011da:	e012      	b.n	401202 <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  4011dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  4011e0:	d05d      	beq.n	40129e <pio_configure_pin+0xf2>
  4011e2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  4011e6:	d05a      	beq.n	40129e <pio_configure_pin+0xf2>
  4011e8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  4011ec:	d1f4      	bne.n	4011d8 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  4011ee:	f000 011f 	and.w	r1, r0, #31
  4011f2:	2601      	movs	r6, #1
  4011f4:	462a      	mov	r2, r5
  4011f6:	fa06 f101 	lsl.w	r1, r6, r1
  4011fa:	4620      	mov	r0, r4
  4011fc:	4b34      	ldr	r3, [pc, #208]	; (4012d0 <pio_configure_pin+0x124>)
  4011fe:	4798      	blx	r3
	return 1;
  401200:	4630      	mov	r0, r6
}
  401202:	b002      	add	sp, #8
  401204:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  401206:	f000 001f 	and.w	r0, r0, #31
  40120a:	2601      	movs	r6, #1
  40120c:	4086      	lsls	r6, r0
  40120e:	4632      	mov	r2, r6
  401210:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  401214:	4620      	mov	r0, r4
  401216:	4b2f      	ldr	r3, [pc, #188]	; (4012d4 <pio_configure_pin+0x128>)
  401218:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40121a:	f015 0f01 	tst.w	r5, #1
  40121e:	d102      	bne.n	401226 <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401220:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401222:	2001      	movs	r0, #1
  401224:	e7ed      	b.n	401202 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401226:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401228:	2001      	movs	r0, #1
  40122a:	e7ea      	b.n	401202 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  40122c:	f000 001f 	and.w	r0, r0, #31
  401230:	2601      	movs	r6, #1
  401232:	4086      	lsls	r6, r0
  401234:	4632      	mov	r2, r6
  401236:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  40123a:	4620      	mov	r0, r4
  40123c:	4b25      	ldr	r3, [pc, #148]	; (4012d4 <pio_configure_pin+0x128>)
  40123e:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401240:	f015 0f01 	tst.w	r5, #1
  401244:	d102      	bne.n	40124c <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  401246:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401248:	2001      	movs	r0, #1
  40124a:	e7da      	b.n	401202 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40124c:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40124e:	2001      	movs	r0, #1
  401250:	e7d7      	b.n	401202 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  401252:	f000 001f 	and.w	r0, r0, #31
  401256:	2601      	movs	r6, #1
  401258:	4086      	lsls	r6, r0
  40125a:	4632      	mov	r2, r6
  40125c:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  401260:	4620      	mov	r0, r4
  401262:	4b1c      	ldr	r3, [pc, #112]	; (4012d4 <pio_configure_pin+0x128>)
  401264:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401266:	f015 0f01 	tst.w	r5, #1
  40126a:	d102      	bne.n	401272 <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  40126c:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40126e:	2001      	movs	r0, #1
  401270:	e7c7      	b.n	401202 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401272:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401274:	2001      	movs	r0, #1
  401276:	e7c4      	b.n	401202 <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  401278:	f000 001f 	and.w	r0, r0, #31
  40127c:	2601      	movs	r6, #1
  40127e:	4086      	lsls	r6, r0
  401280:	4632      	mov	r2, r6
  401282:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  401286:	4620      	mov	r0, r4
  401288:	4b12      	ldr	r3, [pc, #72]	; (4012d4 <pio_configure_pin+0x128>)
  40128a:	4798      	blx	r3
	if (ul_pull_up_enable) {
  40128c:	f015 0f01 	tst.w	r5, #1
  401290:	d102      	bne.n	401298 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  401292:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  401294:	2001      	movs	r0, #1
  401296:	e7b4      	b.n	401202 <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  401298:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  40129a:	2001      	movs	r0, #1
  40129c:	e7b1      	b.n	401202 <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  40129e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4012a2:	f000 011f 	and.w	r1, r0, #31
  4012a6:	2601      	movs	r6, #1
  4012a8:	ea05 0306 	and.w	r3, r5, r6
  4012ac:	9300      	str	r3, [sp, #0]
  4012ae:	f3c5 0380 	ubfx	r3, r5, #2, #1
  4012b2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  4012b6:	bf14      	ite	ne
  4012b8:	2200      	movne	r2, #0
  4012ba:	2201      	moveq	r2, #1
  4012bc:	fa06 f101 	lsl.w	r1, r6, r1
  4012c0:	4620      	mov	r0, r4
  4012c2:	4c05      	ldr	r4, [pc, #20]	; (4012d8 <pio_configure_pin+0x12c>)
  4012c4:	47a0      	blx	r4
	return 1;
  4012c6:	4630      	mov	r0, r6
		break;
  4012c8:	e79b      	b.n	401202 <pio_configure_pin+0x56>
  4012ca:	bf00      	nop
  4012cc:	00200707 	.word	0x00200707
  4012d0:	0040107f 	.word	0x0040107f
  4012d4:	00400fed 	.word	0x00400fed
  4012d8:	004010b5 	.word	0x004010b5

004012dc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012e0:	4604      	mov	r4, r0
  4012e2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012e4:	4b0e      	ldr	r3, [pc, #56]	; (401320 <pio_handler_process+0x44>)
  4012e6:	4798      	blx	r3
  4012e8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4012ea:	4620      	mov	r0, r4
  4012ec:	4b0d      	ldr	r3, [pc, #52]	; (401324 <pio_handler_process+0x48>)
  4012ee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4012f0:	4005      	ands	r5, r0
  4012f2:	d013      	beq.n	40131c <pio_handler_process+0x40>
  4012f4:	4c0c      	ldr	r4, [pc, #48]	; (401328 <pio_handler_process+0x4c>)
  4012f6:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4012fa:	e003      	b.n	401304 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012fc:	42b4      	cmp	r4, r6
  4012fe:	d00d      	beq.n	40131c <pio_handler_process+0x40>
  401300:	3410      	adds	r4, #16
		while (status != 0) {
  401302:	b15d      	cbz	r5, 40131c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  401304:	6820      	ldr	r0, [r4, #0]
  401306:	4540      	cmp	r0, r8
  401308:	d1f8      	bne.n	4012fc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  40130a:	6861      	ldr	r1, [r4, #4]
  40130c:	4229      	tst	r1, r5
  40130e:	d0f5      	beq.n	4012fc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401310:	68e3      	ldr	r3, [r4, #12]
  401312:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  401314:	6863      	ldr	r3, [r4, #4]
  401316:	ea25 0503 	bic.w	r5, r5, r3
  40131a:	e7ef      	b.n	4012fc <pio_handler_process+0x20>
  40131c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401320:	0040116d 	.word	0x0040116d
  401324:	00401171 	.word	0x00401171
  401328:	20400d9c 	.word	0x20400d9c

0040132c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  40132c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  40132e:	210a      	movs	r1, #10
  401330:	4801      	ldr	r0, [pc, #4]	; (401338 <PIOA_Handler+0xc>)
  401332:	4b02      	ldr	r3, [pc, #8]	; (40133c <PIOA_Handler+0x10>)
  401334:	4798      	blx	r3
  401336:	bd08      	pop	{r3, pc}
  401338:	400e0e00 	.word	0x400e0e00
  40133c:	004012dd 	.word	0x004012dd

00401340 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401340:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  401342:	210b      	movs	r1, #11
  401344:	4801      	ldr	r0, [pc, #4]	; (40134c <PIOB_Handler+0xc>)
  401346:	4b02      	ldr	r3, [pc, #8]	; (401350 <PIOB_Handler+0x10>)
  401348:	4798      	blx	r3
  40134a:	bd08      	pop	{r3, pc}
  40134c:	400e1000 	.word	0x400e1000
  401350:	004012dd 	.word	0x004012dd

00401354 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  401354:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  401356:	210c      	movs	r1, #12
  401358:	4801      	ldr	r0, [pc, #4]	; (401360 <PIOC_Handler+0xc>)
  40135a:	4b02      	ldr	r3, [pc, #8]	; (401364 <PIOC_Handler+0x10>)
  40135c:	4798      	blx	r3
  40135e:	bd08      	pop	{r3, pc}
  401360:	400e1200 	.word	0x400e1200
  401364:	004012dd 	.word	0x004012dd

00401368 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401368:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  40136a:	2110      	movs	r1, #16
  40136c:	4801      	ldr	r0, [pc, #4]	; (401374 <PIOD_Handler+0xc>)
  40136e:	4b02      	ldr	r3, [pc, #8]	; (401378 <PIOD_Handler+0x10>)
  401370:	4798      	blx	r3
  401372:	bd08      	pop	{r3, pc}
  401374:	400e1400 	.word	0x400e1400
  401378:	004012dd 	.word	0x004012dd

0040137c <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  40137c:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  40137e:	2111      	movs	r1, #17
  401380:	4801      	ldr	r0, [pc, #4]	; (401388 <PIOE_Handler+0xc>)
  401382:	4b02      	ldr	r3, [pc, #8]	; (40138c <PIOE_Handler+0x10>)
  401384:	4798      	blx	r3
  401386:	bd08      	pop	{r3, pc}
  401388:	400e1600 	.word	0x400e1600
  40138c:	004012dd 	.word	0x004012dd

00401390 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401390:	2803      	cmp	r0, #3
  401392:	d011      	beq.n	4013b8 <pmc_mck_set_division+0x28>
  401394:	2804      	cmp	r0, #4
  401396:	d012      	beq.n	4013be <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401398:	2802      	cmp	r0, #2
  40139a:	bf0c      	ite	eq
  40139c:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4013a0:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4013a2:	4a08      	ldr	r2, [pc, #32]	; (4013c4 <pmc_mck_set_division+0x34>)
  4013a4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  4013aa:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  4013ac:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  4013ae:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013b0:	f013 0f08 	tst.w	r3, #8
  4013b4:	d0fb      	beq.n	4013ae <pmc_mck_set_division+0x1e>
}
  4013b6:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013b8:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4013bc:	e7f1      	b.n	4013a2 <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013be:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4013c2:	e7ee      	b.n	4013a2 <pmc_mck_set_division+0x12>
  4013c4:	400e0600 	.word	0x400e0600

004013c8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013c8:	4a17      	ldr	r2, [pc, #92]	; (401428 <pmc_switch_mck_to_pllack+0x60>)
  4013ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4013d0:	4318      	orrs	r0, r3
  4013d2:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013d6:	f013 0f08 	tst.w	r3, #8
  4013da:	d10a      	bne.n	4013f2 <pmc_switch_mck_to_pllack+0x2a>
  4013dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013e0:	4911      	ldr	r1, [pc, #68]	; (401428 <pmc_switch_mck_to_pllack+0x60>)
  4013e2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013e4:	f012 0f08 	tst.w	r2, #8
  4013e8:	d103      	bne.n	4013f2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013ea:	3b01      	subs	r3, #1
  4013ec:	d1f9      	bne.n	4013e2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4013ee:	2001      	movs	r0, #1
  4013f0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013f2:	4a0d      	ldr	r2, [pc, #52]	; (401428 <pmc_switch_mck_to_pllack+0x60>)
  4013f4:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013f6:	f023 0303 	bic.w	r3, r3, #3
  4013fa:	f043 0302 	orr.w	r3, r3, #2
  4013fe:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401400:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401402:	f013 0f08 	tst.w	r3, #8
  401406:	d10a      	bne.n	40141e <pmc_switch_mck_to_pllack+0x56>
  401408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  40140c:	4906      	ldr	r1, [pc, #24]	; (401428 <pmc_switch_mck_to_pllack+0x60>)
  40140e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401410:	f012 0f08 	tst.w	r2, #8
  401414:	d105      	bne.n	401422 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401416:	3b01      	subs	r3, #1
  401418:	d1f9      	bne.n	40140e <pmc_switch_mck_to_pllack+0x46>
			return 1;
  40141a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  40141c:	4770      	bx	lr
	return 0;
  40141e:	2000      	movs	r0, #0
  401420:	4770      	bx	lr
  401422:	2000      	movs	r0, #0
  401424:	4770      	bx	lr
  401426:	bf00      	nop
  401428:	400e0600 	.word	0x400e0600

0040142c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  40142c:	b9a0      	cbnz	r0, 401458 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40142e:	480e      	ldr	r0, [pc, #56]	; (401468 <pmc_switch_mainck_to_xtal+0x3c>)
  401430:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  401432:	0209      	lsls	r1, r1, #8
  401434:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  401436:	4a0d      	ldr	r2, [pc, #52]	; (40146c <pmc_switch_mainck_to_xtal+0x40>)
  401438:	401a      	ands	r2, r3
  40143a:	4b0d      	ldr	r3, [pc, #52]	; (401470 <pmc_switch_mainck_to_xtal+0x44>)
  40143c:	4313      	orrs	r3, r2
  40143e:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401440:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  401442:	4602      	mov	r2, r0
  401444:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401446:	f013 0f01 	tst.w	r3, #1
  40144a:	d0fb      	beq.n	401444 <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40144c:	4a06      	ldr	r2, [pc, #24]	; (401468 <pmc_switch_mainck_to_xtal+0x3c>)
  40144e:	6a11      	ldr	r1, [r2, #32]
  401450:	4b08      	ldr	r3, [pc, #32]	; (401474 <pmc_switch_mainck_to_xtal+0x48>)
  401452:	430b      	orrs	r3, r1
  401454:	6213      	str	r3, [r2, #32]
  401456:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401458:	4903      	ldr	r1, [pc, #12]	; (401468 <pmc_switch_mainck_to_xtal+0x3c>)
  40145a:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  40145c:	4a06      	ldr	r2, [pc, #24]	; (401478 <pmc_switch_mainck_to_xtal+0x4c>)
  40145e:	401a      	ands	r2, r3
  401460:	4b06      	ldr	r3, [pc, #24]	; (40147c <pmc_switch_mainck_to_xtal+0x50>)
  401462:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401464:	620b      	str	r3, [r1, #32]
  401466:	4770      	bx	lr
  401468:	400e0600 	.word	0x400e0600
  40146c:	ffc8fffc 	.word	0xffc8fffc
  401470:	00370001 	.word	0x00370001
  401474:	01370000 	.word	0x01370000
  401478:	fec8fffc 	.word	0xfec8fffc
  40147c:	01370002 	.word	0x01370002

00401480 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401480:	4b02      	ldr	r3, [pc, #8]	; (40148c <pmc_osc_is_ready_mainck+0xc>)
  401482:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  401484:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401488:	4770      	bx	lr
  40148a:	bf00      	nop
  40148c:	400e0600 	.word	0x400e0600

00401490 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401490:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  401494:	4b01      	ldr	r3, [pc, #4]	; (40149c <pmc_disable_pllack+0xc>)
  401496:	629a      	str	r2, [r3, #40]	; 0x28
  401498:	4770      	bx	lr
  40149a:	bf00      	nop
  40149c:	400e0600 	.word	0x400e0600

004014a0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4014a0:	4b02      	ldr	r3, [pc, #8]	; (4014ac <pmc_is_locked_pllack+0xc>)
  4014a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4014a4:	f000 0002 	and.w	r0, r0, #2
  4014a8:	4770      	bx	lr
  4014aa:	bf00      	nop
  4014ac:	400e0600 	.word	0x400e0600

004014b0 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  4014b0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  4014b4:	4b05      	ldr	r3, [pc, #20]	; (4014cc <pmc_enable_periph_clk+0x1c>)
  4014b6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  4014ba:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  4014be:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  4014c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  4014c6:	2000      	movs	r0, #0
  4014c8:	4770      	bx	lr
  4014ca:	bf00      	nop
  4014cc:	400e0600 	.word	0x400e0600

004014d0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4014d0:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4014d2:	4b07      	ldr	r3, [pc, #28]	; (4014f0 <spi_enable_clock+0x20>)
  4014d4:	4298      	cmp	r0, r3
  4014d6:	d003      	beq.n	4014e0 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4014d8:	4b06      	ldr	r3, [pc, #24]	; (4014f4 <spi_enable_clock+0x24>)
  4014da:	4298      	cmp	r0, r3
  4014dc:	d004      	beq.n	4014e8 <spi_enable_clock+0x18>
  4014de:	bd08      	pop	{r3, pc}
  4014e0:	2015      	movs	r0, #21
  4014e2:	4b05      	ldr	r3, [pc, #20]	; (4014f8 <spi_enable_clock+0x28>)
  4014e4:	4798      	blx	r3
  4014e6:	bd08      	pop	{r3, pc}
  4014e8:	202a      	movs	r0, #42	; 0x2a
  4014ea:	4b03      	ldr	r3, [pc, #12]	; (4014f8 <spi_enable_clock+0x28>)
  4014ec:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4014ee:	e7f6      	b.n	4014de <spi_enable_clock+0xe>
  4014f0:	40008000 	.word	0x40008000
  4014f4:	40058000 	.word	0x40058000
  4014f8:	004014b1 	.word	0x004014b1

004014fc <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4014fc:	6843      	ldr	r3, [r0, #4]
  4014fe:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  401502:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  401504:	6843      	ldr	r3, [r0, #4]
  401506:	0409      	lsls	r1, r1, #16
  401508:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  40150c:	4319      	orrs	r1, r3
  40150e:	6041      	str	r1, [r0, #4]
  401510:	4770      	bx	lr

00401512 <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  401512:	6843      	ldr	r3, [r0, #4]
  401514:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401518:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  40151a:	6843      	ldr	r3, [r0, #4]
  40151c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401520:	6041      	str	r1, [r0, #4]
  401522:	4770      	bx	lr

00401524 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  401524:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  401526:	f643 2499 	movw	r4, #15001	; 0x3a99
  40152a:	6905      	ldr	r5, [r0, #16]
  40152c:	f015 0f02 	tst.w	r5, #2
  401530:	d103      	bne.n	40153a <spi_write+0x16>
		if (!timeout--) {
  401532:	3c01      	subs	r4, #1
  401534:	d1f9      	bne.n	40152a <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  401536:	2001      	movs	r0, #1
  401538:	e00c      	b.n	401554 <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  40153a:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40153c:	f014 0f02 	tst.w	r4, #2
  401540:	d006      	beq.n	401550 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  401542:	0412      	lsls	r2, r2, #16
  401544:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  401548:	4311      	orrs	r1, r2
		if (uc_last) {
  40154a:	b10b      	cbz	r3, 401550 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  40154c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  401550:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  401552:	2000      	movs	r0, #0
}
  401554:	bc30      	pop	{r4, r5}
  401556:	4770      	bx	lr

00401558 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  401558:	b932      	cbnz	r2, 401568 <spi_set_clock_polarity+0x10>
  40155a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40155e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401560:	f023 0301 	bic.w	r3, r3, #1
  401564:	6303      	str	r3, [r0, #48]	; 0x30
  401566:	4770      	bx	lr
  401568:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  40156c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40156e:	f043 0301 	orr.w	r3, r3, #1
  401572:	6303      	str	r3, [r0, #48]	; 0x30
  401574:	4770      	bx	lr

00401576 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  401576:	b932      	cbnz	r2, 401586 <spi_set_clock_phase+0x10>
  401578:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40157c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40157e:	f023 0302 	bic.w	r3, r3, #2
  401582:	6303      	str	r3, [r0, #48]	; 0x30
  401584:	4770      	bx	lr
  401586:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  40158a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40158c:	f043 0302 	orr.w	r3, r3, #2
  401590:	6303      	str	r3, [r0, #48]	; 0x30
  401592:	4770      	bx	lr

00401594 <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  401594:	2a04      	cmp	r2, #4
  401596:	d003      	beq.n	4015a0 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  401598:	b16a      	cbz	r2, 4015b6 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  40159a:	2a08      	cmp	r2, #8
  40159c:	d016      	beq.n	4015cc <spi_configure_cs_behavior+0x38>
  40159e:	4770      	bx	lr
  4015a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4015a4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015a6:	f023 0308 	bic.w	r3, r3, #8
  4015aa:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4015ac:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015ae:	f043 0304 	orr.w	r3, r3, #4
  4015b2:	6303      	str	r3, [r0, #48]	; 0x30
  4015b4:	4770      	bx	lr
  4015b6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4015ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015bc:	f023 0308 	bic.w	r3, r3, #8
  4015c0:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4015c2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015c4:	f023 0304 	bic.w	r3, r3, #4
  4015c8:	6303      	str	r3, [r0, #48]	; 0x30
  4015ca:	4770      	bx	lr
  4015cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  4015d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4015d2:	f043 0308 	orr.w	r3, r3, #8
  4015d6:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  4015d8:	e7e1      	b.n	40159e <spi_configure_cs_behavior+0xa>

004015da <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  4015da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  4015de:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4015e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  4015e4:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4015e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4015e8:	431a      	orrs	r2, r3
  4015ea:	630a      	str	r2, [r1, #48]	; 0x30
  4015ec:	4770      	bx	lr

004015ee <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4015ee:	1e43      	subs	r3, r0, #1
  4015f0:	4419      	add	r1, r3
  4015f2:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4015f6:	1e43      	subs	r3, r0, #1
  4015f8:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4015fa:	bf94      	ite	ls
  4015fc:	b200      	sxthls	r0, r0
		return -1;
  4015fe:	f04f 30ff 	movhi.w	r0, #4294967295
}
  401602:	4770      	bx	lr

00401604 <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  401604:	b17a      	cbz	r2, 401626 <spi_set_baudrate_div+0x22>
{
  401606:	b410      	push	{r4}
  401608:	4614      	mov	r4, r2
  40160a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  40160e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401610:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  401614:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  401616:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401618:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  40161c:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  40161e:	2000      	movs	r0, #0
}
  401620:	f85d 4b04 	ldr.w	r4, [sp], #4
  401624:	4770      	bx	lr
        return -1;
  401626:	f04f 30ff 	mov.w	r0, #4294967295
  40162a:	4770      	bx	lr

0040162c <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  40162c:	b410      	push	{r4}
  40162e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  401632:	6b08      	ldr	r0, [r1, #48]	; 0x30
  401634:	b280      	uxth	r0, r0
  401636:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401638:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  40163a:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  40163e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  401642:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  401644:	f85d 4b04 	ldr.w	r4, [sp], #4
  401648:	4770      	bx	lr
	...

0040164c <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  40164c:	4b28      	ldr	r3, [pc, #160]	; (4016f0 <twihs_set_speed+0xa4>)
  40164e:	4299      	cmp	r1, r3
  401650:	d84b      	bhi.n	4016ea <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  401652:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  401656:	4299      	cmp	r1, r3
  401658:	d92d      	bls.n	4016b6 <twihs_set_speed+0x6a>
{
  40165a:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40165c:	4c25      	ldr	r4, [pc, #148]	; (4016f4 <twihs_set_speed+0xa8>)
  40165e:	fba4 3402 	umull	r3, r4, r4, r2
  401662:	0ba4      	lsrs	r4, r4, #14
  401664:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  401666:	4b24      	ldr	r3, [pc, #144]	; (4016f8 <twihs_set_speed+0xac>)
  401668:	440b      	add	r3, r1
  40166a:	009b      	lsls	r3, r3, #2
  40166c:	fbb2 f2f3 	udiv	r2, r2, r3
  401670:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401672:	2cff      	cmp	r4, #255	; 0xff
  401674:	d91d      	bls.n	4016b2 <twihs_set_speed+0x66>
  401676:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  401678:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  40167a:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  40167c:	2cff      	cmp	r4, #255	; 0xff
  40167e:	d901      	bls.n	401684 <twihs_set_speed+0x38>
  401680:	2906      	cmp	r1, #6
  401682:	d9f9      	bls.n	401678 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401684:	2aff      	cmp	r2, #255	; 0xff
  401686:	d907      	bls.n	401698 <twihs_set_speed+0x4c>
  401688:	2906      	cmp	r1, #6
  40168a:	d805      	bhi.n	401698 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  40168c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  40168e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401690:	2aff      	cmp	r2, #255	; 0xff
  401692:	d901      	bls.n	401698 <twihs_set_speed+0x4c>
  401694:	2906      	cmp	r1, #6
  401696:	d9f9      	bls.n	40168c <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  401698:	0213      	lsls	r3, r2, #8
  40169a:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  40169c:	0409      	lsls	r1, r1, #16
  40169e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4016a2:	430b      	orrs	r3, r1
  4016a4:	b2e4      	uxtb	r4, r4
  4016a6:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  4016a8:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  4016aa:	2000      	movs	r0, #0
}
  4016ac:	f85d 4b04 	ldr.w	r4, [sp], #4
  4016b0:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4016b2:	2100      	movs	r1, #0
  4016b4:	e7e6      	b.n	401684 <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4016b6:	0049      	lsls	r1, r1, #1
  4016b8:	fbb2 f2f1 	udiv	r2, r2, r1
  4016bc:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4016be:	2aff      	cmp	r2, #255	; 0xff
  4016c0:	d911      	bls.n	4016e6 <twihs_set_speed+0x9a>
  4016c2:	2300      	movs	r3, #0
			ckdiv++;
  4016c4:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  4016c6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4016c8:	2aff      	cmp	r2, #255	; 0xff
  4016ca:	d901      	bls.n	4016d0 <twihs_set_speed+0x84>
  4016cc:	2b06      	cmp	r3, #6
  4016ce:	d9f9      	bls.n	4016c4 <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4016d0:	0211      	lsls	r1, r2, #8
  4016d2:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  4016d4:	041b      	lsls	r3, r3, #16
  4016d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  4016da:	430b      	orrs	r3, r1
  4016dc:	b2d2      	uxtb	r2, r2
  4016de:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  4016e0:	6102      	str	r2, [r0, #16]
	return PASS;
  4016e2:	2000      	movs	r0, #0
  4016e4:	4770      	bx	lr
	uint32_t ckdiv = 0;
  4016e6:	2300      	movs	r3, #0
  4016e8:	e7f2      	b.n	4016d0 <twihs_set_speed+0x84>
		return FAIL;
  4016ea:	2001      	movs	r0, #1
  4016ec:	4770      	bx	lr
  4016ee:	bf00      	nop
  4016f0:	00061a80 	.word	0x00061a80
  4016f4:	057619f1 	.word	0x057619f1
  4016f8:	3ffd1200 	.word	0x3ffd1200

004016fc <twihs_master_init>:
{
  4016fc:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  4016fe:	f04f 32ff 	mov.w	r2, #4294967295
  401702:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  401704:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  401706:	2280      	movs	r2, #128	; 0x80
  401708:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  40170a:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  40170c:	2208      	movs	r2, #8
  40170e:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401710:	2220      	movs	r2, #32
  401712:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  401714:	2204      	movs	r2, #4
  401716:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401718:	680a      	ldr	r2, [r1, #0]
  40171a:	6849      	ldr	r1, [r1, #4]
  40171c:	4b03      	ldr	r3, [pc, #12]	; (40172c <twihs_master_init+0x30>)
  40171e:	4798      	blx	r3
}
  401720:	2801      	cmp	r0, #1
  401722:	bf14      	ite	ne
  401724:	2000      	movne	r0, #0
  401726:	2001      	moveq	r0, #1
  401728:	bd08      	pop	{r3, pc}
  40172a:	bf00      	nop
  40172c:	0040164d 	.word	0x0040164d

00401730 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401730:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  401732:	2a00      	cmp	r2, #0
  401734:	d04c      	beq.n	4017d0 <twihs_master_read+0xa0>
{
  401736:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401738:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40173a:	2600      	movs	r6, #0
  40173c:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40173e:	684b      	ldr	r3, [r1, #4]
  401740:	021b      	lsls	r3, r3, #8
  401742:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  401746:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  40174a:	7c0d      	ldrb	r5, [r1, #16]
  40174c:	042d      	lsls	r5, r5, #16
  40174e:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  401752:	432b      	orrs	r3, r5
  401754:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401756:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401758:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40175a:	b15d      	cbz	r5, 401774 <twihs_master_read+0x44>
	val = addr[0];
  40175c:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  40175e:	2d01      	cmp	r5, #1
  401760:	dd02      	ble.n	401768 <twihs_master_read+0x38>
		val |= addr[1];
  401762:	784e      	ldrb	r6, [r1, #1]
  401764:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  401768:	2d02      	cmp	r5, #2
  40176a:	dd04      	ble.n	401776 <twihs_master_read+0x46>
		val |= addr[2];
  40176c:	7889      	ldrb	r1, [r1, #2]
  40176e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  401772:	e000      	b.n	401776 <twihs_master_read+0x46>
		return 0;
  401774:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401776:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  401778:	2301      	movs	r3, #1
  40177a:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40177c:	2502      	movs	r5, #2
  40177e:	e012      	b.n	4017a6 <twihs_master_read+0x76>
  401780:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  401782:	f013 0f02 	tst.w	r3, #2
  401786:	d01b      	beq.n	4017c0 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  401788:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40178a:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40178c:	6a03      	ldr	r3, [r0, #32]
  40178e:	f013 0f01 	tst.w	r3, #1
  401792:	d0fb      	beq.n	40178c <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  401794:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  401796:	2000      	movs	r0, #0
}
  401798:	bc70      	pop	{r4, r5, r6}
  40179a:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  40179c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40179e:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4017a2:	3a01      	subs	r2, #1
  4017a4:	d0f2      	beq.n	40178c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4017a6:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4017a8:	f413 7f80 	tst.w	r3, #256	; 0x100
  4017ac:	d114      	bne.n	4017d8 <twihs_master_read+0xa8>
  4017ae:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  4017b2:	2a01      	cmp	r2, #1
  4017b4:	d0e4      	beq.n	401780 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  4017b6:	f013 0f02 	tst.w	r3, #2
  4017ba:	d1ef      	bne.n	40179c <twihs_master_read+0x6c>
	while (cnt > 0) {
  4017bc:	2a00      	cmp	r2, #0
  4017be:	d0e5      	beq.n	40178c <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4017c0:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4017c2:	f413 7f80 	tst.w	r3, #256	; 0x100
  4017c6:	d105      	bne.n	4017d4 <twihs_master_read+0xa4>
		if (!timeout--) {
  4017c8:	3901      	subs	r1, #1
  4017ca:	d1f2      	bne.n	4017b2 <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  4017cc:	2009      	movs	r0, #9
  4017ce:	e7e3      	b.n	401798 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  4017d0:	2001      	movs	r0, #1
  4017d2:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4017d4:	2005      	movs	r0, #5
  4017d6:	e7df      	b.n	401798 <twihs_master_read+0x68>
  4017d8:	2005      	movs	r0, #5
  4017da:	e7dd      	b.n	401798 <twihs_master_read+0x68>

004017dc <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  4017dc:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  4017de:	2b00      	cmp	r3, #0
  4017e0:	d043      	beq.n	40186a <twihs_master_write+0x8e>
{
  4017e2:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  4017e4:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  4017e6:	2600      	movs	r6, #0
  4017e8:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4017ea:	7c0a      	ldrb	r2, [r1, #16]
  4017ec:	0412      	lsls	r2, r2, #16
  4017ee:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  4017f2:	684d      	ldr	r5, [r1, #4]
  4017f4:	022d      	lsls	r5, r5, #8
  4017f6:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  4017fa:	432a      	orrs	r2, r5
  4017fc:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4017fe:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401800:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  401802:	b15d      	cbz	r5, 40181c <twihs_master_write+0x40>
	val = addr[0];
  401804:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  401806:	2d01      	cmp	r5, #1
  401808:	dd02      	ble.n	401810 <twihs_master_write+0x34>
		val |= addr[1];
  40180a:	784e      	ldrb	r6, [r1, #1]
  40180c:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401810:	2d02      	cmp	r5, #2
  401812:	dd04      	ble.n	40181e <twihs_master_write+0x42>
		val |= addr[2];
  401814:	7889      	ldrb	r1, [r1, #2]
  401816:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  40181a:	e000      	b.n	40181e <twihs_master_write+0x42>
		return 0;
  40181c:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  40181e:	60c2      	str	r2, [r0, #12]
  401820:	e004      	b.n	40182c <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  401822:	f814 2b01 	ldrb.w	r2, [r4], #1
  401826:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401828:	3b01      	subs	r3, #1
  40182a:	d00f      	beq.n	40184c <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  40182c:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40182e:	f412 7f80 	tst.w	r2, #256	; 0x100
  401832:	d11e      	bne.n	401872 <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  401834:	f012 0f04 	tst.w	r2, #4
  401838:	d1f3      	bne.n	401822 <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  40183a:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40183c:	f412 7f80 	tst.w	r2, #256	; 0x100
  401840:	d115      	bne.n	40186e <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  401842:	f012 0f04 	tst.w	r2, #4
  401846:	d1ec      	bne.n	401822 <twihs_master_write+0x46>
	while (cnt > 0) {
  401848:	2b00      	cmp	r3, #0
  40184a:	d1f6      	bne.n	40183a <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  40184c:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40184e:	f413 7f80 	tst.w	r3, #256	; 0x100
  401852:	d111      	bne.n	401878 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  401854:	f013 0f04 	tst.w	r3, #4
  401858:	d0f8      	beq.n	40184c <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  40185a:	2302      	movs	r3, #2
  40185c:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  40185e:	6a03      	ldr	r3, [r0, #32]
  401860:	f013 0f01 	tst.w	r3, #1
  401864:	d0fb      	beq.n	40185e <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  401866:	2000      	movs	r0, #0
  401868:	e004      	b.n	401874 <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  40186a:	2001      	movs	r0, #1
  40186c:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40186e:	2005      	movs	r0, #5
  401870:	e000      	b.n	401874 <twihs_master_write+0x98>
  401872:	2005      	movs	r0, #5
}
  401874:	bc70      	pop	{r4, r5, r6}
  401876:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  401878:	2005      	movs	r0, #5
  40187a:	e7fb      	b.n	401874 <twihs_master_write+0x98>

0040187c <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  40187c:	6943      	ldr	r3, [r0, #20]
  40187e:	f013 0f02 	tst.w	r3, #2
  401882:	d002      	beq.n	40188a <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  401884:	61c1      	str	r1, [r0, #28]
	return 0;
  401886:	2000      	movs	r0, #0
  401888:	4770      	bx	lr
		return 1;
  40188a:	2001      	movs	r0, #1
}
  40188c:	4770      	bx	lr

0040188e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  40188e:	6943      	ldr	r3, [r0, #20]
  401890:	f013 0f01 	tst.w	r3, #1
  401894:	d003      	beq.n	40189e <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  401896:	6983      	ldr	r3, [r0, #24]
  401898:	700b      	strb	r3, [r1, #0]
	return 0;
  40189a:	2000      	movs	r0, #0
  40189c:	4770      	bx	lr
		return 1;
  40189e:	2001      	movs	r0, #1
}
  4018a0:	4770      	bx	lr

004018a2 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4018a2:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4018a4:	010b      	lsls	r3, r1, #4
  4018a6:	4293      	cmp	r3, r2
  4018a8:	d914      	bls.n	4018d4 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4018aa:	00c9      	lsls	r1, r1, #3
  4018ac:	084b      	lsrs	r3, r1, #1
  4018ae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  4018b2:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  4018b6:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4018b8:	1e5c      	subs	r4, r3, #1
  4018ba:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4018be:	428c      	cmp	r4, r1
  4018c0:	d901      	bls.n	4018c6 <usart_set_async_baudrate+0x24>
		return 1;
  4018c2:	2001      	movs	r0, #1
  4018c4:	e017      	b.n	4018f6 <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  4018c6:	6841      	ldr	r1, [r0, #4]
  4018c8:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  4018cc:	6041      	str	r1, [r0, #4]
  4018ce:	e00c      	b.n	4018ea <usart_set_async_baudrate+0x48>
		return 1;
  4018d0:	2001      	movs	r0, #1
  4018d2:	e010      	b.n	4018f6 <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  4018d4:	0859      	lsrs	r1, r3, #1
  4018d6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  4018da:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  4018de:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  4018e0:	1e5c      	subs	r4, r3, #1
  4018e2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  4018e6:	428c      	cmp	r4, r1
  4018e8:	d8f2      	bhi.n	4018d0 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  4018ea:	0412      	lsls	r2, r2, #16
  4018ec:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  4018f0:	431a      	orrs	r2, r3
  4018f2:	6202      	str	r2, [r0, #32]

	return 0;
  4018f4:	2000      	movs	r0, #0
}
  4018f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  4018fa:	4770      	bx	lr

004018fc <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  4018fc:	4b08      	ldr	r3, [pc, #32]	; (401920 <usart_reset+0x24>)
  4018fe:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401902:	2300      	movs	r3, #0
  401904:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401906:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401908:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  40190a:	2388      	movs	r3, #136	; 0x88
  40190c:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  40190e:	2324      	movs	r3, #36	; 0x24
  401910:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401912:	f44f 7380 	mov.w	r3, #256	; 0x100
  401916:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401918:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  40191c:	6003      	str	r3, [r0, #0]
  40191e:	4770      	bx	lr
  401920:	55534100 	.word	0x55534100

00401924 <usart_init_rs232>:
{
  401924:	b570      	push	{r4, r5, r6, lr}
  401926:	4605      	mov	r5, r0
  401928:	460c      	mov	r4, r1
  40192a:	4616      	mov	r6, r2
	usart_reset(p_usart);
  40192c:	4b0f      	ldr	r3, [pc, #60]	; (40196c <usart_init_rs232+0x48>)
  40192e:	4798      	blx	r3
	ul_reg_val = 0;
  401930:	2200      	movs	r2, #0
  401932:	4b0f      	ldr	r3, [pc, #60]	; (401970 <usart_init_rs232+0x4c>)
  401934:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401936:	b1a4      	cbz	r4, 401962 <usart_init_rs232+0x3e>
  401938:	4632      	mov	r2, r6
  40193a:	6821      	ldr	r1, [r4, #0]
  40193c:	4628      	mov	r0, r5
  40193e:	4b0d      	ldr	r3, [pc, #52]	; (401974 <usart_init_rs232+0x50>)
  401940:	4798      	blx	r3
  401942:	4602      	mov	r2, r0
  401944:	b978      	cbnz	r0, 401966 <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401946:	6863      	ldr	r3, [r4, #4]
  401948:	68a1      	ldr	r1, [r4, #8]
  40194a:	430b      	orrs	r3, r1
  40194c:	6921      	ldr	r1, [r4, #16]
  40194e:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401950:	68e1      	ldr	r1, [r4, #12]
  401952:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401954:	4906      	ldr	r1, [pc, #24]	; (401970 <usart_init_rs232+0x4c>)
  401956:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401958:	6869      	ldr	r1, [r5, #4]
  40195a:	430b      	orrs	r3, r1
  40195c:	606b      	str	r3, [r5, #4]
}
  40195e:	4610      	mov	r0, r2
  401960:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401962:	2201      	movs	r2, #1
  401964:	e7fb      	b.n	40195e <usart_init_rs232+0x3a>
  401966:	2201      	movs	r2, #1
  401968:	e7f9      	b.n	40195e <usart_init_rs232+0x3a>
  40196a:	bf00      	nop
  40196c:	004018fd 	.word	0x004018fd
  401970:	20400e0c 	.word	0x20400e0c
  401974:	004018a3 	.word	0x004018a3

00401978 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401978:	2340      	movs	r3, #64	; 0x40
  40197a:	6003      	str	r3, [r0, #0]
  40197c:	4770      	bx	lr

0040197e <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  40197e:	2310      	movs	r3, #16
  401980:	6003      	str	r3, [r0, #0]
  401982:	4770      	bx	lr

00401984 <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401984:	6943      	ldr	r3, [r0, #20]
  401986:	f013 0f02 	tst.w	r3, #2
  40198a:	d004      	beq.n	401996 <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  40198c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401990:	61c1      	str	r1, [r0, #28]
	return 0;
  401992:	2000      	movs	r0, #0
  401994:	4770      	bx	lr
		return 1;
  401996:	2001      	movs	r0, #1
}
  401998:	4770      	bx	lr

0040199a <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  40199a:	6943      	ldr	r3, [r0, #20]
  40199c:	f013 0f01 	tst.w	r3, #1
  4019a0:	d005      	beq.n	4019ae <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  4019a2:	6983      	ldr	r3, [r0, #24]
  4019a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
  4019a8:	600b      	str	r3, [r1, #0]
	return 0;
  4019aa:	2000      	movs	r0, #0
  4019ac:	4770      	bx	lr
		return 1;
  4019ae:	2001      	movs	r0, #1
}
  4019b0:	4770      	bx	lr

004019b2 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4019b2:	e7fe      	b.n	4019b2 <Dummy_Handler>

004019b4 <Reset_Handler>:
{
  4019b4:	b500      	push	{lr}
  4019b6:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4019b8:	4b25      	ldr	r3, [pc, #148]	; (401a50 <Reset_Handler+0x9c>)
  4019ba:	4a26      	ldr	r2, [pc, #152]	; (401a54 <Reset_Handler+0xa0>)
  4019bc:	429a      	cmp	r2, r3
  4019be:	d010      	beq.n	4019e2 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4019c0:	4b25      	ldr	r3, [pc, #148]	; (401a58 <Reset_Handler+0xa4>)
  4019c2:	4a23      	ldr	r2, [pc, #140]	; (401a50 <Reset_Handler+0x9c>)
  4019c4:	429a      	cmp	r2, r3
  4019c6:	d20c      	bcs.n	4019e2 <Reset_Handler+0x2e>
  4019c8:	3b01      	subs	r3, #1
  4019ca:	1a9b      	subs	r3, r3, r2
  4019cc:	f023 0303 	bic.w	r3, r3, #3
  4019d0:	3304      	adds	r3, #4
  4019d2:	4413      	add	r3, r2
  4019d4:	491f      	ldr	r1, [pc, #124]	; (401a54 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  4019d6:	f851 0b04 	ldr.w	r0, [r1], #4
  4019da:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  4019de:	429a      	cmp	r2, r3
  4019e0:	d1f9      	bne.n	4019d6 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  4019e2:	4b1e      	ldr	r3, [pc, #120]	; (401a5c <Reset_Handler+0xa8>)
  4019e4:	4a1e      	ldr	r2, [pc, #120]	; (401a60 <Reset_Handler+0xac>)
  4019e6:	429a      	cmp	r2, r3
  4019e8:	d20a      	bcs.n	401a00 <Reset_Handler+0x4c>
  4019ea:	3b01      	subs	r3, #1
  4019ec:	1a9b      	subs	r3, r3, r2
  4019ee:	f023 0303 	bic.w	r3, r3, #3
  4019f2:	3304      	adds	r3, #4
  4019f4:	4413      	add	r3, r2
                *pDest++ = 0;
  4019f6:	2100      	movs	r1, #0
  4019f8:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  4019fc:	4293      	cmp	r3, r2
  4019fe:	d1fb      	bne.n	4019f8 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401a00:	4a18      	ldr	r2, [pc, #96]	; (401a64 <Reset_Handler+0xb0>)
  401a02:	4b19      	ldr	r3, [pc, #100]	; (401a68 <Reset_Handler+0xb4>)
  401a04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401a08:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401a0a:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401a0e:	fab3 f383 	clz	r3, r3
  401a12:	095b      	lsrs	r3, r3, #5
  401a14:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401a16:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401a18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401a1c:	2200      	movs	r2, #0
  401a1e:	4b13      	ldr	r3, [pc, #76]	; (401a6c <Reset_Handler+0xb8>)
  401a20:	701a      	strb	r2, [r3, #0]
	return flags;
  401a22:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401a24:	4a12      	ldr	r2, [pc, #72]	; (401a70 <Reset_Handler+0xbc>)
  401a26:	6813      	ldr	r3, [r2, #0]
  401a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401a2c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401a2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a32:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401a36:	b129      	cbz	r1, 401a44 <Reset_Handler+0x90>
		cpu_irq_enable();
  401a38:	2201      	movs	r2, #1
  401a3a:	4b0c      	ldr	r3, [pc, #48]	; (401a6c <Reset_Handler+0xb8>)
  401a3c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401a3e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401a42:	b662      	cpsie	i
        __libc_init_array();
  401a44:	4b0b      	ldr	r3, [pc, #44]	; (401a74 <Reset_Handler+0xc0>)
  401a46:	4798      	blx	r3
        main();
  401a48:	4b0b      	ldr	r3, [pc, #44]	; (401a78 <Reset_Handler+0xc4>)
  401a4a:	4798      	blx	r3
  401a4c:	e7fe      	b.n	401a4c <Reset_Handler+0x98>
  401a4e:	bf00      	nop
  401a50:	20400000 	.word	0x20400000
  401a54:	00405264 	.word	0x00405264
  401a58:	204009c0 	.word	0x204009c0
  401a5c:	20400e8c 	.word	0x20400e8c
  401a60:	204009c0 	.word	0x204009c0
  401a64:	e000ed00 	.word	0xe000ed00
  401a68:	00400000 	.word	0x00400000
  401a6c:	2040000a 	.word	0x2040000a
  401a70:	e000ed88 	.word	0xe000ed88
  401a74:	004020c9 	.word	0x004020c9
  401a78:	00401e9d 	.word	0x00401e9d

00401a7c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401a7c:	4b3b      	ldr	r3, [pc, #236]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a80:	f003 0303 	and.w	r3, r3, #3
  401a84:	2b01      	cmp	r3, #1
  401a86:	d01d      	beq.n	401ac4 <SystemCoreClockUpdate+0x48>
  401a88:	b183      	cbz	r3, 401aac <SystemCoreClockUpdate+0x30>
  401a8a:	2b02      	cmp	r3, #2
  401a8c:	d036      	beq.n	401afc <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401a8e:	4b37      	ldr	r3, [pc, #220]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401a92:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401a96:	2b70      	cmp	r3, #112	; 0x70
  401a98:	d05f      	beq.n	401b5a <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401a9a:	4b34      	ldr	r3, [pc, #208]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401a9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401a9e:	4934      	ldr	r1, [pc, #208]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401aa0:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401aa4:	680b      	ldr	r3, [r1, #0]
  401aa6:	40d3      	lsrs	r3, r2
  401aa8:	600b      	str	r3, [r1, #0]
  401aaa:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401aac:	4b31      	ldr	r3, [pc, #196]	; (401b74 <SystemCoreClockUpdate+0xf8>)
  401aae:	695b      	ldr	r3, [r3, #20]
  401ab0:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401ab4:	bf14      	ite	ne
  401ab6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401aba:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401abe:	4b2c      	ldr	r3, [pc, #176]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401ac0:	601a      	str	r2, [r3, #0]
  401ac2:	e7e4      	b.n	401a8e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401ac4:	4b29      	ldr	r3, [pc, #164]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401ac6:	6a1b      	ldr	r3, [r3, #32]
  401ac8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401acc:	d003      	beq.n	401ad6 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401ace:	4a2a      	ldr	r2, [pc, #168]	; (401b78 <SystemCoreClockUpdate+0xfc>)
  401ad0:	4b27      	ldr	r3, [pc, #156]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401ad2:	601a      	str	r2, [r3, #0]
  401ad4:	e7db      	b.n	401a8e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401ad6:	4a29      	ldr	r2, [pc, #164]	; (401b7c <SystemCoreClockUpdate+0x100>)
  401ad8:	4b25      	ldr	r3, [pc, #148]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401ada:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401adc:	4b23      	ldr	r3, [pc, #140]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401ade:	6a1b      	ldr	r3, [r3, #32]
  401ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401ae4:	2b10      	cmp	r3, #16
  401ae6:	d005      	beq.n	401af4 <SystemCoreClockUpdate+0x78>
  401ae8:	2b20      	cmp	r3, #32
  401aea:	d1d0      	bne.n	401a8e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401aec:	4a22      	ldr	r2, [pc, #136]	; (401b78 <SystemCoreClockUpdate+0xfc>)
  401aee:	4b20      	ldr	r3, [pc, #128]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401af0:	601a      	str	r2, [r3, #0]
          break;
  401af2:	e7cc      	b.n	401a8e <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401af4:	4a22      	ldr	r2, [pc, #136]	; (401b80 <SystemCoreClockUpdate+0x104>)
  401af6:	4b1e      	ldr	r3, [pc, #120]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401af8:	601a      	str	r2, [r3, #0]
          break;
  401afa:	e7c8      	b.n	401a8e <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401afc:	4b1b      	ldr	r3, [pc, #108]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401afe:	6a1b      	ldr	r3, [r3, #32]
  401b00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401b04:	d016      	beq.n	401b34 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401b06:	4a1c      	ldr	r2, [pc, #112]	; (401b78 <SystemCoreClockUpdate+0xfc>)
  401b08:	4b19      	ldr	r3, [pc, #100]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401b0a:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401b0c:	4b17      	ldr	r3, [pc, #92]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401b10:	f003 0303 	and.w	r3, r3, #3
  401b14:	2b02      	cmp	r3, #2
  401b16:	d1ba      	bne.n	401a8e <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b18:	4a14      	ldr	r2, [pc, #80]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401b1a:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401b1e:	4814      	ldr	r0, [pc, #80]	; (401b70 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401b20:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401b24:	6803      	ldr	r3, [r0, #0]
  401b26:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401b2a:	b2d2      	uxtb	r2, r2
  401b2c:	fbb3 f3f2 	udiv	r3, r3, r2
  401b30:	6003      	str	r3, [r0, #0]
  401b32:	e7ac      	b.n	401a8e <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401b34:	4a11      	ldr	r2, [pc, #68]	; (401b7c <SystemCoreClockUpdate+0x100>)
  401b36:	4b0e      	ldr	r3, [pc, #56]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401b38:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401b3a:	4b0c      	ldr	r3, [pc, #48]	; (401b6c <SystemCoreClockUpdate+0xf0>)
  401b3c:	6a1b      	ldr	r3, [r3, #32]
  401b3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401b42:	2b10      	cmp	r3, #16
  401b44:	d005      	beq.n	401b52 <SystemCoreClockUpdate+0xd6>
  401b46:	2b20      	cmp	r3, #32
  401b48:	d1e0      	bne.n	401b0c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401b4a:	4a0b      	ldr	r2, [pc, #44]	; (401b78 <SystemCoreClockUpdate+0xfc>)
  401b4c:	4b08      	ldr	r3, [pc, #32]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401b4e:	601a      	str	r2, [r3, #0]
          break;
  401b50:	e7dc      	b.n	401b0c <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401b52:	4a0b      	ldr	r2, [pc, #44]	; (401b80 <SystemCoreClockUpdate+0x104>)
  401b54:	4b06      	ldr	r3, [pc, #24]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401b56:	601a      	str	r2, [r3, #0]
          break;
  401b58:	e7d8      	b.n	401b0c <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401b5a:	4a05      	ldr	r2, [pc, #20]	; (401b70 <SystemCoreClockUpdate+0xf4>)
  401b5c:	6813      	ldr	r3, [r2, #0]
  401b5e:	4909      	ldr	r1, [pc, #36]	; (401b84 <SystemCoreClockUpdate+0x108>)
  401b60:	fba1 1303 	umull	r1, r3, r1, r3
  401b64:	085b      	lsrs	r3, r3, #1
  401b66:	6013      	str	r3, [r2, #0]
  401b68:	4770      	bx	lr
  401b6a:	bf00      	nop
  401b6c:	400e0600 	.word	0x400e0600
  401b70:	2040000c 	.word	0x2040000c
  401b74:	400e1810 	.word	0x400e1810
  401b78:	00b71b00 	.word	0x00b71b00
  401b7c:	003d0900 	.word	0x003d0900
  401b80:	007a1200 	.word	0x007a1200
  401b84:	aaaaaaab 	.word	0xaaaaaaab

00401b88 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401b88:	4b16      	ldr	r3, [pc, #88]	; (401be4 <system_init_flash+0x5c>)
  401b8a:	4298      	cmp	r0, r3
  401b8c:	d913      	bls.n	401bb6 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401b8e:	4b16      	ldr	r3, [pc, #88]	; (401be8 <system_init_flash+0x60>)
  401b90:	4298      	cmp	r0, r3
  401b92:	d915      	bls.n	401bc0 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401b94:	4b15      	ldr	r3, [pc, #84]	; (401bec <system_init_flash+0x64>)
  401b96:	4298      	cmp	r0, r3
  401b98:	d916      	bls.n	401bc8 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401b9a:	4b15      	ldr	r3, [pc, #84]	; (401bf0 <system_init_flash+0x68>)
  401b9c:	4298      	cmp	r0, r3
  401b9e:	d917      	bls.n	401bd0 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401ba0:	4b14      	ldr	r3, [pc, #80]	; (401bf4 <system_init_flash+0x6c>)
  401ba2:	4298      	cmp	r0, r3
  401ba4:	d918      	bls.n	401bd8 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401ba6:	4b14      	ldr	r3, [pc, #80]	; (401bf8 <system_init_flash+0x70>)
  401ba8:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401baa:	bf94      	ite	ls
  401bac:	4a13      	ldrls	r2, [pc, #76]	; (401bfc <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401bae:	4a14      	ldrhi	r2, [pc, #80]	; (401c00 <system_init_flash+0x78>)
  401bb0:	4b14      	ldr	r3, [pc, #80]	; (401c04 <system_init_flash+0x7c>)
  401bb2:	601a      	str	r2, [r3, #0]
  401bb4:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401bb6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401bba:	4b12      	ldr	r3, [pc, #72]	; (401c04 <system_init_flash+0x7c>)
  401bbc:	601a      	str	r2, [r3, #0]
  401bbe:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401bc0:	4a11      	ldr	r2, [pc, #68]	; (401c08 <system_init_flash+0x80>)
  401bc2:	4b10      	ldr	r3, [pc, #64]	; (401c04 <system_init_flash+0x7c>)
  401bc4:	601a      	str	r2, [r3, #0]
  401bc6:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401bc8:	4a10      	ldr	r2, [pc, #64]	; (401c0c <system_init_flash+0x84>)
  401bca:	4b0e      	ldr	r3, [pc, #56]	; (401c04 <system_init_flash+0x7c>)
  401bcc:	601a      	str	r2, [r3, #0]
  401bce:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401bd0:	4a0f      	ldr	r2, [pc, #60]	; (401c10 <system_init_flash+0x88>)
  401bd2:	4b0c      	ldr	r3, [pc, #48]	; (401c04 <system_init_flash+0x7c>)
  401bd4:	601a      	str	r2, [r3, #0]
  401bd6:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401bd8:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401bdc:	4b09      	ldr	r3, [pc, #36]	; (401c04 <system_init_flash+0x7c>)
  401bde:	601a      	str	r2, [r3, #0]
  401be0:	4770      	bx	lr
  401be2:	bf00      	nop
  401be4:	015ef3bf 	.word	0x015ef3bf
  401be8:	02bde77f 	.word	0x02bde77f
  401bec:	041cdb3f 	.word	0x041cdb3f
  401bf0:	057bceff 	.word	0x057bceff
  401bf4:	06dac2bf 	.word	0x06dac2bf
  401bf8:	0839b67f 	.word	0x0839b67f
  401bfc:	04000500 	.word	0x04000500
  401c00:	04000600 	.word	0x04000600
  401c04:	400e0c00 	.word	0x400e0c00
  401c08:	04000100 	.word	0x04000100
  401c0c:	04000200 	.word	0x04000200
  401c10:	04000300 	.word	0x04000300

00401c14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401c14:	4b0a      	ldr	r3, [pc, #40]	; (401c40 <_sbrk+0x2c>)
  401c16:	681b      	ldr	r3, [r3, #0]
  401c18:	b153      	cbz	r3, 401c30 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401c1a:	4b09      	ldr	r3, [pc, #36]	; (401c40 <_sbrk+0x2c>)
  401c1c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401c1e:	181a      	adds	r2, r3, r0
  401c20:	4908      	ldr	r1, [pc, #32]	; (401c44 <_sbrk+0x30>)
  401c22:	4291      	cmp	r1, r2
  401c24:	db08      	blt.n	401c38 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401c26:	4610      	mov	r0, r2
  401c28:	4a05      	ldr	r2, [pc, #20]	; (401c40 <_sbrk+0x2c>)
  401c2a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401c2c:	4618      	mov	r0, r3
  401c2e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401c30:	4a05      	ldr	r2, [pc, #20]	; (401c48 <_sbrk+0x34>)
  401c32:	4b03      	ldr	r3, [pc, #12]	; (401c40 <_sbrk+0x2c>)
  401c34:	601a      	str	r2, [r3, #0]
  401c36:	e7f0      	b.n	401c1a <_sbrk+0x6>
		return (caddr_t) -1;	
  401c38:	f04f 30ff 	mov.w	r0, #4294967295
}
  401c3c:	4770      	bx	lr
  401c3e:	bf00      	nop
  401c40:	20400e10 	.word	0x20400e10
  401c44:	2045fffc 	.word	0x2045fffc
  401c48:	20403090 	.word	0x20403090

00401c4c <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401c4c:	f04f 30ff 	mov.w	r0, #4294967295
  401c50:	4770      	bx	lr

00401c52 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401c52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401c56:	604b      	str	r3, [r1, #4]

	return 0;
}
  401c58:	2000      	movs	r0, #0
  401c5a:	4770      	bx	lr

00401c5c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401c5c:	2001      	movs	r0, #1
  401c5e:	4770      	bx	lr

00401c60 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401c60:	2000      	movs	r0, #0
  401c62:	4770      	bx	lr

00401c64 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  401c64:	b5f0      	push	{r4, r5, r6, r7, lr}
  401c66:	b083      	sub	sp, #12
  401c68:	4605      	mov	r5, r0
  401c6a:	460c      	mov	r4, r1
	uint32_t val = 0;
  401c6c:	2300      	movs	r3, #0
  401c6e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  401c70:	4b2a      	ldr	r3, [pc, #168]	; (401d1c <usart_serial_getchar+0xb8>)
  401c72:	4298      	cmp	r0, r3
  401c74:	d013      	beq.n	401c9e <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  401c76:	4b2a      	ldr	r3, [pc, #168]	; (401d20 <usart_serial_getchar+0xbc>)
  401c78:	4298      	cmp	r0, r3
  401c7a:	d018      	beq.n	401cae <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  401c7c:	4b29      	ldr	r3, [pc, #164]	; (401d24 <usart_serial_getchar+0xc0>)
  401c7e:	4298      	cmp	r0, r3
  401c80:	d01d      	beq.n	401cbe <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  401c82:	4b29      	ldr	r3, [pc, #164]	; (401d28 <usart_serial_getchar+0xc4>)
  401c84:	429d      	cmp	r5, r3
  401c86:	d022      	beq.n	401cce <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  401c88:	4b28      	ldr	r3, [pc, #160]	; (401d2c <usart_serial_getchar+0xc8>)
  401c8a:	429d      	cmp	r5, r3
  401c8c:	d027      	beq.n	401cde <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  401c8e:	4b28      	ldr	r3, [pc, #160]	; (401d30 <usart_serial_getchar+0xcc>)
  401c90:	429d      	cmp	r5, r3
  401c92:	d02e      	beq.n	401cf2 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  401c94:	4b27      	ldr	r3, [pc, #156]	; (401d34 <usart_serial_getchar+0xd0>)
  401c96:	429d      	cmp	r5, r3
  401c98:	d035      	beq.n	401d06 <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  401c9a:	b003      	add	sp, #12
  401c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  401c9e:	461f      	mov	r7, r3
  401ca0:	4e25      	ldr	r6, [pc, #148]	; (401d38 <usart_serial_getchar+0xd4>)
  401ca2:	4621      	mov	r1, r4
  401ca4:	4638      	mov	r0, r7
  401ca6:	47b0      	blx	r6
  401ca8:	2800      	cmp	r0, #0
  401caa:	d1fa      	bne.n	401ca2 <usart_serial_getchar+0x3e>
  401cac:	e7e9      	b.n	401c82 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  401cae:	461f      	mov	r7, r3
  401cb0:	4e21      	ldr	r6, [pc, #132]	; (401d38 <usart_serial_getchar+0xd4>)
  401cb2:	4621      	mov	r1, r4
  401cb4:	4638      	mov	r0, r7
  401cb6:	47b0      	blx	r6
  401cb8:	2800      	cmp	r0, #0
  401cba:	d1fa      	bne.n	401cb2 <usart_serial_getchar+0x4e>
  401cbc:	e7e4      	b.n	401c88 <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  401cbe:	461f      	mov	r7, r3
  401cc0:	4e1d      	ldr	r6, [pc, #116]	; (401d38 <usart_serial_getchar+0xd4>)
  401cc2:	4621      	mov	r1, r4
  401cc4:	4638      	mov	r0, r7
  401cc6:	47b0      	blx	r6
  401cc8:	2800      	cmp	r0, #0
  401cca:	d1fa      	bne.n	401cc2 <usart_serial_getchar+0x5e>
  401ccc:	e7df      	b.n	401c8e <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  401cce:	461f      	mov	r7, r3
  401cd0:	4e19      	ldr	r6, [pc, #100]	; (401d38 <usart_serial_getchar+0xd4>)
  401cd2:	4621      	mov	r1, r4
  401cd4:	4638      	mov	r0, r7
  401cd6:	47b0      	blx	r6
  401cd8:	2800      	cmp	r0, #0
  401cda:	d1fa      	bne.n	401cd2 <usart_serial_getchar+0x6e>
  401cdc:	e7da      	b.n	401c94 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  401cde:	461e      	mov	r6, r3
  401ce0:	4d16      	ldr	r5, [pc, #88]	; (401d3c <usart_serial_getchar+0xd8>)
  401ce2:	a901      	add	r1, sp, #4
  401ce4:	4630      	mov	r0, r6
  401ce6:	47a8      	blx	r5
  401ce8:	2800      	cmp	r0, #0
  401cea:	d1fa      	bne.n	401ce2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  401cec:	9b01      	ldr	r3, [sp, #4]
  401cee:	7023      	strb	r3, [r4, #0]
  401cf0:	e7d3      	b.n	401c9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401cf2:	461e      	mov	r6, r3
  401cf4:	4d11      	ldr	r5, [pc, #68]	; (401d3c <usart_serial_getchar+0xd8>)
  401cf6:	a901      	add	r1, sp, #4
  401cf8:	4630      	mov	r0, r6
  401cfa:	47a8      	blx	r5
  401cfc:	2800      	cmp	r0, #0
  401cfe:	d1fa      	bne.n	401cf6 <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  401d00:	9b01      	ldr	r3, [sp, #4]
  401d02:	7023      	strb	r3, [r4, #0]
  401d04:	e7c9      	b.n	401c9a <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  401d06:	461e      	mov	r6, r3
  401d08:	4d0c      	ldr	r5, [pc, #48]	; (401d3c <usart_serial_getchar+0xd8>)
  401d0a:	a901      	add	r1, sp, #4
  401d0c:	4630      	mov	r0, r6
  401d0e:	47a8      	blx	r5
  401d10:	2800      	cmp	r0, #0
  401d12:	d1fa      	bne.n	401d0a <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  401d14:	9b01      	ldr	r3, [sp, #4]
  401d16:	7023      	strb	r3, [r4, #0]
}
  401d18:	e7bf      	b.n	401c9a <usart_serial_getchar+0x36>
  401d1a:	bf00      	nop
  401d1c:	400e0800 	.word	0x400e0800
  401d20:	400e0a00 	.word	0x400e0a00
  401d24:	400e1a00 	.word	0x400e1a00
  401d28:	400e1c00 	.word	0x400e1c00
  401d2c:	40024000 	.word	0x40024000
  401d30:	40028000 	.word	0x40028000
  401d34:	4002c000 	.word	0x4002c000
  401d38:	0040188f 	.word	0x0040188f
  401d3c:	0040199b 	.word	0x0040199b

00401d40 <usart_serial_putchar>:
{
  401d40:	b570      	push	{r4, r5, r6, lr}
  401d42:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  401d44:	4b2a      	ldr	r3, [pc, #168]	; (401df0 <usart_serial_putchar+0xb0>)
  401d46:	4298      	cmp	r0, r3
  401d48:	d013      	beq.n	401d72 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  401d4a:	4b2a      	ldr	r3, [pc, #168]	; (401df4 <usart_serial_putchar+0xb4>)
  401d4c:	4298      	cmp	r0, r3
  401d4e:	d019      	beq.n	401d84 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  401d50:	4b29      	ldr	r3, [pc, #164]	; (401df8 <usart_serial_putchar+0xb8>)
  401d52:	4298      	cmp	r0, r3
  401d54:	d01f      	beq.n	401d96 <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  401d56:	4b29      	ldr	r3, [pc, #164]	; (401dfc <usart_serial_putchar+0xbc>)
  401d58:	4298      	cmp	r0, r3
  401d5a:	d025      	beq.n	401da8 <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  401d5c:	4b28      	ldr	r3, [pc, #160]	; (401e00 <usart_serial_putchar+0xc0>)
  401d5e:	4298      	cmp	r0, r3
  401d60:	d02b      	beq.n	401dba <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  401d62:	4b28      	ldr	r3, [pc, #160]	; (401e04 <usart_serial_putchar+0xc4>)
  401d64:	4298      	cmp	r0, r3
  401d66:	d031      	beq.n	401dcc <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  401d68:	4b27      	ldr	r3, [pc, #156]	; (401e08 <usart_serial_putchar+0xc8>)
  401d6a:	4298      	cmp	r0, r3
  401d6c:	d037      	beq.n	401dde <usart_serial_putchar+0x9e>
	return 0;
  401d6e:	2000      	movs	r0, #0
}
  401d70:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401d72:	461e      	mov	r6, r3
  401d74:	4d25      	ldr	r5, [pc, #148]	; (401e0c <usart_serial_putchar+0xcc>)
  401d76:	4621      	mov	r1, r4
  401d78:	4630      	mov	r0, r6
  401d7a:	47a8      	blx	r5
  401d7c:	2800      	cmp	r0, #0
  401d7e:	d1fa      	bne.n	401d76 <usart_serial_putchar+0x36>
		return 1;
  401d80:	2001      	movs	r0, #1
  401d82:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401d84:	461e      	mov	r6, r3
  401d86:	4d21      	ldr	r5, [pc, #132]	; (401e0c <usart_serial_putchar+0xcc>)
  401d88:	4621      	mov	r1, r4
  401d8a:	4630      	mov	r0, r6
  401d8c:	47a8      	blx	r5
  401d8e:	2800      	cmp	r0, #0
  401d90:	d1fa      	bne.n	401d88 <usart_serial_putchar+0x48>
		return 1;
  401d92:	2001      	movs	r0, #1
  401d94:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401d96:	461e      	mov	r6, r3
  401d98:	4d1c      	ldr	r5, [pc, #112]	; (401e0c <usart_serial_putchar+0xcc>)
  401d9a:	4621      	mov	r1, r4
  401d9c:	4630      	mov	r0, r6
  401d9e:	47a8      	blx	r5
  401da0:	2800      	cmp	r0, #0
  401da2:	d1fa      	bne.n	401d9a <usart_serial_putchar+0x5a>
		return 1;
  401da4:	2001      	movs	r0, #1
  401da6:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  401da8:	461e      	mov	r6, r3
  401daa:	4d18      	ldr	r5, [pc, #96]	; (401e0c <usart_serial_putchar+0xcc>)
  401dac:	4621      	mov	r1, r4
  401dae:	4630      	mov	r0, r6
  401db0:	47a8      	blx	r5
  401db2:	2800      	cmp	r0, #0
  401db4:	d1fa      	bne.n	401dac <usart_serial_putchar+0x6c>
		return 1;
  401db6:	2001      	movs	r0, #1
  401db8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401dba:	461e      	mov	r6, r3
  401dbc:	4d14      	ldr	r5, [pc, #80]	; (401e10 <usart_serial_putchar+0xd0>)
  401dbe:	4621      	mov	r1, r4
  401dc0:	4630      	mov	r0, r6
  401dc2:	47a8      	blx	r5
  401dc4:	2800      	cmp	r0, #0
  401dc6:	d1fa      	bne.n	401dbe <usart_serial_putchar+0x7e>
		return 1;
  401dc8:	2001      	movs	r0, #1
  401dca:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401dcc:	461e      	mov	r6, r3
  401dce:	4d10      	ldr	r5, [pc, #64]	; (401e10 <usart_serial_putchar+0xd0>)
  401dd0:	4621      	mov	r1, r4
  401dd2:	4630      	mov	r0, r6
  401dd4:	47a8      	blx	r5
  401dd6:	2800      	cmp	r0, #0
  401dd8:	d1fa      	bne.n	401dd0 <usart_serial_putchar+0x90>
		return 1;
  401dda:	2001      	movs	r0, #1
  401ddc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  401dde:	461e      	mov	r6, r3
  401de0:	4d0b      	ldr	r5, [pc, #44]	; (401e10 <usart_serial_putchar+0xd0>)
  401de2:	4621      	mov	r1, r4
  401de4:	4630      	mov	r0, r6
  401de6:	47a8      	blx	r5
  401de8:	2800      	cmp	r0, #0
  401dea:	d1fa      	bne.n	401de2 <usart_serial_putchar+0xa2>
		return 1;
  401dec:	2001      	movs	r0, #1
  401dee:	bd70      	pop	{r4, r5, r6, pc}
  401df0:	400e0800 	.word	0x400e0800
  401df4:	400e0a00 	.word	0x400e0a00
  401df8:	400e1a00 	.word	0x400e1a00
  401dfc:	400e1c00 	.word	0x400e1c00
  401e00:	40024000 	.word	0x40024000
  401e04:	40028000 	.word	0x40028000
  401e08:	4002c000 	.word	0x4002c000
  401e0c:	0040187d 	.word	0x0040187d
  401e10:	00401985 	.word	0x00401985

00401e14 <draw_screen>:
	mxt_write_config_reg(device, mxt_get_object_address(device,
			MXT_GEN_COMMANDPROCESSOR_T6, 0)
			+ MXT_GEN_COMMANDPROCESSOR_CALIBRATE, 0x01);
}

void draw_screen(void) {
  401e14:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  401e16:	4806      	ldr	r0, [pc, #24]	; (401e30 <draw_screen+0x1c>)
  401e18:	4b06      	ldr	r3, [pc, #24]	; (401e34 <draw_screen+0x20>)
  401e1a:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  401e1c:	f240 13df 	movw	r3, #479	; 0x1df
  401e20:	f240 123f 	movw	r2, #319	; 0x13f
  401e24:	2100      	movs	r1, #0
  401e26:	4608      	mov	r0, r1
  401e28:	4c03      	ldr	r4, [pc, #12]	; (401e38 <draw_screen+0x24>)
  401e2a:	47a0      	blx	r4
  401e2c:	bd10      	pop	{r4, pc}
  401e2e:	bf00      	nop
  401e30:	00fcfcfc 	.word	0x00fcfcfc
  401e34:	00400cdd 	.word	0x00400cdd
  401e38:	00400f2d 	.word	0x00400f2d

00401e3c <draw_button>:
}

void draw_button(uint32_t clicked) {
  401e3c:	b538      	push	{r3, r4, r5, lr}
	static uint32_t last_state = 255; // undefined
	if(clicked == last_state) return;
  401e3e:	4b13      	ldr	r3, [pc, #76]	; (401e8c <draw_button+0x50>)
  401e40:	681b      	ldr	r3, [r3, #0]
  401e42:	4283      	cmp	r3, r0
  401e44:	d016      	beq.n	401e74 <draw_button+0x38>
  401e46:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  401e48:	2000      	movs	r0, #0
  401e4a:	4b11      	ldr	r3, [pc, #68]	; (401e90 <draw_button+0x54>)
  401e4c:	4798      	blx	r3
	ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  401e4e:	f240 133b 	movw	r3, #315	; 0x13b
  401e52:	22dc      	movs	r2, #220	; 0xdc
  401e54:	21a5      	movs	r1, #165	; 0xa5
  401e56:	2064      	movs	r0, #100	; 0x64
  401e58:	4d0e      	ldr	r5, [pc, #56]	; (401e94 <draw_button+0x58>)
  401e5a:	47a8      	blx	r5
	if(clicked) {
  401e5c:	b15c      	cbz	r4, 401e76 <draw_button+0x3a>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  401e5e:	480e      	ldr	r0, [pc, #56]	; (401e98 <draw_button+0x5c>)
  401e60:	4b0b      	ldr	r3, [pc, #44]	; (401e90 <draw_button+0x54>)
  401e62:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  401e64:	f240 1339 	movw	r3, #313	; 0x139
  401e68:	22da      	movs	r2, #218	; 0xda
  401e6a:	21f2      	movs	r1, #242	; 0xf2
  401e6c:	2066      	movs	r0, #102	; 0x66
  401e6e:	47a8      	blx	r5
	} else {
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
	}
	last_state = clicked;
  401e70:	4b06      	ldr	r3, [pc, #24]	; (401e8c <draw_button+0x50>)
  401e72:	601c      	str	r4, [r3, #0]
  401e74:	bd38      	pop	{r3, r4, r5, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  401e76:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  401e7a:	4b05      	ldr	r3, [pc, #20]	; (401e90 <draw_button+0x54>)
  401e7c:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  401e7e:	23ee      	movs	r3, #238	; 0xee
  401e80:	22da      	movs	r2, #218	; 0xda
  401e82:	21a7      	movs	r1, #167	; 0xa7
  401e84:	2066      	movs	r0, #102	; 0x66
  401e86:	4d03      	ldr	r5, [pc, #12]	; (401e94 <draw_button+0x58>)
  401e88:	47a8      	blx	r5
  401e8a:	e7f1      	b.n	401e70 <draw_button+0x34>
  401e8c:	20400010 	.word	0x20400010
  401e90:	00400cdd 	.word	0x00400cdd
  401e94:	00400f2d 	.word	0x00400f2d
  401e98:	00fc6044 	.word	0x00fc6044

00401e9c <main>:
		usart_serial_write_packet(USART_SERIAL_EXAMPLE, (uint8_t *)tx_buf, strlen(tx_buf));
	}
}

int main(void)
{
  401e9c:	b580      	push	{r7, lr}
  401e9e:	b0a4      	sub	sp, #144	; 0x90
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  401ea0:	4b69      	ldr	r3, [pc, #420]	; (402048 <main+0x1ac>)
  401ea2:	4798      	blx	r3
	board_init();  /* Initialize board */
  401ea4:	4b69      	ldr	r3, [pc, #420]	; (40204c <main+0x1b0>)
  401ea6:	4798      	blx	r3
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  401ea8:	4869      	ldr	r0, [pc, #420]	; (402050 <main+0x1b4>)
  401eaa:	f44f 73a0 	mov.w	r3, #320	; 0x140
  401eae:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  401eb0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401eb4:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  401eb6:	4b67      	ldr	r3, [pc, #412]	; (402054 <main+0x1b8>)
  401eb8:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  401eba:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  401ebc:	4b66      	ldr	r3, [pc, #408]	; (402058 <main+0x1bc>)
  401ebe:	4798      	blx	r3
	configure_lcd();
	draw_screen();
  401ec0:	4b66      	ldr	r3, [pc, #408]	; (40205c <main+0x1c0>)
  401ec2:	4798      	blx	r3
	draw_button(0);
  401ec4:	2000      	movs	r0, #0
  401ec6:	4b66      	ldr	r3, [pc, #408]	; (402060 <main+0x1c4>)
  401ec8:	4798      	blx	r3
	uint8_t t8_object[] = {
  401eca:	4c66      	ldr	r4, [pc, #408]	; (402064 <main+0x1c8>)
  401ecc:	ab04      	add	r3, sp, #16
  401ece:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  401ed2:	c303      	stmia	r3!, {r0, r1}
  401ed4:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  401ed6:	ad13      	add	r5, sp, #76	; 0x4c
  401ed8:	f104 060c 	add.w	r6, r4, #12
  401edc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401ee0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  401ee2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401ee4:	6833      	ldr	r3, [r6, #0]
  401ee6:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  401ee8:	ab01      	add	r3, sp, #4
  401eea:	f104 0230 	add.w	r2, r4, #48	; 0x30
  401eee:	ca07      	ldmia	r2, {r0, r1, r2}
  401ef0:	c303      	stmia	r3!, {r0, r1}
  401ef2:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  401ef4:	ad0a      	add	r5, sp, #40	; 0x28
  401ef6:	343c      	adds	r4, #60	; 0x3c
  401ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  401efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  401f00:	6823      	ldr	r3, [r4, #0]
  401f02:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  401f04:	2400      	movs	r4, #0
  401f06:	9409      	str	r4, [sp, #36]	; 0x24
  401f08:	4b57      	ldr	r3, [pc, #348]	; (402068 <main+0x1cc>)
  401f0a:	9308      	str	r3, [sp, #32]
  401f0c:	264a      	movs	r6, #74	; 0x4a
  401f0e:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  401f12:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 4020c0 <main+0x224>
  401f16:	f8cd 801c 	str.w	r8, [sp, #28]
  401f1a:	2013      	movs	r0, #19
  401f1c:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 4020c4 <main+0x228>
  401f20:	47c8      	blx	r9
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  401f22:	4d52      	ldr	r5, [pc, #328]	; (40206c <main+0x1d0>)
  401f24:	a907      	add	r1, sp, #28
  401f26:	4628      	mov	r0, r5
  401f28:	4b51      	ldr	r3, [pc, #324]	; (402070 <main+0x1d4>)
  401f2a:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  401f2c:	2302      	movs	r3, #2
  401f2e:	4632      	mov	r2, r6
  401f30:	4629      	mov	r1, r5
  401f32:	a81c      	add	r0, sp, #112	; 0x70
  401f34:	4d4f      	ldr	r5, [pc, #316]	; (402074 <main+0x1d8>)
  401f36:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401f38:	4622      	mov	r2, r4
  401f3a:	2106      	movs	r1, #6
  401f3c:	a81c      	add	r0, sp, #112	; 0x70
  401f3e:	4d4e      	ldr	r5, [pc, #312]	; (402078 <main+0x1dc>)
  401f40:	47a8      	blx	r5
  401f42:	2201      	movs	r2, #1
  401f44:	4601      	mov	r1, r0
  401f46:	a81c      	add	r0, sp, #112	; 0x70
  401f48:	4e4c      	ldr	r6, [pc, #304]	; (40207c <main+0x1e0>)
  401f4a:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  401f4c:	484c      	ldr	r0, [pc, #304]	; (402080 <main+0x1e4>)
  401f4e:	4b4d      	ldr	r3, [pc, #308]	; (402084 <main+0x1e8>)
  401f50:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401f52:	4622      	mov	r2, r4
  401f54:	2107      	movs	r1, #7
  401f56:	a81c      	add	r0, sp, #112	; 0x70
  401f58:	47a8      	blx	r5
  401f5a:	2220      	movs	r2, #32
  401f5c:	4601      	mov	r1, r0
  401f5e:	a81c      	add	r0, sp, #112	; 0x70
  401f60:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401f62:	4622      	mov	r2, r4
  401f64:	2107      	movs	r1, #7
  401f66:	a81c      	add	r0, sp, #112	; 0x70
  401f68:	47a8      	blx	r5
  401f6a:	1c41      	adds	r1, r0, #1
  401f6c:	2210      	movs	r2, #16
  401f6e:	b289      	uxth	r1, r1
  401f70:	a81c      	add	r0, sp, #112	; 0x70
  401f72:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401f74:	4622      	mov	r2, r4
  401f76:	2107      	movs	r1, #7
  401f78:	a81c      	add	r0, sp, #112	; 0x70
  401f7a:	47a8      	blx	r5
  401f7c:	1c81      	adds	r1, r0, #2
  401f7e:	224b      	movs	r2, #75	; 0x4b
  401f80:	b289      	uxth	r1, r1
  401f82:	a81c      	add	r0, sp, #112	; 0x70
  401f84:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401f86:	4622      	mov	r2, r4
  401f88:	2107      	movs	r1, #7
  401f8a:	a81c      	add	r0, sp, #112	; 0x70
  401f8c:	47a8      	blx	r5
  401f8e:	1cc1      	adds	r1, r0, #3
  401f90:	2284      	movs	r2, #132	; 0x84
  401f92:	b289      	uxth	r1, r1
  401f94:	a81c      	add	r0, sp, #112	; 0x70
  401f96:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  401f98:	4622      	mov	r2, r4
  401f9a:	2108      	movs	r1, #8
  401f9c:	a81c      	add	r0, sp, #112	; 0x70
  401f9e:	47a8      	blx	r5
  401fa0:	aa04      	add	r2, sp, #16
  401fa2:	4601      	mov	r1, r0
  401fa4:	a81c      	add	r0, sp, #112	; 0x70
  401fa6:	4f38      	ldr	r7, [pc, #224]	; (402088 <main+0x1ec>)
  401fa8:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  401faa:	4622      	mov	r2, r4
  401fac:	2109      	movs	r1, #9
  401fae:	a81c      	add	r0, sp, #112	; 0x70
  401fb0:	47a8      	blx	r5
  401fb2:	aa13      	add	r2, sp, #76	; 0x4c
  401fb4:	4601      	mov	r1, r0
  401fb6:	a81c      	add	r0, sp, #112	; 0x70
  401fb8:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  401fba:	4622      	mov	r2, r4
  401fbc:	212e      	movs	r1, #46	; 0x2e
  401fbe:	a81c      	add	r0, sp, #112	; 0x70
  401fc0:	47a8      	blx	r5
  401fc2:	aa01      	add	r2, sp, #4
  401fc4:	4601      	mov	r1, r0
  401fc6:	a81c      	add	r0, sp, #112	; 0x70
  401fc8:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  401fca:	4622      	mov	r2, r4
  401fcc:	2138      	movs	r1, #56	; 0x38
  401fce:	a81c      	add	r0, sp, #112	; 0x70
  401fd0:	47a8      	blx	r5
  401fd2:	aa0a      	add	r2, sp, #40	; 0x28
  401fd4:	4601      	mov	r1, r0
  401fd6:	a81c      	add	r0, sp, #112	; 0x70
  401fd8:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  401fda:	4622      	mov	r2, r4
  401fdc:	2106      	movs	r1, #6
  401fde:	a81c      	add	r0, sp, #112	; 0x70
  401fe0:	47a8      	blx	r5
  401fe2:	1c81      	adds	r1, r0, #2
  401fe4:	2201      	movs	r2, #1
  401fe6:	b289      	uxth	r1, r1
  401fe8:	a81c      	add	r0, sp, #112	; 0x70
  401fea:	47b0      	blx	r6
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  401fec:	4d27      	ldr	r5, [pc, #156]	; (40208c <main+0x1f0>)
  401fee:	4b28      	ldr	r3, [pc, #160]	; (402090 <main+0x1f4>)
  401ff0:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  401ff2:	4a28      	ldr	r2, [pc, #160]	; (402094 <main+0x1f8>)
  401ff4:	4b28      	ldr	r3, [pc, #160]	; (402098 <main+0x1fc>)
  401ff6:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  401ff8:	4a28      	ldr	r2, [pc, #160]	; (40209c <main+0x200>)
  401ffa:	4b29      	ldr	r3, [pc, #164]	; (4020a0 <main+0x204>)
  401ffc:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  401ffe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  402002:	9313      	str	r3, [sp, #76]	; 0x4c
	usart_settings.char_length = opt->charlength;
  402004:	23c0      	movs	r3, #192	; 0xc0
  402006:	9314      	str	r3, [sp, #80]	; 0x50
	usart_settings.parity_type = opt->paritytype;
  402008:	f44f 6300 	mov.w	r3, #2048	; 0x800
  40200c:	9315      	str	r3, [sp, #84]	; 0x54
	usart_settings.stop_bits= opt->stopbits;
  40200e:	9416      	str	r4, [sp, #88]	; 0x58
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  402010:	9417      	str	r4, [sp, #92]	; 0x5c
  402012:	200e      	movs	r0, #14
  402014:	47c8      	blx	r9
		usart_init_rs232(p_usart, &usart_settings,
  402016:	4642      	mov	r2, r8
  402018:	a913      	add	r1, sp, #76	; 0x4c
  40201a:	4628      	mov	r0, r5
  40201c:	4b21      	ldr	r3, [pc, #132]	; (4020a4 <main+0x208>)
  40201e:	4798      	blx	r3
		usart_enable_tx(p_usart);
  402020:	4628      	mov	r0, r5
  402022:	4b21      	ldr	r3, [pc, #132]	; (4020a8 <main+0x20c>)
  402024:	4798      	blx	r3
		usart_enable_rx(p_usart);
  402026:	4628      	mov	r0, r5
  402028:	4b20      	ldr	r3, [pc, #128]	; (4020ac <main+0x210>)
  40202a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  40202c:	4e20      	ldr	r6, [pc, #128]	; (4020b0 <main+0x214>)
  40202e:	6833      	ldr	r3, [r6, #0]
  402030:	4621      	mov	r1, r4
  402032:	6898      	ldr	r0, [r3, #8]
  402034:	4d1f      	ldr	r5, [pc, #124]	; (4020b4 <main+0x218>)
  402036:	47a8      	blx	r5
	setbuf(stdin, NULL);
  402038:	6833      	ldr	r3, [r6, #0]
  40203a:	4621      	mov	r1, r4
  40203c:	6858      	ldr	r0, [r3, #4]
  40203e:	47a8      	blx	r5
	mxt_init(&device);
	
	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);

	printf("\n\rmaXTouch data USART transmitter\n\r");
  402040:	481d      	ldr	r0, [pc, #116]	; (4020b8 <main+0x21c>)
  402042:	4b1e      	ldr	r3, [pc, #120]	; (4020bc <main+0x220>)
  402044:	4798      	blx	r3
  402046:	e7fe      	b.n	402046 <main+0x1aa>
  402048:	0040056d 	.word	0x0040056d
  40204c:	004007fd 	.word	0x004007fd
  402050:	20400e54 	.word	0x20400e54
  402054:	00fcfcfc 	.word	0x00fcfcfc
  402058:	00400d69 	.word	0x00400d69
  40205c:	00401e15 	.word	0x00401e15
  402060:	00401e3d 	.word	0x00401e3d
  402064:	0040504c 	.word	0x0040504c
  402068:	00061a80 	.word	0x00061a80
  40206c:	40018000 	.word	0x40018000
  402070:	004016fd 	.word	0x004016fd
  402074:	004001d5 	.word	0x004001d5
  402078:	0040046d 	.word	0x0040046d
  40207c:	00400525 	.word	0x00400525
  402080:	003228d8 	.word	0x003228d8
  402084:	20400001 	.word	0x20400001
  402088:	004004ad 	.word	0x004004ad
  40208c:	40028000 	.word	0x40028000
  402090:	20400e50 	.word	0x20400e50
  402094:	00401d41 	.word	0x00401d41
  402098:	20400e4c 	.word	0x20400e4c
  40209c:	00401c65 	.word	0x00401c65
  4020a0:	20400e48 	.word	0x20400e48
  4020a4:	00401925 	.word	0x00401925
  4020a8:	00401979 	.word	0x00401979
  4020ac:	0040197f 	.word	0x0040197f
  4020b0:	20400014 	.word	0x20400014
  4020b4:	00402789 	.word	0x00402789
  4020b8:	004050ac 	.word	0x004050ac
  4020bc:	00402119 	.word	0x00402119
  4020c0:	08f0d180 	.word	0x08f0d180
  4020c4:	004014b1 	.word	0x004014b1

004020c8 <__libc_init_array>:
  4020c8:	b570      	push	{r4, r5, r6, lr}
  4020ca:	4e0f      	ldr	r6, [pc, #60]	; (402108 <__libc_init_array+0x40>)
  4020cc:	4d0f      	ldr	r5, [pc, #60]	; (40210c <__libc_init_array+0x44>)
  4020ce:	1b76      	subs	r6, r6, r5
  4020d0:	10b6      	asrs	r6, r6, #2
  4020d2:	bf18      	it	ne
  4020d4:	2400      	movne	r4, #0
  4020d6:	d005      	beq.n	4020e4 <__libc_init_array+0x1c>
  4020d8:	3401      	adds	r4, #1
  4020da:	f855 3b04 	ldr.w	r3, [r5], #4
  4020de:	4798      	blx	r3
  4020e0:	42a6      	cmp	r6, r4
  4020e2:	d1f9      	bne.n	4020d8 <__libc_init_array+0x10>
  4020e4:	4e0a      	ldr	r6, [pc, #40]	; (402110 <__libc_init_array+0x48>)
  4020e6:	4d0b      	ldr	r5, [pc, #44]	; (402114 <__libc_init_array+0x4c>)
  4020e8:	1b76      	subs	r6, r6, r5
  4020ea:	f003 f8a5 	bl	405238 <_init>
  4020ee:	10b6      	asrs	r6, r6, #2
  4020f0:	bf18      	it	ne
  4020f2:	2400      	movne	r4, #0
  4020f4:	d006      	beq.n	402104 <__libc_init_array+0x3c>
  4020f6:	3401      	adds	r4, #1
  4020f8:	f855 3b04 	ldr.w	r3, [r5], #4
  4020fc:	4798      	blx	r3
  4020fe:	42a6      	cmp	r6, r4
  402100:	d1f9      	bne.n	4020f6 <__libc_init_array+0x2e>
  402102:	bd70      	pop	{r4, r5, r6, pc}
  402104:	bd70      	pop	{r4, r5, r6, pc}
  402106:	bf00      	nop
  402108:	00405244 	.word	0x00405244
  40210c:	00405244 	.word	0x00405244
  402110:	0040524c 	.word	0x0040524c
  402114:	00405244 	.word	0x00405244

00402118 <iprintf>:
  402118:	b40f      	push	{r0, r1, r2, r3}
  40211a:	b500      	push	{lr}
  40211c:	4907      	ldr	r1, [pc, #28]	; (40213c <iprintf+0x24>)
  40211e:	b083      	sub	sp, #12
  402120:	ab04      	add	r3, sp, #16
  402122:	6808      	ldr	r0, [r1, #0]
  402124:	f853 2b04 	ldr.w	r2, [r3], #4
  402128:	6881      	ldr	r1, [r0, #8]
  40212a:	9301      	str	r3, [sp, #4]
  40212c:	f000 fcb6 	bl	402a9c <_vfiprintf_r>
  402130:	b003      	add	sp, #12
  402132:	f85d eb04 	ldr.w	lr, [sp], #4
  402136:	b004      	add	sp, #16
  402138:	4770      	bx	lr
  40213a:	bf00      	nop
  40213c:	20400014 	.word	0x20400014

00402140 <malloc>:
  402140:	4b02      	ldr	r3, [pc, #8]	; (40214c <malloc+0xc>)
  402142:	4601      	mov	r1, r0
  402144:	6818      	ldr	r0, [r3, #0]
  402146:	f000 b803 	b.w	402150 <_malloc_r>
  40214a:	bf00      	nop
  40214c:	20400014 	.word	0x20400014

00402150 <_malloc_r>:
  402150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402154:	f101 060b 	add.w	r6, r1, #11
  402158:	2e16      	cmp	r6, #22
  40215a:	b083      	sub	sp, #12
  40215c:	4605      	mov	r5, r0
  40215e:	f240 809e 	bls.w	40229e <_malloc_r+0x14e>
  402162:	f036 0607 	bics.w	r6, r6, #7
  402166:	f100 80bd 	bmi.w	4022e4 <_malloc_r+0x194>
  40216a:	42b1      	cmp	r1, r6
  40216c:	f200 80ba 	bhi.w	4022e4 <_malloc_r+0x194>
  402170:	f000 faec 	bl	40274c <__malloc_lock>
  402174:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  402178:	f0c0 8293 	bcc.w	4026a2 <_malloc_r+0x552>
  40217c:	0a73      	lsrs	r3, r6, #9
  40217e:	f000 80b8 	beq.w	4022f2 <_malloc_r+0x1a2>
  402182:	2b04      	cmp	r3, #4
  402184:	f200 8179 	bhi.w	40247a <_malloc_r+0x32a>
  402188:	09b3      	lsrs	r3, r6, #6
  40218a:	f103 0039 	add.w	r0, r3, #57	; 0x39
  40218e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  402192:	00c3      	lsls	r3, r0, #3
  402194:	4fbf      	ldr	r7, [pc, #764]	; (402494 <_malloc_r+0x344>)
  402196:	443b      	add	r3, r7
  402198:	f1a3 0108 	sub.w	r1, r3, #8
  40219c:	685c      	ldr	r4, [r3, #4]
  40219e:	42a1      	cmp	r1, r4
  4021a0:	d106      	bne.n	4021b0 <_malloc_r+0x60>
  4021a2:	e00c      	b.n	4021be <_malloc_r+0x6e>
  4021a4:	2a00      	cmp	r2, #0
  4021a6:	f280 80aa 	bge.w	4022fe <_malloc_r+0x1ae>
  4021aa:	68e4      	ldr	r4, [r4, #12]
  4021ac:	42a1      	cmp	r1, r4
  4021ae:	d006      	beq.n	4021be <_malloc_r+0x6e>
  4021b0:	6863      	ldr	r3, [r4, #4]
  4021b2:	f023 0303 	bic.w	r3, r3, #3
  4021b6:	1b9a      	subs	r2, r3, r6
  4021b8:	2a0f      	cmp	r2, #15
  4021ba:	ddf3      	ble.n	4021a4 <_malloc_r+0x54>
  4021bc:	4670      	mov	r0, lr
  4021be:	693c      	ldr	r4, [r7, #16]
  4021c0:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4024a8 <_malloc_r+0x358>
  4021c4:	4574      	cmp	r4, lr
  4021c6:	f000 81ab 	beq.w	402520 <_malloc_r+0x3d0>
  4021ca:	6863      	ldr	r3, [r4, #4]
  4021cc:	f023 0303 	bic.w	r3, r3, #3
  4021d0:	1b9a      	subs	r2, r3, r6
  4021d2:	2a0f      	cmp	r2, #15
  4021d4:	f300 8190 	bgt.w	4024f8 <_malloc_r+0x3a8>
  4021d8:	2a00      	cmp	r2, #0
  4021da:	f8c7 e014 	str.w	lr, [r7, #20]
  4021de:	f8c7 e010 	str.w	lr, [r7, #16]
  4021e2:	f280 809d 	bge.w	402320 <_malloc_r+0x1d0>
  4021e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  4021ea:	f080 8161 	bcs.w	4024b0 <_malloc_r+0x360>
  4021ee:	08db      	lsrs	r3, r3, #3
  4021f0:	f103 0c01 	add.w	ip, r3, #1
  4021f4:	1099      	asrs	r1, r3, #2
  4021f6:	687a      	ldr	r2, [r7, #4]
  4021f8:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  4021fc:	f8c4 8008 	str.w	r8, [r4, #8]
  402200:	2301      	movs	r3, #1
  402202:	408b      	lsls	r3, r1
  402204:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  402208:	4313      	orrs	r3, r2
  40220a:	3908      	subs	r1, #8
  40220c:	60e1      	str	r1, [r4, #12]
  40220e:	607b      	str	r3, [r7, #4]
  402210:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  402214:	f8c8 400c 	str.w	r4, [r8, #12]
  402218:	1082      	asrs	r2, r0, #2
  40221a:	2401      	movs	r4, #1
  40221c:	4094      	lsls	r4, r2
  40221e:	429c      	cmp	r4, r3
  402220:	f200 808b 	bhi.w	40233a <_malloc_r+0x1ea>
  402224:	421c      	tst	r4, r3
  402226:	d106      	bne.n	402236 <_malloc_r+0xe6>
  402228:	f020 0003 	bic.w	r0, r0, #3
  40222c:	0064      	lsls	r4, r4, #1
  40222e:	421c      	tst	r4, r3
  402230:	f100 0004 	add.w	r0, r0, #4
  402234:	d0fa      	beq.n	40222c <_malloc_r+0xdc>
  402236:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  40223a:	46cc      	mov	ip, r9
  40223c:	4680      	mov	r8, r0
  40223e:	f8dc 300c 	ldr.w	r3, [ip, #12]
  402242:	459c      	cmp	ip, r3
  402244:	d107      	bne.n	402256 <_malloc_r+0x106>
  402246:	e16d      	b.n	402524 <_malloc_r+0x3d4>
  402248:	2a00      	cmp	r2, #0
  40224a:	f280 817b 	bge.w	402544 <_malloc_r+0x3f4>
  40224e:	68db      	ldr	r3, [r3, #12]
  402250:	459c      	cmp	ip, r3
  402252:	f000 8167 	beq.w	402524 <_malloc_r+0x3d4>
  402256:	6859      	ldr	r1, [r3, #4]
  402258:	f021 0103 	bic.w	r1, r1, #3
  40225c:	1b8a      	subs	r2, r1, r6
  40225e:	2a0f      	cmp	r2, #15
  402260:	ddf2      	ble.n	402248 <_malloc_r+0xf8>
  402262:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  402266:	f8d3 8008 	ldr.w	r8, [r3, #8]
  40226a:	9300      	str	r3, [sp, #0]
  40226c:	199c      	adds	r4, r3, r6
  40226e:	4628      	mov	r0, r5
  402270:	f046 0601 	orr.w	r6, r6, #1
  402274:	f042 0501 	orr.w	r5, r2, #1
  402278:	605e      	str	r6, [r3, #4]
  40227a:	f8c8 c00c 	str.w	ip, [r8, #12]
  40227e:	f8cc 8008 	str.w	r8, [ip, #8]
  402282:	617c      	str	r4, [r7, #20]
  402284:	613c      	str	r4, [r7, #16]
  402286:	f8c4 e00c 	str.w	lr, [r4, #12]
  40228a:	f8c4 e008 	str.w	lr, [r4, #8]
  40228e:	6065      	str	r5, [r4, #4]
  402290:	505a      	str	r2, [r3, r1]
  402292:	f000 fa61 	bl	402758 <__malloc_unlock>
  402296:	9b00      	ldr	r3, [sp, #0]
  402298:	f103 0408 	add.w	r4, r3, #8
  40229c:	e01e      	b.n	4022dc <_malloc_r+0x18c>
  40229e:	2910      	cmp	r1, #16
  4022a0:	d820      	bhi.n	4022e4 <_malloc_r+0x194>
  4022a2:	f000 fa53 	bl	40274c <__malloc_lock>
  4022a6:	2610      	movs	r6, #16
  4022a8:	2318      	movs	r3, #24
  4022aa:	2002      	movs	r0, #2
  4022ac:	4f79      	ldr	r7, [pc, #484]	; (402494 <_malloc_r+0x344>)
  4022ae:	443b      	add	r3, r7
  4022b0:	f1a3 0208 	sub.w	r2, r3, #8
  4022b4:	685c      	ldr	r4, [r3, #4]
  4022b6:	4294      	cmp	r4, r2
  4022b8:	f000 813d 	beq.w	402536 <_malloc_r+0x3e6>
  4022bc:	6863      	ldr	r3, [r4, #4]
  4022be:	68e1      	ldr	r1, [r4, #12]
  4022c0:	68a6      	ldr	r6, [r4, #8]
  4022c2:	f023 0303 	bic.w	r3, r3, #3
  4022c6:	4423      	add	r3, r4
  4022c8:	4628      	mov	r0, r5
  4022ca:	685a      	ldr	r2, [r3, #4]
  4022cc:	60f1      	str	r1, [r6, #12]
  4022ce:	f042 0201 	orr.w	r2, r2, #1
  4022d2:	608e      	str	r6, [r1, #8]
  4022d4:	605a      	str	r2, [r3, #4]
  4022d6:	f000 fa3f 	bl	402758 <__malloc_unlock>
  4022da:	3408      	adds	r4, #8
  4022dc:	4620      	mov	r0, r4
  4022de:	b003      	add	sp, #12
  4022e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022e4:	2400      	movs	r4, #0
  4022e6:	230c      	movs	r3, #12
  4022e8:	4620      	mov	r0, r4
  4022ea:	602b      	str	r3, [r5, #0]
  4022ec:	b003      	add	sp, #12
  4022ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4022f2:	2040      	movs	r0, #64	; 0x40
  4022f4:	f44f 7300 	mov.w	r3, #512	; 0x200
  4022f8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  4022fc:	e74a      	b.n	402194 <_malloc_r+0x44>
  4022fe:	4423      	add	r3, r4
  402300:	68e1      	ldr	r1, [r4, #12]
  402302:	685a      	ldr	r2, [r3, #4]
  402304:	68a6      	ldr	r6, [r4, #8]
  402306:	f042 0201 	orr.w	r2, r2, #1
  40230a:	60f1      	str	r1, [r6, #12]
  40230c:	4628      	mov	r0, r5
  40230e:	608e      	str	r6, [r1, #8]
  402310:	605a      	str	r2, [r3, #4]
  402312:	f000 fa21 	bl	402758 <__malloc_unlock>
  402316:	3408      	adds	r4, #8
  402318:	4620      	mov	r0, r4
  40231a:	b003      	add	sp, #12
  40231c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402320:	4423      	add	r3, r4
  402322:	4628      	mov	r0, r5
  402324:	685a      	ldr	r2, [r3, #4]
  402326:	f042 0201 	orr.w	r2, r2, #1
  40232a:	605a      	str	r2, [r3, #4]
  40232c:	f000 fa14 	bl	402758 <__malloc_unlock>
  402330:	3408      	adds	r4, #8
  402332:	4620      	mov	r0, r4
  402334:	b003      	add	sp, #12
  402336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40233a:	68bc      	ldr	r4, [r7, #8]
  40233c:	6863      	ldr	r3, [r4, #4]
  40233e:	f023 0803 	bic.w	r8, r3, #3
  402342:	45b0      	cmp	r8, r6
  402344:	d304      	bcc.n	402350 <_malloc_r+0x200>
  402346:	eba8 0306 	sub.w	r3, r8, r6
  40234a:	2b0f      	cmp	r3, #15
  40234c:	f300 8085 	bgt.w	40245a <_malloc_r+0x30a>
  402350:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4024ac <_malloc_r+0x35c>
  402354:	4b50      	ldr	r3, [pc, #320]	; (402498 <_malloc_r+0x348>)
  402356:	f8d9 2000 	ldr.w	r2, [r9]
  40235a:	681b      	ldr	r3, [r3, #0]
  40235c:	3201      	adds	r2, #1
  40235e:	4433      	add	r3, r6
  402360:	eb04 0a08 	add.w	sl, r4, r8
  402364:	f000 8155 	beq.w	402612 <_malloc_r+0x4c2>
  402368:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  40236c:	330f      	adds	r3, #15
  40236e:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  402372:	f02b 0b0f 	bic.w	fp, fp, #15
  402376:	4659      	mov	r1, fp
  402378:	4628      	mov	r0, r5
  40237a:	f000 f9f3 	bl	402764 <_sbrk_r>
  40237e:	1c41      	adds	r1, r0, #1
  402380:	4602      	mov	r2, r0
  402382:	f000 80fc 	beq.w	40257e <_malloc_r+0x42e>
  402386:	4582      	cmp	sl, r0
  402388:	f200 80f7 	bhi.w	40257a <_malloc_r+0x42a>
  40238c:	4b43      	ldr	r3, [pc, #268]	; (40249c <_malloc_r+0x34c>)
  40238e:	6819      	ldr	r1, [r3, #0]
  402390:	4459      	add	r1, fp
  402392:	6019      	str	r1, [r3, #0]
  402394:	f000 814d 	beq.w	402632 <_malloc_r+0x4e2>
  402398:	f8d9 0000 	ldr.w	r0, [r9]
  40239c:	3001      	adds	r0, #1
  40239e:	bf1b      	ittet	ne
  4023a0:	eba2 0a0a 	subne.w	sl, r2, sl
  4023a4:	4451      	addne	r1, sl
  4023a6:	f8c9 2000 	streq.w	r2, [r9]
  4023aa:	6019      	strne	r1, [r3, #0]
  4023ac:	f012 0107 	ands.w	r1, r2, #7
  4023b0:	f000 8115 	beq.w	4025de <_malloc_r+0x48e>
  4023b4:	f1c1 0008 	rsb	r0, r1, #8
  4023b8:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4023bc:	4402      	add	r2, r0
  4023be:	3108      	adds	r1, #8
  4023c0:	eb02 090b 	add.w	r9, r2, fp
  4023c4:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4023c8:	eba1 0909 	sub.w	r9, r1, r9
  4023cc:	4649      	mov	r1, r9
  4023ce:	4628      	mov	r0, r5
  4023d0:	9301      	str	r3, [sp, #4]
  4023d2:	9200      	str	r2, [sp, #0]
  4023d4:	f000 f9c6 	bl	402764 <_sbrk_r>
  4023d8:	1c43      	adds	r3, r0, #1
  4023da:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4023de:	f000 8143 	beq.w	402668 <_malloc_r+0x518>
  4023e2:	1a80      	subs	r0, r0, r2
  4023e4:	4448      	add	r0, r9
  4023e6:	f040 0001 	orr.w	r0, r0, #1
  4023ea:	6819      	ldr	r1, [r3, #0]
  4023ec:	60ba      	str	r2, [r7, #8]
  4023ee:	4449      	add	r1, r9
  4023f0:	42bc      	cmp	r4, r7
  4023f2:	6050      	str	r0, [r2, #4]
  4023f4:	6019      	str	r1, [r3, #0]
  4023f6:	d017      	beq.n	402428 <_malloc_r+0x2d8>
  4023f8:	f1b8 0f0f 	cmp.w	r8, #15
  4023fc:	f240 80fb 	bls.w	4025f6 <_malloc_r+0x4a6>
  402400:	6860      	ldr	r0, [r4, #4]
  402402:	f1a8 020c 	sub.w	r2, r8, #12
  402406:	f022 0207 	bic.w	r2, r2, #7
  40240a:	eb04 0e02 	add.w	lr, r4, r2
  40240e:	f000 0001 	and.w	r0, r0, #1
  402412:	f04f 0c05 	mov.w	ip, #5
  402416:	4310      	orrs	r0, r2
  402418:	2a0f      	cmp	r2, #15
  40241a:	6060      	str	r0, [r4, #4]
  40241c:	f8ce c004 	str.w	ip, [lr, #4]
  402420:	f8ce c008 	str.w	ip, [lr, #8]
  402424:	f200 8117 	bhi.w	402656 <_malloc_r+0x506>
  402428:	4b1d      	ldr	r3, [pc, #116]	; (4024a0 <_malloc_r+0x350>)
  40242a:	68bc      	ldr	r4, [r7, #8]
  40242c:	681a      	ldr	r2, [r3, #0]
  40242e:	4291      	cmp	r1, r2
  402430:	bf88      	it	hi
  402432:	6019      	strhi	r1, [r3, #0]
  402434:	4b1b      	ldr	r3, [pc, #108]	; (4024a4 <_malloc_r+0x354>)
  402436:	681a      	ldr	r2, [r3, #0]
  402438:	4291      	cmp	r1, r2
  40243a:	6862      	ldr	r2, [r4, #4]
  40243c:	bf88      	it	hi
  40243e:	6019      	strhi	r1, [r3, #0]
  402440:	f022 0203 	bic.w	r2, r2, #3
  402444:	4296      	cmp	r6, r2
  402446:	eba2 0306 	sub.w	r3, r2, r6
  40244a:	d801      	bhi.n	402450 <_malloc_r+0x300>
  40244c:	2b0f      	cmp	r3, #15
  40244e:	dc04      	bgt.n	40245a <_malloc_r+0x30a>
  402450:	4628      	mov	r0, r5
  402452:	f000 f981 	bl	402758 <__malloc_unlock>
  402456:	2400      	movs	r4, #0
  402458:	e740      	b.n	4022dc <_malloc_r+0x18c>
  40245a:	19a2      	adds	r2, r4, r6
  40245c:	f043 0301 	orr.w	r3, r3, #1
  402460:	f046 0601 	orr.w	r6, r6, #1
  402464:	6066      	str	r6, [r4, #4]
  402466:	4628      	mov	r0, r5
  402468:	60ba      	str	r2, [r7, #8]
  40246a:	6053      	str	r3, [r2, #4]
  40246c:	f000 f974 	bl	402758 <__malloc_unlock>
  402470:	3408      	adds	r4, #8
  402472:	4620      	mov	r0, r4
  402474:	b003      	add	sp, #12
  402476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40247a:	2b14      	cmp	r3, #20
  40247c:	d971      	bls.n	402562 <_malloc_r+0x412>
  40247e:	2b54      	cmp	r3, #84	; 0x54
  402480:	f200 80a3 	bhi.w	4025ca <_malloc_r+0x47a>
  402484:	0b33      	lsrs	r3, r6, #12
  402486:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  40248a:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  40248e:	00c3      	lsls	r3, r0, #3
  402490:	e680      	b.n	402194 <_malloc_r+0x44>
  402492:	bf00      	nop
  402494:	20400440 	.word	0x20400440
  402498:	20400e44 	.word	0x20400e44
  40249c:	20400e14 	.word	0x20400e14
  4024a0:	20400e3c 	.word	0x20400e3c
  4024a4:	20400e40 	.word	0x20400e40
  4024a8:	20400448 	.word	0x20400448
  4024ac:	20400848 	.word	0x20400848
  4024b0:	0a5a      	lsrs	r2, r3, #9
  4024b2:	2a04      	cmp	r2, #4
  4024b4:	d95b      	bls.n	40256e <_malloc_r+0x41e>
  4024b6:	2a14      	cmp	r2, #20
  4024b8:	f200 80ae 	bhi.w	402618 <_malloc_r+0x4c8>
  4024bc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4024c0:	00c9      	lsls	r1, r1, #3
  4024c2:	325b      	adds	r2, #91	; 0x5b
  4024c4:	eb07 0c01 	add.w	ip, r7, r1
  4024c8:	5879      	ldr	r1, [r7, r1]
  4024ca:	f1ac 0c08 	sub.w	ip, ip, #8
  4024ce:	458c      	cmp	ip, r1
  4024d0:	f000 8088 	beq.w	4025e4 <_malloc_r+0x494>
  4024d4:	684a      	ldr	r2, [r1, #4]
  4024d6:	f022 0203 	bic.w	r2, r2, #3
  4024da:	4293      	cmp	r3, r2
  4024dc:	d273      	bcs.n	4025c6 <_malloc_r+0x476>
  4024de:	6889      	ldr	r1, [r1, #8]
  4024e0:	458c      	cmp	ip, r1
  4024e2:	d1f7      	bne.n	4024d4 <_malloc_r+0x384>
  4024e4:	f8dc 200c 	ldr.w	r2, [ip, #12]
  4024e8:	687b      	ldr	r3, [r7, #4]
  4024ea:	60e2      	str	r2, [r4, #12]
  4024ec:	f8c4 c008 	str.w	ip, [r4, #8]
  4024f0:	6094      	str	r4, [r2, #8]
  4024f2:	f8cc 400c 	str.w	r4, [ip, #12]
  4024f6:	e68f      	b.n	402218 <_malloc_r+0xc8>
  4024f8:	19a1      	adds	r1, r4, r6
  4024fa:	f046 0c01 	orr.w	ip, r6, #1
  4024fe:	f042 0601 	orr.w	r6, r2, #1
  402502:	f8c4 c004 	str.w	ip, [r4, #4]
  402506:	4628      	mov	r0, r5
  402508:	6179      	str	r1, [r7, #20]
  40250a:	6139      	str	r1, [r7, #16]
  40250c:	f8c1 e00c 	str.w	lr, [r1, #12]
  402510:	f8c1 e008 	str.w	lr, [r1, #8]
  402514:	604e      	str	r6, [r1, #4]
  402516:	50e2      	str	r2, [r4, r3]
  402518:	f000 f91e 	bl	402758 <__malloc_unlock>
  40251c:	3408      	adds	r4, #8
  40251e:	e6dd      	b.n	4022dc <_malloc_r+0x18c>
  402520:	687b      	ldr	r3, [r7, #4]
  402522:	e679      	b.n	402218 <_malloc_r+0xc8>
  402524:	f108 0801 	add.w	r8, r8, #1
  402528:	f018 0f03 	tst.w	r8, #3
  40252c:	f10c 0c08 	add.w	ip, ip, #8
  402530:	f47f ae85 	bne.w	40223e <_malloc_r+0xee>
  402534:	e02d      	b.n	402592 <_malloc_r+0x442>
  402536:	68dc      	ldr	r4, [r3, #12]
  402538:	42a3      	cmp	r3, r4
  40253a:	bf08      	it	eq
  40253c:	3002      	addeq	r0, #2
  40253e:	f43f ae3e 	beq.w	4021be <_malloc_r+0x6e>
  402542:	e6bb      	b.n	4022bc <_malloc_r+0x16c>
  402544:	4419      	add	r1, r3
  402546:	461c      	mov	r4, r3
  402548:	684a      	ldr	r2, [r1, #4]
  40254a:	68db      	ldr	r3, [r3, #12]
  40254c:	f854 6f08 	ldr.w	r6, [r4, #8]!
  402550:	f042 0201 	orr.w	r2, r2, #1
  402554:	604a      	str	r2, [r1, #4]
  402556:	4628      	mov	r0, r5
  402558:	60f3      	str	r3, [r6, #12]
  40255a:	609e      	str	r6, [r3, #8]
  40255c:	f000 f8fc 	bl	402758 <__malloc_unlock>
  402560:	e6bc      	b.n	4022dc <_malloc_r+0x18c>
  402562:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  402566:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  40256a:	00c3      	lsls	r3, r0, #3
  40256c:	e612      	b.n	402194 <_malloc_r+0x44>
  40256e:	099a      	lsrs	r2, r3, #6
  402570:	f102 0139 	add.w	r1, r2, #57	; 0x39
  402574:	00c9      	lsls	r1, r1, #3
  402576:	3238      	adds	r2, #56	; 0x38
  402578:	e7a4      	b.n	4024c4 <_malloc_r+0x374>
  40257a:	42bc      	cmp	r4, r7
  40257c:	d054      	beq.n	402628 <_malloc_r+0x4d8>
  40257e:	68bc      	ldr	r4, [r7, #8]
  402580:	6862      	ldr	r2, [r4, #4]
  402582:	f022 0203 	bic.w	r2, r2, #3
  402586:	e75d      	b.n	402444 <_malloc_r+0x2f4>
  402588:	f859 3908 	ldr.w	r3, [r9], #-8
  40258c:	4599      	cmp	r9, r3
  40258e:	f040 8086 	bne.w	40269e <_malloc_r+0x54e>
  402592:	f010 0f03 	tst.w	r0, #3
  402596:	f100 30ff 	add.w	r0, r0, #4294967295
  40259a:	d1f5      	bne.n	402588 <_malloc_r+0x438>
  40259c:	687b      	ldr	r3, [r7, #4]
  40259e:	ea23 0304 	bic.w	r3, r3, r4
  4025a2:	607b      	str	r3, [r7, #4]
  4025a4:	0064      	lsls	r4, r4, #1
  4025a6:	429c      	cmp	r4, r3
  4025a8:	f63f aec7 	bhi.w	40233a <_malloc_r+0x1ea>
  4025ac:	2c00      	cmp	r4, #0
  4025ae:	f43f aec4 	beq.w	40233a <_malloc_r+0x1ea>
  4025b2:	421c      	tst	r4, r3
  4025b4:	4640      	mov	r0, r8
  4025b6:	f47f ae3e 	bne.w	402236 <_malloc_r+0xe6>
  4025ba:	0064      	lsls	r4, r4, #1
  4025bc:	421c      	tst	r4, r3
  4025be:	f100 0004 	add.w	r0, r0, #4
  4025c2:	d0fa      	beq.n	4025ba <_malloc_r+0x46a>
  4025c4:	e637      	b.n	402236 <_malloc_r+0xe6>
  4025c6:	468c      	mov	ip, r1
  4025c8:	e78c      	b.n	4024e4 <_malloc_r+0x394>
  4025ca:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4025ce:	d815      	bhi.n	4025fc <_malloc_r+0x4ac>
  4025d0:	0bf3      	lsrs	r3, r6, #15
  4025d2:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4025d6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4025da:	00c3      	lsls	r3, r0, #3
  4025dc:	e5da      	b.n	402194 <_malloc_r+0x44>
  4025de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4025e2:	e6ed      	b.n	4023c0 <_malloc_r+0x270>
  4025e4:	687b      	ldr	r3, [r7, #4]
  4025e6:	1092      	asrs	r2, r2, #2
  4025e8:	2101      	movs	r1, #1
  4025ea:	fa01 f202 	lsl.w	r2, r1, r2
  4025ee:	4313      	orrs	r3, r2
  4025f0:	607b      	str	r3, [r7, #4]
  4025f2:	4662      	mov	r2, ip
  4025f4:	e779      	b.n	4024ea <_malloc_r+0x39a>
  4025f6:	2301      	movs	r3, #1
  4025f8:	6053      	str	r3, [r2, #4]
  4025fa:	e729      	b.n	402450 <_malloc_r+0x300>
  4025fc:	f240 5254 	movw	r2, #1364	; 0x554
  402600:	4293      	cmp	r3, r2
  402602:	d822      	bhi.n	40264a <_malloc_r+0x4fa>
  402604:	0cb3      	lsrs	r3, r6, #18
  402606:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  40260a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  40260e:	00c3      	lsls	r3, r0, #3
  402610:	e5c0      	b.n	402194 <_malloc_r+0x44>
  402612:	f103 0b10 	add.w	fp, r3, #16
  402616:	e6ae      	b.n	402376 <_malloc_r+0x226>
  402618:	2a54      	cmp	r2, #84	; 0x54
  40261a:	d829      	bhi.n	402670 <_malloc_r+0x520>
  40261c:	0b1a      	lsrs	r2, r3, #12
  40261e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  402622:	00c9      	lsls	r1, r1, #3
  402624:	326e      	adds	r2, #110	; 0x6e
  402626:	e74d      	b.n	4024c4 <_malloc_r+0x374>
  402628:	4b20      	ldr	r3, [pc, #128]	; (4026ac <_malloc_r+0x55c>)
  40262a:	6819      	ldr	r1, [r3, #0]
  40262c:	4459      	add	r1, fp
  40262e:	6019      	str	r1, [r3, #0]
  402630:	e6b2      	b.n	402398 <_malloc_r+0x248>
  402632:	f3ca 000b 	ubfx	r0, sl, #0, #12
  402636:	2800      	cmp	r0, #0
  402638:	f47f aeae 	bne.w	402398 <_malloc_r+0x248>
  40263c:	eb08 030b 	add.w	r3, r8, fp
  402640:	68ba      	ldr	r2, [r7, #8]
  402642:	f043 0301 	orr.w	r3, r3, #1
  402646:	6053      	str	r3, [r2, #4]
  402648:	e6ee      	b.n	402428 <_malloc_r+0x2d8>
  40264a:	207f      	movs	r0, #127	; 0x7f
  40264c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  402650:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  402654:	e59e      	b.n	402194 <_malloc_r+0x44>
  402656:	f104 0108 	add.w	r1, r4, #8
  40265a:	4628      	mov	r0, r5
  40265c:	9300      	str	r3, [sp, #0]
  40265e:	f001 fb39 	bl	403cd4 <_free_r>
  402662:	9b00      	ldr	r3, [sp, #0]
  402664:	6819      	ldr	r1, [r3, #0]
  402666:	e6df      	b.n	402428 <_malloc_r+0x2d8>
  402668:	2001      	movs	r0, #1
  40266a:	f04f 0900 	mov.w	r9, #0
  40266e:	e6bc      	b.n	4023ea <_malloc_r+0x29a>
  402670:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  402674:	d805      	bhi.n	402682 <_malloc_r+0x532>
  402676:	0bda      	lsrs	r2, r3, #15
  402678:	f102 0178 	add.w	r1, r2, #120	; 0x78
  40267c:	00c9      	lsls	r1, r1, #3
  40267e:	3277      	adds	r2, #119	; 0x77
  402680:	e720      	b.n	4024c4 <_malloc_r+0x374>
  402682:	f240 5154 	movw	r1, #1364	; 0x554
  402686:	428a      	cmp	r2, r1
  402688:	d805      	bhi.n	402696 <_malloc_r+0x546>
  40268a:	0c9a      	lsrs	r2, r3, #18
  40268c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  402690:	00c9      	lsls	r1, r1, #3
  402692:	327c      	adds	r2, #124	; 0x7c
  402694:	e716      	b.n	4024c4 <_malloc_r+0x374>
  402696:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  40269a:	227e      	movs	r2, #126	; 0x7e
  40269c:	e712      	b.n	4024c4 <_malloc_r+0x374>
  40269e:	687b      	ldr	r3, [r7, #4]
  4026a0:	e780      	b.n	4025a4 <_malloc_r+0x454>
  4026a2:	08f0      	lsrs	r0, r6, #3
  4026a4:	f106 0308 	add.w	r3, r6, #8
  4026a8:	e600      	b.n	4022ac <_malloc_r+0x15c>
  4026aa:	bf00      	nop
  4026ac:	20400e14 	.word	0x20400e14

004026b0 <memset>:
  4026b0:	b470      	push	{r4, r5, r6}
  4026b2:	0786      	lsls	r6, r0, #30
  4026b4:	d046      	beq.n	402744 <memset+0x94>
  4026b6:	1e54      	subs	r4, r2, #1
  4026b8:	2a00      	cmp	r2, #0
  4026ba:	d041      	beq.n	402740 <memset+0x90>
  4026bc:	b2ca      	uxtb	r2, r1
  4026be:	4603      	mov	r3, r0
  4026c0:	e002      	b.n	4026c8 <memset+0x18>
  4026c2:	f114 34ff 	adds.w	r4, r4, #4294967295
  4026c6:	d33b      	bcc.n	402740 <memset+0x90>
  4026c8:	f803 2b01 	strb.w	r2, [r3], #1
  4026cc:	079d      	lsls	r5, r3, #30
  4026ce:	d1f8      	bne.n	4026c2 <memset+0x12>
  4026d0:	2c03      	cmp	r4, #3
  4026d2:	d92e      	bls.n	402732 <memset+0x82>
  4026d4:	b2cd      	uxtb	r5, r1
  4026d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  4026da:	2c0f      	cmp	r4, #15
  4026dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  4026e0:	d919      	bls.n	402716 <memset+0x66>
  4026e2:	f103 0210 	add.w	r2, r3, #16
  4026e6:	4626      	mov	r6, r4
  4026e8:	3e10      	subs	r6, #16
  4026ea:	2e0f      	cmp	r6, #15
  4026ec:	f842 5c10 	str.w	r5, [r2, #-16]
  4026f0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4026f4:	f842 5c08 	str.w	r5, [r2, #-8]
  4026f8:	f842 5c04 	str.w	r5, [r2, #-4]
  4026fc:	f102 0210 	add.w	r2, r2, #16
  402700:	d8f2      	bhi.n	4026e8 <memset+0x38>
  402702:	f1a4 0210 	sub.w	r2, r4, #16
  402706:	f022 020f 	bic.w	r2, r2, #15
  40270a:	f004 040f 	and.w	r4, r4, #15
  40270e:	3210      	adds	r2, #16
  402710:	2c03      	cmp	r4, #3
  402712:	4413      	add	r3, r2
  402714:	d90d      	bls.n	402732 <memset+0x82>
  402716:	461e      	mov	r6, r3
  402718:	4622      	mov	r2, r4
  40271a:	3a04      	subs	r2, #4
  40271c:	2a03      	cmp	r2, #3
  40271e:	f846 5b04 	str.w	r5, [r6], #4
  402722:	d8fa      	bhi.n	40271a <memset+0x6a>
  402724:	1f22      	subs	r2, r4, #4
  402726:	f022 0203 	bic.w	r2, r2, #3
  40272a:	3204      	adds	r2, #4
  40272c:	4413      	add	r3, r2
  40272e:	f004 0403 	and.w	r4, r4, #3
  402732:	b12c      	cbz	r4, 402740 <memset+0x90>
  402734:	b2c9      	uxtb	r1, r1
  402736:	441c      	add	r4, r3
  402738:	f803 1b01 	strb.w	r1, [r3], #1
  40273c:	429c      	cmp	r4, r3
  40273e:	d1fb      	bne.n	402738 <memset+0x88>
  402740:	bc70      	pop	{r4, r5, r6}
  402742:	4770      	bx	lr
  402744:	4614      	mov	r4, r2
  402746:	4603      	mov	r3, r0
  402748:	e7c2      	b.n	4026d0 <memset+0x20>
  40274a:	bf00      	nop

0040274c <__malloc_lock>:
  40274c:	4801      	ldr	r0, [pc, #4]	; (402754 <__malloc_lock+0x8>)
  40274e:	f001 bd5b 	b.w	404208 <__retarget_lock_acquire_recursive>
  402752:	bf00      	nop
  402754:	20400e74 	.word	0x20400e74

00402758 <__malloc_unlock>:
  402758:	4801      	ldr	r0, [pc, #4]	; (402760 <__malloc_unlock+0x8>)
  40275a:	f001 bd57 	b.w	40420c <__retarget_lock_release_recursive>
  40275e:	bf00      	nop
  402760:	20400e74 	.word	0x20400e74

00402764 <_sbrk_r>:
  402764:	b538      	push	{r3, r4, r5, lr}
  402766:	4c07      	ldr	r4, [pc, #28]	; (402784 <_sbrk_r+0x20>)
  402768:	2300      	movs	r3, #0
  40276a:	4605      	mov	r5, r0
  40276c:	4608      	mov	r0, r1
  40276e:	6023      	str	r3, [r4, #0]
  402770:	f7ff fa50 	bl	401c14 <_sbrk>
  402774:	1c43      	adds	r3, r0, #1
  402776:	d000      	beq.n	40277a <_sbrk_r+0x16>
  402778:	bd38      	pop	{r3, r4, r5, pc}
  40277a:	6823      	ldr	r3, [r4, #0]
  40277c:	2b00      	cmp	r3, #0
  40277e:	d0fb      	beq.n	402778 <_sbrk_r+0x14>
  402780:	602b      	str	r3, [r5, #0]
  402782:	bd38      	pop	{r3, r4, r5, pc}
  402784:	20400e88 	.word	0x20400e88

00402788 <setbuf>:
  402788:	2900      	cmp	r1, #0
  40278a:	bf0c      	ite	eq
  40278c:	2202      	moveq	r2, #2
  40278e:	2200      	movne	r2, #0
  402790:	f44f 6380 	mov.w	r3, #1024	; 0x400
  402794:	f000 b800 	b.w	402798 <setvbuf>

00402798 <setvbuf>:
  402798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40279c:	4c61      	ldr	r4, [pc, #388]	; (402924 <setvbuf+0x18c>)
  40279e:	6825      	ldr	r5, [r4, #0]
  4027a0:	b083      	sub	sp, #12
  4027a2:	4604      	mov	r4, r0
  4027a4:	460f      	mov	r7, r1
  4027a6:	4690      	mov	r8, r2
  4027a8:	461e      	mov	r6, r3
  4027aa:	b115      	cbz	r5, 4027b2 <setvbuf+0x1a>
  4027ac:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4027ae:	2b00      	cmp	r3, #0
  4027b0:	d064      	beq.n	40287c <setvbuf+0xe4>
  4027b2:	f1b8 0f02 	cmp.w	r8, #2
  4027b6:	d006      	beq.n	4027c6 <setvbuf+0x2e>
  4027b8:	f1b8 0f01 	cmp.w	r8, #1
  4027bc:	f200 809f 	bhi.w	4028fe <setvbuf+0x166>
  4027c0:	2e00      	cmp	r6, #0
  4027c2:	f2c0 809c 	blt.w	4028fe <setvbuf+0x166>
  4027c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
  4027c8:	07d8      	lsls	r0, r3, #31
  4027ca:	d534      	bpl.n	402836 <setvbuf+0x9e>
  4027cc:	4621      	mov	r1, r4
  4027ce:	4628      	mov	r0, r5
  4027d0:	f001 f902 	bl	4039d8 <_fflush_r>
  4027d4:	6b21      	ldr	r1, [r4, #48]	; 0x30
  4027d6:	b141      	cbz	r1, 4027ea <setvbuf+0x52>
  4027d8:	f104 0340 	add.w	r3, r4, #64	; 0x40
  4027dc:	4299      	cmp	r1, r3
  4027de:	d002      	beq.n	4027e6 <setvbuf+0x4e>
  4027e0:	4628      	mov	r0, r5
  4027e2:	f001 fa77 	bl	403cd4 <_free_r>
  4027e6:	2300      	movs	r3, #0
  4027e8:	6323      	str	r3, [r4, #48]	; 0x30
  4027ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4027ee:	2200      	movs	r2, #0
  4027f0:	61a2      	str	r2, [r4, #24]
  4027f2:	6062      	str	r2, [r4, #4]
  4027f4:	061a      	lsls	r2, r3, #24
  4027f6:	d43a      	bmi.n	40286e <setvbuf+0xd6>
  4027f8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  4027fc:	f023 0303 	bic.w	r3, r3, #3
  402800:	f1b8 0f02 	cmp.w	r8, #2
  402804:	81a3      	strh	r3, [r4, #12]
  402806:	d01d      	beq.n	402844 <setvbuf+0xac>
  402808:	ab01      	add	r3, sp, #4
  40280a:	466a      	mov	r2, sp
  40280c:	4621      	mov	r1, r4
  40280e:	4628      	mov	r0, r5
  402810:	f001 fcfe 	bl	404210 <__swhatbuf_r>
  402814:	89a3      	ldrh	r3, [r4, #12]
  402816:	4318      	orrs	r0, r3
  402818:	81a0      	strh	r0, [r4, #12]
  40281a:	2e00      	cmp	r6, #0
  40281c:	d132      	bne.n	402884 <setvbuf+0xec>
  40281e:	9e00      	ldr	r6, [sp, #0]
  402820:	4630      	mov	r0, r6
  402822:	f7ff fc8d 	bl	402140 <malloc>
  402826:	4607      	mov	r7, r0
  402828:	2800      	cmp	r0, #0
  40282a:	d06b      	beq.n	402904 <setvbuf+0x16c>
  40282c:	89a3      	ldrh	r3, [r4, #12]
  40282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402832:	81a3      	strh	r3, [r4, #12]
  402834:	e028      	b.n	402888 <setvbuf+0xf0>
  402836:	89a3      	ldrh	r3, [r4, #12]
  402838:	0599      	lsls	r1, r3, #22
  40283a:	d4c7      	bmi.n	4027cc <setvbuf+0x34>
  40283c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40283e:	f001 fce3 	bl	404208 <__retarget_lock_acquire_recursive>
  402842:	e7c3      	b.n	4027cc <setvbuf+0x34>
  402844:	2500      	movs	r5, #0
  402846:	6e61      	ldr	r1, [r4, #100]	; 0x64
  402848:	2600      	movs	r6, #0
  40284a:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40284e:	f043 0302 	orr.w	r3, r3, #2
  402852:	2001      	movs	r0, #1
  402854:	60a6      	str	r6, [r4, #8]
  402856:	07ce      	lsls	r6, r1, #31
  402858:	81a3      	strh	r3, [r4, #12]
  40285a:	6022      	str	r2, [r4, #0]
  40285c:	6122      	str	r2, [r4, #16]
  40285e:	6160      	str	r0, [r4, #20]
  402860:	d401      	bmi.n	402866 <setvbuf+0xce>
  402862:	0598      	lsls	r0, r3, #22
  402864:	d53e      	bpl.n	4028e4 <setvbuf+0x14c>
  402866:	4628      	mov	r0, r5
  402868:	b003      	add	sp, #12
  40286a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  40286e:	6921      	ldr	r1, [r4, #16]
  402870:	4628      	mov	r0, r5
  402872:	f001 fa2f 	bl	403cd4 <_free_r>
  402876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40287a:	e7bd      	b.n	4027f8 <setvbuf+0x60>
  40287c:	4628      	mov	r0, r5
  40287e:	f001 f903 	bl	403a88 <__sinit>
  402882:	e796      	b.n	4027b2 <setvbuf+0x1a>
  402884:	2f00      	cmp	r7, #0
  402886:	d0cb      	beq.n	402820 <setvbuf+0x88>
  402888:	6bab      	ldr	r3, [r5, #56]	; 0x38
  40288a:	2b00      	cmp	r3, #0
  40288c:	d033      	beq.n	4028f6 <setvbuf+0x15e>
  40288e:	9b00      	ldr	r3, [sp, #0]
  402890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  402894:	6027      	str	r7, [r4, #0]
  402896:	429e      	cmp	r6, r3
  402898:	bf1c      	itt	ne
  40289a:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  40289e:	81a2      	strhne	r2, [r4, #12]
  4028a0:	f1b8 0f01 	cmp.w	r8, #1
  4028a4:	bf04      	itt	eq
  4028a6:	f042 0201 	orreq.w	r2, r2, #1
  4028aa:	81a2      	strheq	r2, [r4, #12]
  4028ac:	b292      	uxth	r2, r2
  4028ae:	f012 0308 	ands.w	r3, r2, #8
  4028b2:	6127      	str	r7, [r4, #16]
  4028b4:	6166      	str	r6, [r4, #20]
  4028b6:	d00e      	beq.n	4028d6 <setvbuf+0x13e>
  4028b8:	07d1      	lsls	r1, r2, #31
  4028ba:	d51a      	bpl.n	4028f2 <setvbuf+0x15a>
  4028bc:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4028be:	4276      	negs	r6, r6
  4028c0:	2300      	movs	r3, #0
  4028c2:	f015 0501 	ands.w	r5, r5, #1
  4028c6:	61a6      	str	r6, [r4, #24]
  4028c8:	60a3      	str	r3, [r4, #8]
  4028ca:	d009      	beq.n	4028e0 <setvbuf+0x148>
  4028cc:	2500      	movs	r5, #0
  4028ce:	4628      	mov	r0, r5
  4028d0:	b003      	add	sp, #12
  4028d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4028d6:	60a3      	str	r3, [r4, #8]
  4028d8:	6e65      	ldr	r5, [r4, #100]	; 0x64
  4028da:	f015 0501 	ands.w	r5, r5, #1
  4028de:	d1f5      	bne.n	4028cc <setvbuf+0x134>
  4028e0:	0593      	lsls	r3, r2, #22
  4028e2:	d4c0      	bmi.n	402866 <setvbuf+0xce>
  4028e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
  4028e6:	f001 fc91 	bl	40420c <__retarget_lock_release_recursive>
  4028ea:	4628      	mov	r0, r5
  4028ec:	b003      	add	sp, #12
  4028ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4028f2:	60a6      	str	r6, [r4, #8]
  4028f4:	e7f0      	b.n	4028d8 <setvbuf+0x140>
  4028f6:	4628      	mov	r0, r5
  4028f8:	f001 f8c6 	bl	403a88 <__sinit>
  4028fc:	e7c7      	b.n	40288e <setvbuf+0xf6>
  4028fe:	f04f 35ff 	mov.w	r5, #4294967295
  402902:	e7b0      	b.n	402866 <setvbuf+0xce>
  402904:	f8dd 9000 	ldr.w	r9, [sp]
  402908:	45b1      	cmp	r9, r6
  40290a:	d004      	beq.n	402916 <setvbuf+0x17e>
  40290c:	4648      	mov	r0, r9
  40290e:	f7ff fc17 	bl	402140 <malloc>
  402912:	4607      	mov	r7, r0
  402914:	b920      	cbnz	r0, 402920 <setvbuf+0x188>
  402916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40291a:	f04f 35ff 	mov.w	r5, #4294967295
  40291e:	e792      	b.n	402846 <setvbuf+0xae>
  402920:	464e      	mov	r6, r9
  402922:	e783      	b.n	40282c <setvbuf+0x94>
  402924:	20400014 	.word	0x20400014
	...

00402940 <strlen>:
  402940:	f890 f000 	pld	[r0]
  402944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  402948:	f020 0107 	bic.w	r1, r0, #7
  40294c:	f06f 0c00 	mvn.w	ip, #0
  402950:	f010 0407 	ands.w	r4, r0, #7
  402954:	f891 f020 	pld	[r1, #32]
  402958:	f040 8049 	bne.w	4029ee <strlen+0xae>
  40295c:	f04f 0400 	mov.w	r4, #0
  402960:	f06f 0007 	mvn.w	r0, #7
  402964:	e9d1 2300 	ldrd	r2, r3, [r1]
  402968:	f891 f040 	pld	[r1, #64]	; 0x40
  40296c:	f100 0008 	add.w	r0, r0, #8
  402970:	fa82 f24c 	uadd8	r2, r2, ip
  402974:	faa4 f28c 	sel	r2, r4, ip
  402978:	fa83 f34c 	uadd8	r3, r3, ip
  40297c:	faa2 f38c 	sel	r3, r2, ip
  402980:	bb4b      	cbnz	r3, 4029d6 <strlen+0x96>
  402982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  402986:	fa82 f24c 	uadd8	r2, r2, ip
  40298a:	f100 0008 	add.w	r0, r0, #8
  40298e:	faa4 f28c 	sel	r2, r4, ip
  402992:	fa83 f34c 	uadd8	r3, r3, ip
  402996:	faa2 f38c 	sel	r3, r2, ip
  40299a:	b9e3      	cbnz	r3, 4029d6 <strlen+0x96>
  40299c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4029a0:	fa82 f24c 	uadd8	r2, r2, ip
  4029a4:	f100 0008 	add.w	r0, r0, #8
  4029a8:	faa4 f28c 	sel	r2, r4, ip
  4029ac:	fa83 f34c 	uadd8	r3, r3, ip
  4029b0:	faa2 f38c 	sel	r3, r2, ip
  4029b4:	b97b      	cbnz	r3, 4029d6 <strlen+0x96>
  4029b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4029ba:	f101 0120 	add.w	r1, r1, #32
  4029be:	fa82 f24c 	uadd8	r2, r2, ip
  4029c2:	f100 0008 	add.w	r0, r0, #8
  4029c6:	faa4 f28c 	sel	r2, r4, ip
  4029ca:	fa83 f34c 	uadd8	r3, r3, ip
  4029ce:	faa2 f38c 	sel	r3, r2, ip
  4029d2:	2b00      	cmp	r3, #0
  4029d4:	d0c6      	beq.n	402964 <strlen+0x24>
  4029d6:	2a00      	cmp	r2, #0
  4029d8:	bf04      	itt	eq
  4029da:	3004      	addeq	r0, #4
  4029dc:	461a      	moveq	r2, r3
  4029de:	ba12      	rev	r2, r2
  4029e0:	fab2 f282 	clz	r2, r2
  4029e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4029e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4029ec:	4770      	bx	lr
  4029ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4029f2:	f004 0503 	and.w	r5, r4, #3
  4029f6:	f1c4 0000 	rsb	r0, r4, #0
  4029fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4029fe:	f014 0f04 	tst.w	r4, #4
  402a02:	f891 f040 	pld	[r1, #64]	; 0x40
  402a06:	fa0c f505 	lsl.w	r5, ip, r5
  402a0a:	ea62 0205 	orn	r2, r2, r5
  402a0e:	bf1c      	itt	ne
  402a10:	ea63 0305 	ornne	r3, r3, r5
  402a14:	4662      	movne	r2, ip
  402a16:	f04f 0400 	mov.w	r4, #0
  402a1a:	e7a9      	b.n	402970 <strlen+0x30>

00402a1c <__sprint_r.part.0>:
  402a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402a20:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  402a22:	049c      	lsls	r4, r3, #18
  402a24:	4693      	mov	fp, r2
  402a26:	d52f      	bpl.n	402a88 <__sprint_r.part.0+0x6c>
  402a28:	6893      	ldr	r3, [r2, #8]
  402a2a:	6812      	ldr	r2, [r2, #0]
  402a2c:	b353      	cbz	r3, 402a84 <__sprint_r.part.0+0x68>
  402a2e:	460e      	mov	r6, r1
  402a30:	4607      	mov	r7, r0
  402a32:	f102 0908 	add.w	r9, r2, #8
  402a36:	e919 0420 	ldmdb	r9, {r5, sl}
  402a3a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  402a3e:	d017      	beq.n	402a70 <__sprint_r.part.0+0x54>
  402a40:	3d04      	subs	r5, #4
  402a42:	2400      	movs	r4, #0
  402a44:	e001      	b.n	402a4a <__sprint_r.part.0+0x2e>
  402a46:	45a0      	cmp	r8, r4
  402a48:	d010      	beq.n	402a6c <__sprint_r.part.0+0x50>
  402a4a:	4632      	mov	r2, r6
  402a4c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  402a50:	4638      	mov	r0, r7
  402a52:	f001 f8bb 	bl	403bcc <_fputwc_r>
  402a56:	1c43      	adds	r3, r0, #1
  402a58:	f104 0401 	add.w	r4, r4, #1
  402a5c:	d1f3      	bne.n	402a46 <__sprint_r.part.0+0x2a>
  402a5e:	2300      	movs	r3, #0
  402a60:	f8cb 3008 	str.w	r3, [fp, #8]
  402a64:	f8cb 3004 	str.w	r3, [fp, #4]
  402a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a6c:	f8db 3008 	ldr.w	r3, [fp, #8]
  402a70:	f02a 0a03 	bic.w	sl, sl, #3
  402a74:	eba3 030a 	sub.w	r3, r3, sl
  402a78:	f8cb 3008 	str.w	r3, [fp, #8]
  402a7c:	f109 0908 	add.w	r9, r9, #8
  402a80:	2b00      	cmp	r3, #0
  402a82:	d1d8      	bne.n	402a36 <__sprint_r.part.0+0x1a>
  402a84:	2000      	movs	r0, #0
  402a86:	e7ea      	b.n	402a5e <__sprint_r.part.0+0x42>
  402a88:	f001 fa0a 	bl	403ea0 <__sfvwrite_r>
  402a8c:	2300      	movs	r3, #0
  402a8e:	f8cb 3008 	str.w	r3, [fp, #8]
  402a92:	f8cb 3004 	str.w	r3, [fp, #4]
  402a96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402a9a:	bf00      	nop

00402a9c <_vfiprintf_r>:
  402a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aa0:	b0ad      	sub	sp, #180	; 0xb4
  402aa2:	461d      	mov	r5, r3
  402aa4:	468b      	mov	fp, r1
  402aa6:	4690      	mov	r8, r2
  402aa8:	9307      	str	r3, [sp, #28]
  402aaa:	9006      	str	r0, [sp, #24]
  402aac:	b118      	cbz	r0, 402ab6 <_vfiprintf_r+0x1a>
  402aae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  402ab0:	2b00      	cmp	r3, #0
  402ab2:	f000 80f3 	beq.w	402c9c <_vfiprintf_r+0x200>
  402ab6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402aba:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402abe:	07df      	lsls	r7, r3, #31
  402ac0:	b281      	uxth	r1, r0
  402ac2:	d402      	bmi.n	402aca <_vfiprintf_r+0x2e>
  402ac4:	058e      	lsls	r6, r1, #22
  402ac6:	f140 80fc 	bpl.w	402cc2 <_vfiprintf_r+0x226>
  402aca:	048c      	lsls	r4, r1, #18
  402acc:	d40a      	bmi.n	402ae4 <_vfiprintf_r+0x48>
  402ace:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402ad2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  402ad6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  402ada:	f8ab 100c 	strh.w	r1, [fp, #12]
  402ade:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  402ae2:	b289      	uxth	r1, r1
  402ae4:	0708      	lsls	r0, r1, #28
  402ae6:	f140 80b3 	bpl.w	402c50 <_vfiprintf_r+0x1b4>
  402aea:	f8db 3010 	ldr.w	r3, [fp, #16]
  402aee:	2b00      	cmp	r3, #0
  402af0:	f000 80ae 	beq.w	402c50 <_vfiprintf_r+0x1b4>
  402af4:	f001 031a 	and.w	r3, r1, #26
  402af8:	2b0a      	cmp	r3, #10
  402afa:	f000 80b5 	beq.w	402c68 <_vfiprintf_r+0x1cc>
  402afe:	2300      	movs	r3, #0
  402b00:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  402b04:	930b      	str	r3, [sp, #44]	; 0x2c
  402b06:	9311      	str	r3, [sp, #68]	; 0x44
  402b08:	9310      	str	r3, [sp, #64]	; 0x40
  402b0a:	9303      	str	r3, [sp, #12]
  402b0c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  402b10:	46ca      	mov	sl, r9
  402b12:	f8cd b010 	str.w	fp, [sp, #16]
  402b16:	f898 3000 	ldrb.w	r3, [r8]
  402b1a:	4644      	mov	r4, r8
  402b1c:	b1fb      	cbz	r3, 402b5e <_vfiprintf_r+0xc2>
  402b1e:	2b25      	cmp	r3, #37	; 0x25
  402b20:	d102      	bne.n	402b28 <_vfiprintf_r+0x8c>
  402b22:	e01c      	b.n	402b5e <_vfiprintf_r+0xc2>
  402b24:	2b25      	cmp	r3, #37	; 0x25
  402b26:	d003      	beq.n	402b30 <_vfiprintf_r+0x94>
  402b28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	d1f9      	bne.n	402b24 <_vfiprintf_r+0x88>
  402b30:	eba4 0508 	sub.w	r5, r4, r8
  402b34:	b19d      	cbz	r5, 402b5e <_vfiprintf_r+0xc2>
  402b36:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402b3a:	f8ca 8000 	str.w	r8, [sl]
  402b3e:	3301      	adds	r3, #1
  402b40:	442a      	add	r2, r5
  402b42:	2b07      	cmp	r3, #7
  402b44:	f8ca 5004 	str.w	r5, [sl, #4]
  402b48:	9211      	str	r2, [sp, #68]	; 0x44
  402b4a:	9310      	str	r3, [sp, #64]	; 0x40
  402b4c:	dd7a      	ble.n	402c44 <_vfiprintf_r+0x1a8>
  402b4e:	2a00      	cmp	r2, #0
  402b50:	f040 84b0 	bne.w	4034b4 <_vfiprintf_r+0xa18>
  402b54:	9b03      	ldr	r3, [sp, #12]
  402b56:	9210      	str	r2, [sp, #64]	; 0x40
  402b58:	442b      	add	r3, r5
  402b5a:	46ca      	mov	sl, r9
  402b5c:	9303      	str	r3, [sp, #12]
  402b5e:	7823      	ldrb	r3, [r4, #0]
  402b60:	2b00      	cmp	r3, #0
  402b62:	f000 83e0 	beq.w	403326 <_vfiprintf_r+0x88a>
  402b66:	2000      	movs	r0, #0
  402b68:	f04f 0300 	mov.w	r3, #0
  402b6c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  402b70:	f104 0801 	add.w	r8, r4, #1
  402b74:	7862      	ldrb	r2, [r4, #1]
  402b76:	4605      	mov	r5, r0
  402b78:	4606      	mov	r6, r0
  402b7a:	4603      	mov	r3, r0
  402b7c:	f04f 34ff 	mov.w	r4, #4294967295
  402b80:	f108 0801 	add.w	r8, r8, #1
  402b84:	f1a2 0120 	sub.w	r1, r2, #32
  402b88:	2958      	cmp	r1, #88	; 0x58
  402b8a:	f200 82de 	bhi.w	40314a <_vfiprintf_r+0x6ae>
  402b8e:	e8df f011 	tbh	[pc, r1, lsl #1]
  402b92:	0221      	.short	0x0221
  402b94:	02dc02dc 	.word	0x02dc02dc
  402b98:	02dc0229 	.word	0x02dc0229
  402b9c:	02dc02dc 	.word	0x02dc02dc
  402ba0:	02dc02dc 	.word	0x02dc02dc
  402ba4:	028902dc 	.word	0x028902dc
  402ba8:	02dc0295 	.word	0x02dc0295
  402bac:	02bd00a2 	.word	0x02bd00a2
  402bb0:	019f02dc 	.word	0x019f02dc
  402bb4:	01a401a4 	.word	0x01a401a4
  402bb8:	01a401a4 	.word	0x01a401a4
  402bbc:	01a401a4 	.word	0x01a401a4
  402bc0:	01a401a4 	.word	0x01a401a4
  402bc4:	02dc01a4 	.word	0x02dc01a4
  402bc8:	02dc02dc 	.word	0x02dc02dc
  402bcc:	02dc02dc 	.word	0x02dc02dc
  402bd0:	02dc02dc 	.word	0x02dc02dc
  402bd4:	02dc02dc 	.word	0x02dc02dc
  402bd8:	01b202dc 	.word	0x01b202dc
  402bdc:	02dc02dc 	.word	0x02dc02dc
  402be0:	02dc02dc 	.word	0x02dc02dc
  402be4:	02dc02dc 	.word	0x02dc02dc
  402be8:	02dc02dc 	.word	0x02dc02dc
  402bec:	02dc02dc 	.word	0x02dc02dc
  402bf0:	02dc0197 	.word	0x02dc0197
  402bf4:	02dc02dc 	.word	0x02dc02dc
  402bf8:	02dc02dc 	.word	0x02dc02dc
  402bfc:	02dc019b 	.word	0x02dc019b
  402c00:	025302dc 	.word	0x025302dc
  402c04:	02dc02dc 	.word	0x02dc02dc
  402c08:	02dc02dc 	.word	0x02dc02dc
  402c0c:	02dc02dc 	.word	0x02dc02dc
  402c10:	02dc02dc 	.word	0x02dc02dc
  402c14:	02dc02dc 	.word	0x02dc02dc
  402c18:	021b025a 	.word	0x021b025a
  402c1c:	02dc02dc 	.word	0x02dc02dc
  402c20:	026e02dc 	.word	0x026e02dc
  402c24:	02dc021b 	.word	0x02dc021b
  402c28:	027302dc 	.word	0x027302dc
  402c2c:	01f502dc 	.word	0x01f502dc
  402c30:	02090182 	.word	0x02090182
  402c34:	02dc02d7 	.word	0x02dc02d7
  402c38:	02dc029a 	.word	0x02dc029a
  402c3c:	02dc00a7 	.word	0x02dc00a7
  402c40:	022e02dc 	.word	0x022e02dc
  402c44:	f10a 0a08 	add.w	sl, sl, #8
  402c48:	9b03      	ldr	r3, [sp, #12]
  402c4a:	442b      	add	r3, r5
  402c4c:	9303      	str	r3, [sp, #12]
  402c4e:	e786      	b.n	402b5e <_vfiprintf_r+0xc2>
  402c50:	4659      	mov	r1, fp
  402c52:	9806      	ldr	r0, [sp, #24]
  402c54:	f000 fdac 	bl	4037b0 <__swsetup_r>
  402c58:	bb18      	cbnz	r0, 402ca2 <_vfiprintf_r+0x206>
  402c5a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  402c5e:	f001 031a 	and.w	r3, r1, #26
  402c62:	2b0a      	cmp	r3, #10
  402c64:	f47f af4b 	bne.w	402afe <_vfiprintf_r+0x62>
  402c68:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  402c6c:	2b00      	cmp	r3, #0
  402c6e:	f6ff af46 	blt.w	402afe <_vfiprintf_r+0x62>
  402c72:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402c76:	07db      	lsls	r3, r3, #31
  402c78:	d405      	bmi.n	402c86 <_vfiprintf_r+0x1ea>
  402c7a:	058f      	lsls	r7, r1, #22
  402c7c:	d403      	bmi.n	402c86 <_vfiprintf_r+0x1ea>
  402c7e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402c82:	f001 fac3 	bl	40420c <__retarget_lock_release_recursive>
  402c86:	462b      	mov	r3, r5
  402c88:	4642      	mov	r2, r8
  402c8a:	4659      	mov	r1, fp
  402c8c:	9806      	ldr	r0, [sp, #24]
  402c8e:	f000 fd4d 	bl	40372c <__sbprintf>
  402c92:	9003      	str	r0, [sp, #12]
  402c94:	9803      	ldr	r0, [sp, #12]
  402c96:	b02d      	add	sp, #180	; 0xb4
  402c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402c9c:	f000 fef4 	bl	403a88 <__sinit>
  402ca0:	e709      	b.n	402ab6 <_vfiprintf_r+0x1a>
  402ca2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  402ca6:	07d9      	lsls	r1, r3, #31
  402ca8:	d404      	bmi.n	402cb4 <_vfiprintf_r+0x218>
  402caa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  402cae:	059a      	lsls	r2, r3, #22
  402cb0:	f140 84aa 	bpl.w	403608 <_vfiprintf_r+0xb6c>
  402cb4:	f04f 33ff 	mov.w	r3, #4294967295
  402cb8:	9303      	str	r3, [sp, #12]
  402cba:	9803      	ldr	r0, [sp, #12]
  402cbc:	b02d      	add	sp, #180	; 0xb4
  402cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  402cc2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  402cc6:	f001 fa9f 	bl	404208 <__retarget_lock_acquire_recursive>
  402cca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  402cce:	b281      	uxth	r1, r0
  402cd0:	e6fb      	b.n	402aca <_vfiprintf_r+0x2e>
  402cd2:	4276      	negs	r6, r6
  402cd4:	9207      	str	r2, [sp, #28]
  402cd6:	f043 0304 	orr.w	r3, r3, #4
  402cda:	f898 2000 	ldrb.w	r2, [r8]
  402cde:	e74f      	b.n	402b80 <_vfiprintf_r+0xe4>
  402ce0:	9608      	str	r6, [sp, #32]
  402ce2:	069e      	lsls	r6, r3, #26
  402ce4:	f100 8450 	bmi.w	403588 <_vfiprintf_r+0xaec>
  402ce8:	9907      	ldr	r1, [sp, #28]
  402cea:	06dd      	lsls	r5, r3, #27
  402cec:	460a      	mov	r2, r1
  402cee:	f100 83ef 	bmi.w	4034d0 <_vfiprintf_r+0xa34>
  402cf2:	0658      	lsls	r0, r3, #25
  402cf4:	f140 83ec 	bpl.w	4034d0 <_vfiprintf_r+0xa34>
  402cf8:	880e      	ldrh	r6, [r1, #0]
  402cfa:	3104      	adds	r1, #4
  402cfc:	2700      	movs	r7, #0
  402cfe:	2201      	movs	r2, #1
  402d00:	9107      	str	r1, [sp, #28]
  402d02:	f04f 0100 	mov.w	r1, #0
  402d06:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  402d0a:	2500      	movs	r5, #0
  402d0c:	1c61      	adds	r1, r4, #1
  402d0e:	f000 8116 	beq.w	402f3e <_vfiprintf_r+0x4a2>
  402d12:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  402d16:	9102      	str	r1, [sp, #8]
  402d18:	ea56 0107 	orrs.w	r1, r6, r7
  402d1c:	f040 8114 	bne.w	402f48 <_vfiprintf_r+0x4ac>
  402d20:	2c00      	cmp	r4, #0
  402d22:	f040 835c 	bne.w	4033de <_vfiprintf_r+0x942>
  402d26:	2a00      	cmp	r2, #0
  402d28:	f040 83b7 	bne.w	40349a <_vfiprintf_r+0x9fe>
  402d2c:	f013 0301 	ands.w	r3, r3, #1
  402d30:	9305      	str	r3, [sp, #20]
  402d32:	f000 8457 	beq.w	4035e4 <_vfiprintf_r+0xb48>
  402d36:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  402d3a:	2330      	movs	r3, #48	; 0x30
  402d3c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  402d40:	9b05      	ldr	r3, [sp, #20]
  402d42:	42a3      	cmp	r3, r4
  402d44:	bfb8      	it	lt
  402d46:	4623      	movlt	r3, r4
  402d48:	9301      	str	r3, [sp, #4]
  402d4a:	b10d      	cbz	r5, 402d50 <_vfiprintf_r+0x2b4>
  402d4c:	3301      	adds	r3, #1
  402d4e:	9301      	str	r3, [sp, #4]
  402d50:	9b02      	ldr	r3, [sp, #8]
  402d52:	f013 0302 	ands.w	r3, r3, #2
  402d56:	9309      	str	r3, [sp, #36]	; 0x24
  402d58:	d002      	beq.n	402d60 <_vfiprintf_r+0x2c4>
  402d5a:	9b01      	ldr	r3, [sp, #4]
  402d5c:	3302      	adds	r3, #2
  402d5e:	9301      	str	r3, [sp, #4]
  402d60:	9b02      	ldr	r3, [sp, #8]
  402d62:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  402d66:	930a      	str	r3, [sp, #40]	; 0x28
  402d68:	f040 8217 	bne.w	40319a <_vfiprintf_r+0x6fe>
  402d6c:	9b08      	ldr	r3, [sp, #32]
  402d6e:	9a01      	ldr	r2, [sp, #4]
  402d70:	1a9d      	subs	r5, r3, r2
  402d72:	2d00      	cmp	r5, #0
  402d74:	f340 8211 	ble.w	40319a <_vfiprintf_r+0x6fe>
  402d78:	2d10      	cmp	r5, #16
  402d7a:	f340 8490 	ble.w	40369e <_vfiprintf_r+0xc02>
  402d7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
  402d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
  402d82:	4ec4      	ldr	r6, [pc, #784]	; (403094 <_vfiprintf_r+0x5f8>)
  402d84:	46d6      	mov	lr, sl
  402d86:	2710      	movs	r7, #16
  402d88:	46a2      	mov	sl, r4
  402d8a:	4619      	mov	r1, r3
  402d8c:	9c06      	ldr	r4, [sp, #24]
  402d8e:	e007      	b.n	402da0 <_vfiprintf_r+0x304>
  402d90:	f101 0c02 	add.w	ip, r1, #2
  402d94:	f10e 0e08 	add.w	lr, lr, #8
  402d98:	4601      	mov	r1, r0
  402d9a:	3d10      	subs	r5, #16
  402d9c:	2d10      	cmp	r5, #16
  402d9e:	dd11      	ble.n	402dc4 <_vfiprintf_r+0x328>
  402da0:	1c48      	adds	r0, r1, #1
  402da2:	3210      	adds	r2, #16
  402da4:	2807      	cmp	r0, #7
  402da6:	9211      	str	r2, [sp, #68]	; 0x44
  402da8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  402dac:	9010      	str	r0, [sp, #64]	; 0x40
  402dae:	ddef      	ble.n	402d90 <_vfiprintf_r+0x2f4>
  402db0:	2a00      	cmp	r2, #0
  402db2:	f040 81e4 	bne.w	40317e <_vfiprintf_r+0x6e2>
  402db6:	3d10      	subs	r5, #16
  402db8:	2d10      	cmp	r5, #16
  402dba:	4611      	mov	r1, r2
  402dbc:	f04f 0c01 	mov.w	ip, #1
  402dc0:	46ce      	mov	lr, r9
  402dc2:	dced      	bgt.n	402da0 <_vfiprintf_r+0x304>
  402dc4:	4654      	mov	r4, sl
  402dc6:	4661      	mov	r1, ip
  402dc8:	46f2      	mov	sl, lr
  402dca:	442a      	add	r2, r5
  402dcc:	2907      	cmp	r1, #7
  402dce:	9211      	str	r2, [sp, #68]	; 0x44
  402dd0:	f8ca 6000 	str.w	r6, [sl]
  402dd4:	f8ca 5004 	str.w	r5, [sl, #4]
  402dd8:	9110      	str	r1, [sp, #64]	; 0x40
  402dda:	f300 82ec 	bgt.w	4033b6 <_vfiprintf_r+0x91a>
  402dde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402de2:	f10a 0a08 	add.w	sl, sl, #8
  402de6:	1c48      	adds	r0, r1, #1
  402de8:	2d00      	cmp	r5, #0
  402dea:	f040 81de 	bne.w	4031aa <_vfiprintf_r+0x70e>
  402dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
  402df0:	2b00      	cmp	r3, #0
  402df2:	f000 81f8 	beq.w	4031e6 <_vfiprintf_r+0x74a>
  402df6:	3202      	adds	r2, #2
  402df8:	a90e      	add	r1, sp, #56	; 0x38
  402dfa:	2302      	movs	r3, #2
  402dfc:	2807      	cmp	r0, #7
  402dfe:	9211      	str	r2, [sp, #68]	; 0x44
  402e00:	9010      	str	r0, [sp, #64]	; 0x40
  402e02:	e88a 000a 	stmia.w	sl, {r1, r3}
  402e06:	f340 81ea 	ble.w	4031de <_vfiprintf_r+0x742>
  402e0a:	2a00      	cmp	r2, #0
  402e0c:	f040 838c 	bne.w	403528 <_vfiprintf_r+0xa8c>
  402e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  402e12:	2b80      	cmp	r3, #128	; 0x80
  402e14:	f04f 0001 	mov.w	r0, #1
  402e18:	4611      	mov	r1, r2
  402e1a:	46ca      	mov	sl, r9
  402e1c:	f040 81e7 	bne.w	4031ee <_vfiprintf_r+0x752>
  402e20:	9b08      	ldr	r3, [sp, #32]
  402e22:	9d01      	ldr	r5, [sp, #4]
  402e24:	1b5e      	subs	r6, r3, r5
  402e26:	2e00      	cmp	r6, #0
  402e28:	f340 81e1 	ble.w	4031ee <_vfiprintf_r+0x752>
  402e2c:	2e10      	cmp	r6, #16
  402e2e:	4d9a      	ldr	r5, [pc, #616]	; (403098 <_vfiprintf_r+0x5fc>)
  402e30:	f340 8450 	ble.w	4036d4 <_vfiprintf_r+0xc38>
  402e34:	46d4      	mov	ip, sl
  402e36:	2710      	movs	r7, #16
  402e38:	46a2      	mov	sl, r4
  402e3a:	9c06      	ldr	r4, [sp, #24]
  402e3c:	e007      	b.n	402e4e <_vfiprintf_r+0x3b2>
  402e3e:	f101 0e02 	add.w	lr, r1, #2
  402e42:	f10c 0c08 	add.w	ip, ip, #8
  402e46:	4601      	mov	r1, r0
  402e48:	3e10      	subs	r6, #16
  402e4a:	2e10      	cmp	r6, #16
  402e4c:	dd11      	ble.n	402e72 <_vfiprintf_r+0x3d6>
  402e4e:	1c48      	adds	r0, r1, #1
  402e50:	3210      	adds	r2, #16
  402e52:	2807      	cmp	r0, #7
  402e54:	9211      	str	r2, [sp, #68]	; 0x44
  402e56:	e88c 00a0 	stmia.w	ip, {r5, r7}
  402e5a:	9010      	str	r0, [sp, #64]	; 0x40
  402e5c:	ddef      	ble.n	402e3e <_vfiprintf_r+0x3a2>
  402e5e:	2a00      	cmp	r2, #0
  402e60:	f040 829d 	bne.w	40339e <_vfiprintf_r+0x902>
  402e64:	3e10      	subs	r6, #16
  402e66:	2e10      	cmp	r6, #16
  402e68:	f04f 0e01 	mov.w	lr, #1
  402e6c:	4611      	mov	r1, r2
  402e6e:	46cc      	mov	ip, r9
  402e70:	dced      	bgt.n	402e4e <_vfiprintf_r+0x3b2>
  402e72:	4654      	mov	r4, sl
  402e74:	46e2      	mov	sl, ip
  402e76:	4432      	add	r2, r6
  402e78:	f1be 0f07 	cmp.w	lr, #7
  402e7c:	9211      	str	r2, [sp, #68]	; 0x44
  402e7e:	e88a 0060 	stmia.w	sl, {r5, r6}
  402e82:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  402e86:	f300 8369 	bgt.w	40355c <_vfiprintf_r+0xac0>
  402e8a:	f10a 0a08 	add.w	sl, sl, #8
  402e8e:	f10e 0001 	add.w	r0, lr, #1
  402e92:	4671      	mov	r1, lr
  402e94:	e1ab      	b.n	4031ee <_vfiprintf_r+0x752>
  402e96:	9608      	str	r6, [sp, #32]
  402e98:	f013 0220 	ands.w	r2, r3, #32
  402e9c:	f040 838c 	bne.w	4035b8 <_vfiprintf_r+0xb1c>
  402ea0:	f013 0110 	ands.w	r1, r3, #16
  402ea4:	f040 831a 	bne.w	4034dc <_vfiprintf_r+0xa40>
  402ea8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  402eac:	f000 8316 	beq.w	4034dc <_vfiprintf_r+0xa40>
  402eb0:	9807      	ldr	r0, [sp, #28]
  402eb2:	460a      	mov	r2, r1
  402eb4:	4601      	mov	r1, r0
  402eb6:	3104      	adds	r1, #4
  402eb8:	8806      	ldrh	r6, [r0, #0]
  402eba:	9107      	str	r1, [sp, #28]
  402ebc:	2700      	movs	r7, #0
  402ebe:	e720      	b.n	402d02 <_vfiprintf_r+0x266>
  402ec0:	9608      	str	r6, [sp, #32]
  402ec2:	f043 0310 	orr.w	r3, r3, #16
  402ec6:	e7e7      	b.n	402e98 <_vfiprintf_r+0x3fc>
  402ec8:	9608      	str	r6, [sp, #32]
  402eca:	f043 0310 	orr.w	r3, r3, #16
  402ece:	e708      	b.n	402ce2 <_vfiprintf_r+0x246>
  402ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  402ed4:	f898 2000 	ldrb.w	r2, [r8]
  402ed8:	e652      	b.n	402b80 <_vfiprintf_r+0xe4>
  402eda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402ede:	2600      	movs	r6, #0
  402ee0:	f818 2b01 	ldrb.w	r2, [r8], #1
  402ee4:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  402ee8:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  402eec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  402ef0:	2909      	cmp	r1, #9
  402ef2:	d9f5      	bls.n	402ee0 <_vfiprintf_r+0x444>
  402ef4:	e646      	b.n	402b84 <_vfiprintf_r+0xe8>
  402ef6:	9608      	str	r6, [sp, #32]
  402ef8:	2800      	cmp	r0, #0
  402efa:	f040 8408 	bne.w	40370e <_vfiprintf_r+0xc72>
  402efe:	f043 0310 	orr.w	r3, r3, #16
  402f02:	069e      	lsls	r6, r3, #26
  402f04:	f100 834c 	bmi.w	4035a0 <_vfiprintf_r+0xb04>
  402f08:	06dd      	lsls	r5, r3, #27
  402f0a:	f100 82f3 	bmi.w	4034f4 <_vfiprintf_r+0xa58>
  402f0e:	0658      	lsls	r0, r3, #25
  402f10:	f140 82f0 	bpl.w	4034f4 <_vfiprintf_r+0xa58>
  402f14:	9d07      	ldr	r5, [sp, #28]
  402f16:	f9b5 6000 	ldrsh.w	r6, [r5]
  402f1a:	462a      	mov	r2, r5
  402f1c:	17f7      	asrs	r7, r6, #31
  402f1e:	3204      	adds	r2, #4
  402f20:	4630      	mov	r0, r6
  402f22:	4639      	mov	r1, r7
  402f24:	9207      	str	r2, [sp, #28]
  402f26:	2800      	cmp	r0, #0
  402f28:	f171 0200 	sbcs.w	r2, r1, #0
  402f2c:	f2c0 835d 	blt.w	4035ea <_vfiprintf_r+0xb4e>
  402f30:	1c61      	adds	r1, r4, #1
  402f32:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  402f36:	f04f 0201 	mov.w	r2, #1
  402f3a:	f47f aeea 	bne.w	402d12 <_vfiprintf_r+0x276>
  402f3e:	ea56 0107 	orrs.w	r1, r6, r7
  402f42:	f000 824d 	beq.w	4033e0 <_vfiprintf_r+0x944>
  402f46:	9302      	str	r3, [sp, #8]
  402f48:	2a01      	cmp	r2, #1
  402f4a:	f000 828c 	beq.w	403466 <_vfiprintf_r+0x9ca>
  402f4e:	2a02      	cmp	r2, #2
  402f50:	f040 825c 	bne.w	40340c <_vfiprintf_r+0x970>
  402f54:	980b      	ldr	r0, [sp, #44]	; 0x2c
  402f56:	46cb      	mov	fp, r9
  402f58:	0933      	lsrs	r3, r6, #4
  402f5a:	f006 010f 	and.w	r1, r6, #15
  402f5e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  402f62:	093a      	lsrs	r2, r7, #4
  402f64:	461e      	mov	r6, r3
  402f66:	4617      	mov	r7, r2
  402f68:	5c43      	ldrb	r3, [r0, r1]
  402f6a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  402f6e:	ea56 0307 	orrs.w	r3, r6, r7
  402f72:	d1f1      	bne.n	402f58 <_vfiprintf_r+0x4bc>
  402f74:	eba9 030b 	sub.w	r3, r9, fp
  402f78:	9305      	str	r3, [sp, #20]
  402f7a:	e6e1      	b.n	402d40 <_vfiprintf_r+0x2a4>
  402f7c:	2800      	cmp	r0, #0
  402f7e:	f040 83c0 	bne.w	403702 <_vfiprintf_r+0xc66>
  402f82:	0699      	lsls	r1, r3, #26
  402f84:	f100 8367 	bmi.w	403656 <_vfiprintf_r+0xbba>
  402f88:	06da      	lsls	r2, r3, #27
  402f8a:	f100 80f1 	bmi.w	403170 <_vfiprintf_r+0x6d4>
  402f8e:	065b      	lsls	r3, r3, #25
  402f90:	f140 80ee 	bpl.w	403170 <_vfiprintf_r+0x6d4>
  402f94:	9a07      	ldr	r2, [sp, #28]
  402f96:	6813      	ldr	r3, [r2, #0]
  402f98:	3204      	adds	r2, #4
  402f9a:	9207      	str	r2, [sp, #28]
  402f9c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  402fa0:	801a      	strh	r2, [r3, #0]
  402fa2:	e5b8      	b.n	402b16 <_vfiprintf_r+0x7a>
  402fa4:	9807      	ldr	r0, [sp, #28]
  402fa6:	4a3d      	ldr	r2, [pc, #244]	; (40309c <_vfiprintf_r+0x600>)
  402fa8:	9608      	str	r6, [sp, #32]
  402faa:	920b      	str	r2, [sp, #44]	; 0x2c
  402fac:	6806      	ldr	r6, [r0, #0]
  402fae:	2278      	movs	r2, #120	; 0x78
  402fb0:	2130      	movs	r1, #48	; 0x30
  402fb2:	3004      	adds	r0, #4
  402fb4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  402fb8:	f043 0302 	orr.w	r3, r3, #2
  402fbc:	9007      	str	r0, [sp, #28]
  402fbe:	2700      	movs	r7, #0
  402fc0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  402fc4:	2202      	movs	r2, #2
  402fc6:	e69c      	b.n	402d02 <_vfiprintf_r+0x266>
  402fc8:	9608      	str	r6, [sp, #32]
  402fca:	2800      	cmp	r0, #0
  402fcc:	d099      	beq.n	402f02 <_vfiprintf_r+0x466>
  402fce:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  402fd2:	e796      	b.n	402f02 <_vfiprintf_r+0x466>
  402fd4:	f898 2000 	ldrb.w	r2, [r8]
  402fd8:	2d00      	cmp	r5, #0
  402fda:	f47f add1 	bne.w	402b80 <_vfiprintf_r+0xe4>
  402fde:	2001      	movs	r0, #1
  402fe0:	2520      	movs	r5, #32
  402fe2:	e5cd      	b.n	402b80 <_vfiprintf_r+0xe4>
  402fe4:	f043 0301 	orr.w	r3, r3, #1
  402fe8:	f898 2000 	ldrb.w	r2, [r8]
  402fec:	e5c8      	b.n	402b80 <_vfiprintf_r+0xe4>
  402fee:	9608      	str	r6, [sp, #32]
  402ff0:	2800      	cmp	r0, #0
  402ff2:	f040 8393 	bne.w	40371c <_vfiprintf_r+0xc80>
  402ff6:	4929      	ldr	r1, [pc, #164]	; (40309c <_vfiprintf_r+0x600>)
  402ff8:	910b      	str	r1, [sp, #44]	; 0x2c
  402ffa:	069f      	lsls	r7, r3, #26
  402ffc:	f100 82e8 	bmi.w	4035d0 <_vfiprintf_r+0xb34>
  403000:	9807      	ldr	r0, [sp, #28]
  403002:	06de      	lsls	r6, r3, #27
  403004:	4601      	mov	r1, r0
  403006:	f100 8270 	bmi.w	4034ea <_vfiprintf_r+0xa4e>
  40300a:	065d      	lsls	r5, r3, #25
  40300c:	f140 826d 	bpl.w	4034ea <_vfiprintf_r+0xa4e>
  403010:	3104      	adds	r1, #4
  403012:	8806      	ldrh	r6, [r0, #0]
  403014:	9107      	str	r1, [sp, #28]
  403016:	2700      	movs	r7, #0
  403018:	07d8      	lsls	r0, r3, #31
  40301a:	f140 8222 	bpl.w	403462 <_vfiprintf_r+0x9c6>
  40301e:	ea56 0107 	orrs.w	r1, r6, r7
  403022:	f000 821e 	beq.w	403462 <_vfiprintf_r+0x9c6>
  403026:	2130      	movs	r1, #48	; 0x30
  403028:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40302c:	f043 0302 	orr.w	r3, r3, #2
  403030:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  403034:	2202      	movs	r2, #2
  403036:	e664      	b.n	402d02 <_vfiprintf_r+0x266>
  403038:	9608      	str	r6, [sp, #32]
  40303a:	2800      	cmp	r0, #0
  40303c:	f040 836b 	bne.w	403716 <_vfiprintf_r+0xc7a>
  403040:	4917      	ldr	r1, [pc, #92]	; (4030a0 <_vfiprintf_r+0x604>)
  403042:	910b      	str	r1, [sp, #44]	; 0x2c
  403044:	e7d9      	b.n	402ffa <_vfiprintf_r+0x55e>
  403046:	9907      	ldr	r1, [sp, #28]
  403048:	9608      	str	r6, [sp, #32]
  40304a:	680a      	ldr	r2, [r1, #0]
  40304c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  403050:	f04f 0000 	mov.w	r0, #0
  403054:	460a      	mov	r2, r1
  403056:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40305a:	3204      	adds	r2, #4
  40305c:	2001      	movs	r0, #1
  40305e:	9001      	str	r0, [sp, #4]
  403060:	9207      	str	r2, [sp, #28]
  403062:	9005      	str	r0, [sp, #20]
  403064:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  403068:	9302      	str	r3, [sp, #8]
  40306a:	2400      	movs	r4, #0
  40306c:	e670      	b.n	402d50 <_vfiprintf_r+0x2b4>
  40306e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403072:	f898 2000 	ldrb.w	r2, [r8]
  403076:	e583      	b.n	402b80 <_vfiprintf_r+0xe4>
  403078:	f898 2000 	ldrb.w	r2, [r8]
  40307c:	2a6c      	cmp	r2, #108	; 0x6c
  40307e:	bf03      	ittte	eq
  403080:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  403084:	f043 0320 	orreq.w	r3, r3, #32
  403088:	f108 0801 	addeq.w	r8, r8, #1
  40308c:	f043 0310 	orrne.w	r3, r3, #16
  403090:	e576      	b.n	402b80 <_vfiprintf_r+0xe4>
  403092:	bf00      	nop
  403094:	00405104 	.word	0x00405104
  403098:	00405114 	.word	0x00405114
  40309c:	004050e8 	.word	0x004050e8
  4030a0:	004050d4 	.word	0x004050d4
  4030a4:	9907      	ldr	r1, [sp, #28]
  4030a6:	680e      	ldr	r6, [r1, #0]
  4030a8:	460a      	mov	r2, r1
  4030aa:	2e00      	cmp	r6, #0
  4030ac:	f102 0204 	add.w	r2, r2, #4
  4030b0:	f6ff ae0f 	blt.w	402cd2 <_vfiprintf_r+0x236>
  4030b4:	9207      	str	r2, [sp, #28]
  4030b6:	f898 2000 	ldrb.w	r2, [r8]
  4030ba:	e561      	b.n	402b80 <_vfiprintf_r+0xe4>
  4030bc:	f898 2000 	ldrb.w	r2, [r8]
  4030c0:	2001      	movs	r0, #1
  4030c2:	252b      	movs	r5, #43	; 0x2b
  4030c4:	e55c      	b.n	402b80 <_vfiprintf_r+0xe4>
  4030c6:	9907      	ldr	r1, [sp, #28]
  4030c8:	9608      	str	r6, [sp, #32]
  4030ca:	f8d1 b000 	ldr.w	fp, [r1]
  4030ce:	f04f 0200 	mov.w	r2, #0
  4030d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4030d6:	1d0e      	adds	r6, r1, #4
  4030d8:	f1bb 0f00 	cmp.w	fp, #0
  4030dc:	f000 82e5 	beq.w	4036aa <_vfiprintf_r+0xc0e>
  4030e0:	1c67      	adds	r7, r4, #1
  4030e2:	f000 82c4 	beq.w	40366e <_vfiprintf_r+0xbd2>
  4030e6:	4622      	mov	r2, r4
  4030e8:	2100      	movs	r1, #0
  4030ea:	4658      	mov	r0, fp
  4030ec:	9301      	str	r3, [sp, #4]
  4030ee:	f001 f91f 	bl	404330 <memchr>
  4030f2:	9b01      	ldr	r3, [sp, #4]
  4030f4:	2800      	cmp	r0, #0
  4030f6:	f000 82e5 	beq.w	4036c4 <_vfiprintf_r+0xc28>
  4030fa:	eba0 020b 	sub.w	r2, r0, fp
  4030fe:	9205      	str	r2, [sp, #20]
  403100:	9607      	str	r6, [sp, #28]
  403102:	9302      	str	r3, [sp, #8]
  403104:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403108:	2400      	movs	r4, #0
  40310a:	e619      	b.n	402d40 <_vfiprintf_r+0x2a4>
  40310c:	f898 2000 	ldrb.w	r2, [r8]
  403110:	2a2a      	cmp	r2, #42	; 0x2a
  403112:	f108 0701 	add.w	r7, r8, #1
  403116:	f000 82e9 	beq.w	4036ec <_vfiprintf_r+0xc50>
  40311a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40311e:	2909      	cmp	r1, #9
  403120:	46b8      	mov	r8, r7
  403122:	f04f 0400 	mov.w	r4, #0
  403126:	f63f ad2d 	bhi.w	402b84 <_vfiprintf_r+0xe8>
  40312a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40312e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403132:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  403136:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40313a:	2909      	cmp	r1, #9
  40313c:	d9f5      	bls.n	40312a <_vfiprintf_r+0x68e>
  40313e:	e521      	b.n	402b84 <_vfiprintf_r+0xe8>
  403140:	f043 0320 	orr.w	r3, r3, #32
  403144:	f898 2000 	ldrb.w	r2, [r8]
  403148:	e51a      	b.n	402b80 <_vfiprintf_r+0xe4>
  40314a:	9608      	str	r6, [sp, #32]
  40314c:	2800      	cmp	r0, #0
  40314e:	f040 82db 	bne.w	403708 <_vfiprintf_r+0xc6c>
  403152:	2a00      	cmp	r2, #0
  403154:	f000 80e7 	beq.w	403326 <_vfiprintf_r+0x88a>
  403158:	2101      	movs	r1, #1
  40315a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40315e:	f04f 0200 	mov.w	r2, #0
  403162:	9101      	str	r1, [sp, #4]
  403164:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  403168:	9105      	str	r1, [sp, #20]
  40316a:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  40316e:	e77b      	b.n	403068 <_vfiprintf_r+0x5cc>
  403170:	9a07      	ldr	r2, [sp, #28]
  403172:	6813      	ldr	r3, [r2, #0]
  403174:	3204      	adds	r2, #4
  403176:	9207      	str	r2, [sp, #28]
  403178:	9a03      	ldr	r2, [sp, #12]
  40317a:	601a      	str	r2, [r3, #0]
  40317c:	e4cb      	b.n	402b16 <_vfiprintf_r+0x7a>
  40317e:	aa0f      	add	r2, sp, #60	; 0x3c
  403180:	9904      	ldr	r1, [sp, #16]
  403182:	4620      	mov	r0, r4
  403184:	f7ff fc4a 	bl	402a1c <__sprint_r.part.0>
  403188:	2800      	cmp	r0, #0
  40318a:	f040 8139 	bne.w	403400 <_vfiprintf_r+0x964>
  40318e:	9910      	ldr	r1, [sp, #64]	; 0x40
  403190:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403192:	f101 0c01 	add.w	ip, r1, #1
  403196:	46ce      	mov	lr, r9
  403198:	e5ff      	b.n	402d9a <_vfiprintf_r+0x2fe>
  40319a:	9910      	ldr	r1, [sp, #64]	; 0x40
  40319c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40319e:	1c48      	adds	r0, r1, #1
  4031a0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4031a4:	2d00      	cmp	r5, #0
  4031a6:	f43f ae22 	beq.w	402dee <_vfiprintf_r+0x352>
  4031aa:	3201      	adds	r2, #1
  4031ac:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4031b0:	2101      	movs	r1, #1
  4031b2:	2807      	cmp	r0, #7
  4031b4:	9211      	str	r2, [sp, #68]	; 0x44
  4031b6:	9010      	str	r0, [sp, #64]	; 0x40
  4031b8:	f8ca 5000 	str.w	r5, [sl]
  4031bc:	f8ca 1004 	str.w	r1, [sl, #4]
  4031c0:	f340 8108 	ble.w	4033d4 <_vfiprintf_r+0x938>
  4031c4:	2a00      	cmp	r2, #0
  4031c6:	f040 81bc 	bne.w	403542 <_vfiprintf_r+0xaa6>
  4031ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4031cc:	2b00      	cmp	r3, #0
  4031ce:	f43f ae1f 	beq.w	402e10 <_vfiprintf_r+0x374>
  4031d2:	ab0e      	add	r3, sp, #56	; 0x38
  4031d4:	2202      	movs	r2, #2
  4031d6:	4608      	mov	r0, r1
  4031d8:	931c      	str	r3, [sp, #112]	; 0x70
  4031da:	921d      	str	r2, [sp, #116]	; 0x74
  4031dc:	46ca      	mov	sl, r9
  4031de:	4601      	mov	r1, r0
  4031e0:	f10a 0a08 	add.w	sl, sl, #8
  4031e4:	3001      	adds	r0, #1
  4031e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4031e8:	2b80      	cmp	r3, #128	; 0x80
  4031ea:	f43f ae19 	beq.w	402e20 <_vfiprintf_r+0x384>
  4031ee:	9b05      	ldr	r3, [sp, #20]
  4031f0:	1ae4      	subs	r4, r4, r3
  4031f2:	2c00      	cmp	r4, #0
  4031f4:	dd2e      	ble.n	403254 <_vfiprintf_r+0x7b8>
  4031f6:	2c10      	cmp	r4, #16
  4031f8:	4db3      	ldr	r5, [pc, #716]	; (4034c8 <_vfiprintf_r+0xa2c>)
  4031fa:	dd1e      	ble.n	40323a <_vfiprintf_r+0x79e>
  4031fc:	46d6      	mov	lr, sl
  4031fe:	2610      	movs	r6, #16
  403200:	9f06      	ldr	r7, [sp, #24]
  403202:	f8dd a010 	ldr.w	sl, [sp, #16]
  403206:	e006      	b.n	403216 <_vfiprintf_r+0x77a>
  403208:	1c88      	adds	r0, r1, #2
  40320a:	f10e 0e08 	add.w	lr, lr, #8
  40320e:	4619      	mov	r1, r3
  403210:	3c10      	subs	r4, #16
  403212:	2c10      	cmp	r4, #16
  403214:	dd10      	ble.n	403238 <_vfiprintf_r+0x79c>
  403216:	1c4b      	adds	r3, r1, #1
  403218:	3210      	adds	r2, #16
  40321a:	2b07      	cmp	r3, #7
  40321c:	9211      	str	r2, [sp, #68]	; 0x44
  40321e:	e88e 0060 	stmia.w	lr, {r5, r6}
  403222:	9310      	str	r3, [sp, #64]	; 0x40
  403224:	ddf0      	ble.n	403208 <_vfiprintf_r+0x76c>
  403226:	2a00      	cmp	r2, #0
  403228:	d165      	bne.n	4032f6 <_vfiprintf_r+0x85a>
  40322a:	3c10      	subs	r4, #16
  40322c:	2c10      	cmp	r4, #16
  40322e:	f04f 0001 	mov.w	r0, #1
  403232:	4611      	mov	r1, r2
  403234:	46ce      	mov	lr, r9
  403236:	dcee      	bgt.n	403216 <_vfiprintf_r+0x77a>
  403238:	46f2      	mov	sl, lr
  40323a:	4422      	add	r2, r4
  40323c:	2807      	cmp	r0, #7
  40323e:	9211      	str	r2, [sp, #68]	; 0x44
  403240:	f8ca 5000 	str.w	r5, [sl]
  403244:	f8ca 4004 	str.w	r4, [sl, #4]
  403248:	9010      	str	r0, [sp, #64]	; 0x40
  40324a:	f300 8085 	bgt.w	403358 <_vfiprintf_r+0x8bc>
  40324e:	f10a 0a08 	add.w	sl, sl, #8
  403252:	3001      	adds	r0, #1
  403254:	9905      	ldr	r1, [sp, #20]
  403256:	f8ca b000 	str.w	fp, [sl]
  40325a:	440a      	add	r2, r1
  40325c:	2807      	cmp	r0, #7
  40325e:	9211      	str	r2, [sp, #68]	; 0x44
  403260:	f8ca 1004 	str.w	r1, [sl, #4]
  403264:	9010      	str	r0, [sp, #64]	; 0x40
  403266:	f340 8082 	ble.w	40336e <_vfiprintf_r+0x8d2>
  40326a:	2a00      	cmp	r2, #0
  40326c:	f040 8118 	bne.w	4034a0 <_vfiprintf_r+0xa04>
  403270:	9b02      	ldr	r3, [sp, #8]
  403272:	9210      	str	r2, [sp, #64]	; 0x40
  403274:	0758      	lsls	r0, r3, #29
  403276:	d535      	bpl.n	4032e4 <_vfiprintf_r+0x848>
  403278:	9b08      	ldr	r3, [sp, #32]
  40327a:	9901      	ldr	r1, [sp, #4]
  40327c:	1a5c      	subs	r4, r3, r1
  40327e:	2c00      	cmp	r4, #0
  403280:	f340 80e7 	ble.w	403452 <_vfiprintf_r+0x9b6>
  403284:	46ca      	mov	sl, r9
  403286:	2c10      	cmp	r4, #16
  403288:	f340 8218 	ble.w	4036bc <_vfiprintf_r+0xc20>
  40328c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40328e:	4e8f      	ldr	r6, [pc, #572]	; (4034cc <_vfiprintf_r+0xa30>)
  403290:	9f06      	ldr	r7, [sp, #24]
  403292:	f8dd b010 	ldr.w	fp, [sp, #16]
  403296:	2510      	movs	r5, #16
  403298:	e006      	b.n	4032a8 <_vfiprintf_r+0x80c>
  40329a:	1c88      	adds	r0, r1, #2
  40329c:	f10a 0a08 	add.w	sl, sl, #8
  4032a0:	4619      	mov	r1, r3
  4032a2:	3c10      	subs	r4, #16
  4032a4:	2c10      	cmp	r4, #16
  4032a6:	dd11      	ble.n	4032cc <_vfiprintf_r+0x830>
  4032a8:	1c4b      	adds	r3, r1, #1
  4032aa:	3210      	adds	r2, #16
  4032ac:	2b07      	cmp	r3, #7
  4032ae:	9211      	str	r2, [sp, #68]	; 0x44
  4032b0:	f8ca 6000 	str.w	r6, [sl]
  4032b4:	f8ca 5004 	str.w	r5, [sl, #4]
  4032b8:	9310      	str	r3, [sp, #64]	; 0x40
  4032ba:	ddee      	ble.n	40329a <_vfiprintf_r+0x7fe>
  4032bc:	bb42      	cbnz	r2, 403310 <_vfiprintf_r+0x874>
  4032be:	3c10      	subs	r4, #16
  4032c0:	2c10      	cmp	r4, #16
  4032c2:	f04f 0001 	mov.w	r0, #1
  4032c6:	4611      	mov	r1, r2
  4032c8:	46ca      	mov	sl, r9
  4032ca:	dced      	bgt.n	4032a8 <_vfiprintf_r+0x80c>
  4032cc:	4422      	add	r2, r4
  4032ce:	2807      	cmp	r0, #7
  4032d0:	9211      	str	r2, [sp, #68]	; 0x44
  4032d2:	f8ca 6000 	str.w	r6, [sl]
  4032d6:	f8ca 4004 	str.w	r4, [sl, #4]
  4032da:	9010      	str	r0, [sp, #64]	; 0x40
  4032dc:	dd51      	ble.n	403382 <_vfiprintf_r+0x8e6>
  4032de:	2a00      	cmp	r2, #0
  4032e0:	f040 819b 	bne.w	40361a <_vfiprintf_r+0xb7e>
  4032e4:	9b03      	ldr	r3, [sp, #12]
  4032e6:	9a08      	ldr	r2, [sp, #32]
  4032e8:	9901      	ldr	r1, [sp, #4]
  4032ea:	428a      	cmp	r2, r1
  4032ec:	bfac      	ite	ge
  4032ee:	189b      	addge	r3, r3, r2
  4032f0:	185b      	addlt	r3, r3, r1
  4032f2:	9303      	str	r3, [sp, #12]
  4032f4:	e04e      	b.n	403394 <_vfiprintf_r+0x8f8>
  4032f6:	aa0f      	add	r2, sp, #60	; 0x3c
  4032f8:	4651      	mov	r1, sl
  4032fa:	4638      	mov	r0, r7
  4032fc:	f7ff fb8e 	bl	402a1c <__sprint_r.part.0>
  403300:	2800      	cmp	r0, #0
  403302:	f040 813f 	bne.w	403584 <_vfiprintf_r+0xae8>
  403306:	9910      	ldr	r1, [sp, #64]	; 0x40
  403308:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40330a:	1c48      	adds	r0, r1, #1
  40330c:	46ce      	mov	lr, r9
  40330e:	e77f      	b.n	403210 <_vfiprintf_r+0x774>
  403310:	aa0f      	add	r2, sp, #60	; 0x3c
  403312:	4659      	mov	r1, fp
  403314:	4638      	mov	r0, r7
  403316:	f7ff fb81 	bl	402a1c <__sprint_r.part.0>
  40331a:	b960      	cbnz	r0, 403336 <_vfiprintf_r+0x89a>
  40331c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40331e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403320:	1c48      	adds	r0, r1, #1
  403322:	46ca      	mov	sl, r9
  403324:	e7bd      	b.n	4032a2 <_vfiprintf_r+0x806>
  403326:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403328:	f8dd b010 	ldr.w	fp, [sp, #16]
  40332c:	2b00      	cmp	r3, #0
  40332e:	f040 81d4 	bne.w	4036da <_vfiprintf_r+0xc3e>
  403332:	2300      	movs	r3, #0
  403334:	9310      	str	r3, [sp, #64]	; 0x40
  403336:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40333a:	f013 0f01 	tst.w	r3, #1
  40333e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403342:	d102      	bne.n	40334a <_vfiprintf_r+0x8ae>
  403344:	059a      	lsls	r2, r3, #22
  403346:	f140 80de 	bpl.w	403506 <_vfiprintf_r+0xa6a>
  40334a:	065b      	lsls	r3, r3, #25
  40334c:	f53f acb2 	bmi.w	402cb4 <_vfiprintf_r+0x218>
  403350:	9803      	ldr	r0, [sp, #12]
  403352:	b02d      	add	sp, #180	; 0xb4
  403354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403358:	2a00      	cmp	r2, #0
  40335a:	f040 8106 	bne.w	40356a <_vfiprintf_r+0xace>
  40335e:	9a05      	ldr	r2, [sp, #20]
  403360:	921d      	str	r2, [sp, #116]	; 0x74
  403362:	2301      	movs	r3, #1
  403364:	9211      	str	r2, [sp, #68]	; 0x44
  403366:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  40336a:	9310      	str	r3, [sp, #64]	; 0x40
  40336c:	46ca      	mov	sl, r9
  40336e:	f10a 0a08 	add.w	sl, sl, #8
  403372:	9b02      	ldr	r3, [sp, #8]
  403374:	0759      	lsls	r1, r3, #29
  403376:	d504      	bpl.n	403382 <_vfiprintf_r+0x8e6>
  403378:	9b08      	ldr	r3, [sp, #32]
  40337a:	9901      	ldr	r1, [sp, #4]
  40337c:	1a5c      	subs	r4, r3, r1
  40337e:	2c00      	cmp	r4, #0
  403380:	dc81      	bgt.n	403286 <_vfiprintf_r+0x7ea>
  403382:	9b03      	ldr	r3, [sp, #12]
  403384:	9908      	ldr	r1, [sp, #32]
  403386:	9801      	ldr	r0, [sp, #4]
  403388:	4281      	cmp	r1, r0
  40338a:	bfac      	ite	ge
  40338c:	185b      	addge	r3, r3, r1
  40338e:	181b      	addlt	r3, r3, r0
  403390:	9303      	str	r3, [sp, #12]
  403392:	bb72      	cbnz	r2, 4033f2 <_vfiprintf_r+0x956>
  403394:	2300      	movs	r3, #0
  403396:	9310      	str	r3, [sp, #64]	; 0x40
  403398:	46ca      	mov	sl, r9
  40339a:	f7ff bbbc 	b.w	402b16 <_vfiprintf_r+0x7a>
  40339e:	aa0f      	add	r2, sp, #60	; 0x3c
  4033a0:	9904      	ldr	r1, [sp, #16]
  4033a2:	4620      	mov	r0, r4
  4033a4:	f7ff fb3a 	bl	402a1c <__sprint_r.part.0>
  4033a8:	bb50      	cbnz	r0, 403400 <_vfiprintf_r+0x964>
  4033aa:	9910      	ldr	r1, [sp, #64]	; 0x40
  4033ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4033ae:	f101 0e01 	add.w	lr, r1, #1
  4033b2:	46cc      	mov	ip, r9
  4033b4:	e548      	b.n	402e48 <_vfiprintf_r+0x3ac>
  4033b6:	2a00      	cmp	r2, #0
  4033b8:	f040 8140 	bne.w	40363c <_vfiprintf_r+0xba0>
  4033bc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  4033c0:	2900      	cmp	r1, #0
  4033c2:	f000 811b 	beq.w	4035fc <_vfiprintf_r+0xb60>
  4033c6:	2201      	movs	r2, #1
  4033c8:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  4033cc:	4610      	mov	r0, r2
  4033ce:	921d      	str	r2, [sp, #116]	; 0x74
  4033d0:	911c      	str	r1, [sp, #112]	; 0x70
  4033d2:	46ca      	mov	sl, r9
  4033d4:	4601      	mov	r1, r0
  4033d6:	f10a 0a08 	add.w	sl, sl, #8
  4033da:	3001      	adds	r0, #1
  4033dc:	e507      	b.n	402dee <_vfiprintf_r+0x352>
  4033de:	9b02      	ldr	r3, [sp, #8]
  4033e0:	2a01      	cmp	r2, #1
  4033e2:	f000 8098 	beq.w	403516 <_vfiprintf_r+0xa7a>
  4033e6:	2a02      	cmp	r2, #2
  4033e8:	d10d      	bne.n	403406 <_vfiprintf_r+0x96a>
  4033ea:	9302      	str	r3, [sp, #8]
  4033ec:	2600      	movs	r6, #0
  4033ee:	2700      	movs	r7, #0
  4033f0:	e5b0      	b.n	402f54 <_vfiprintf_r+0x4b8>
  4033f2:	aa0f      	add	r2, sp, #60	; 0x3c
  4033f4:	9904      	ldr	r1, [sp, #16]
  4033f6:	9806      	ldr	r0, [sp, #24]
  4033f8:	f7ff fb10 	bl	402a1c <__sprint_r.part.0>
  4033fc:	2800      	cmp	r0, #0
  4033fe:	d0c9      	beq.n	403394 <_vfiprintf_r+0x8f8>
  403400:	f8dd b010 	ldr.w	fp, [sp, #16]
  403404:	e797      	b.n	403336 <_vfiprintf_r+0x89a>
  403406:	9302      	str	r3, [sp, #8]
  403408:	2600      	movs	r6, #0
  40340a:	2700      	movs	r7, #0
  40340c:	4649      	mov	r1, r9
  40340e:	e000      	b.n	403412 <_vfiprintf_r+0x976>
  403410:	4659      	mov	r1, fp
  403412:	08f2      	lsrs	r2, r6, #3
  403414:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  403418:	08f8      	lsrs	r0, r7, #3
  40341a:	f006 0307 	and.w	r3, r6, #7
  40341e:	4607      	mov	r7, r0
  403420:	4616      	mov	r6, r2
  403422:	3330      	adds	r3, #48	; 0x30
  403424:	ea56 0207 	orrs.w	r2, r6, r7
  403428:	f801 3c01 	strb.w	r3, [r1, #-1]
  40342c:	f101 3bff 	add.w	fp, r1, #4294967295
  403430:	d1ee      	bne.n	403410 <_vfiprintf_r+0x974>
  403432:	9a02      	ldr	r2, [sp, #8]
  403434:	07d6      	lsls	r6, r2, #31
  403436:	f57f ad9d 	bpl.w	402f74 <_vfiprintf_r+0x4d8>
  40343a:	2b30      	cmp	r3, #48	; 0x30
  40343c:	f43f ad9a 	beq.w	402f74 <_vfiprintf_r+0x4d8>
  403440:	3902      	subs	r1, #2
  403442:	2330      	movs	r3, #48	; 0x30
  403444:	f80b 3c01 	strb.w	r3, [fp, #-1]
  403448:	eba9 0301 	sub.w	r3, r9, r1
  40344c:	9305      	str	r3, [sp, #20]
  40344e:	468b      	mov	fp, r1
  403450:	e476      	b.n	402d40 <_vfiprintf_r+0x2a4>
  403452:	9b03      	ldr	r3, [sp, #12]
  403454:	9a08      	ldr	r2, [sp, #32]
  403456:	428a      	cmp	r2, r1
  403458:	bfac      	ite	ge
  40345a:	189b      	addge	r3, r3, r2
  40345c:	185b      	addlt	r3, r3, r1
  40345e:	9303      	str	r3, [sp, #12]
  403460:	e798      	b.n	403394 <_vfiprintf_r+0x8f8>
  403462:	2202      	movs	r2, #2
  403464:	e44d      	b.n	402d02 <_vfiprintf_r+0x266>
  403466:	2f00      	cmp	r7, #0
  403468:	bf08      	it	eq
  40346a:	2e0a      	cmpeq	r6, #10
  40346c:	d352      	bcc.n	403514 <_vfiprintf_r+0xa78>
  40346e:	46cb      	mov	fp, r9
  403470:	4630      	mov	r0, r6
  403472:	4639      	mov	r1, r7
  403474:	220a      	movs	r2, #10
  403476:	2300      	movs	r3, #0
  403478:	f001 fc60 	bl	404d3c <__aeabi_uldivmod>
  40347c:	3230      	adds	r2, #48	; 0x30
  40347e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  403482:	4630      	mov	r0, r6
  403484:	4639      	mov	r1, r7
  403486:	2300      	movs	r3, #0
  403488:	220a      	movs	r2, #10
  40348a:	f001 fc57 	bl	404d3c <__aeabi_uldivmod>
  40348e:	4606      	mov	r6, r0
  403490:	460f      	mov	r7, r1
  403492:	ea56 0307 	orrs.w	r3, r6, r7
  403496:	d1eb      	bne.n	403470 <_vfiprintf_r+0x9d4>
  403498:	e56c      	b.n	402f74 <_vfiprintf_r+0x4d8>
  40349a:	9405      	str	r4, [sp, #20]
  40349c:	46cb      	mov	fp, r9
  40349e:	e44f      	b.n	402d40 <_vfiprintf_r+0x2a4>
  4034a0:	aa0f      	add	r2, sp, #60	; 0x3c
  4034a2:	9904      	ldr	r1, [sp, #16]
  4034a4:	9806      	ldr	r0, [sp, #24]
  4034a6:	f7ff fab9 	bl	402a1c <__sprint_r.part.0>
  4034aa:	2800      	cmp	r0, #0
  4034ac:	d1a8      	bne.n	403400 <_vfiprintf_r+0x964>
  4034ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4034b0:	46ca      	mov	sl, r9
  4034b2:	e75e      	b.n	403372 <_vfiprintf_r+0x8d6>
  4034b4:	aa0f      	add	r2, sp, #60	; 0x3c
  4034b6:	9904      	ldr	r1, [sp, #16]
  4034b8:	9806      	ldr	r0, [sp, #24]
  4034ba:	f7ff faaf 	bl	402a1c <__sprint_r.part.0>
  4034be:	2800      	cmp	r0, #0
  4034c0:	d19e      	bne.n	403400 <_vfiprintf_r+0x964>
  4034c2:	46ca      	mov	sl, r9
  4034c4:	f7ff bbc0 	b.w	402c48 <_vfiprintf_r+0x1ac>
  4034c8:	00405114 	.word	0x00405114
  4034cc:	00405104 	.word	0x00405104
  4034d0:	3104      	adds	r1, #4
  4034d2:	6816      	ldr	r6, [r2, #0]
  4034d4:	9107      	str	r1, [sp, #28]
  4034d6:	2201      	movs	r2, #1
  4034d8:	2700      	movs	r7, #0
  4034da:	e412      	b.n	402d02 <_vfiprintf_r+0x266>
  4034dc:	9807      	ldr	r0, [sp, #28]
  4034de:	4601      	mov	r1, r0
  4034e0:	3104      	adds	r1, #4
  4034e2:	6806      	ldr	r6, [r0, #0]
  4034e4:	9107      	str	r1, [sp, #28]
  4034e6:	2700      	movs	r7, #0
  4034e8:	e40b      	b.n	402d02 <_vfiprintf_r+0x266>
  4034ea:	680e      	ldr	r6, [r1, #0]
  4034ec:	3104      	adds	r1, #4
  4034ee:	9107      	str	r1, [sp, #28]
  4034f0:	2700      	movs	r7, #0
  4034f2:	e591      	b.n	403018 <_vfiprintf_r+0x57c>
  4034f4:	9907      	ldr	r1, [sp, #28]
  4034f6:	680e      	ldr	r6, [r1, #0]
  4034f8:	460a      	mov	r2, r1
  4034fa:	17f7      	asrs	r7, r6, #31
  4034fc:	3204      	adds	r2, #4
  4034fe:	9207      	str	r2, [sp, #28]
  403500:	4630      	mov	r0, r6
  403502:	4639      	mov	r1, r7
  403504:	e50f      	b.n	402f26 <_vfiprintf_r+0x48a>
  403506:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40350a:	f000 fe7f 	bl	40420c <__retarget_lock_release_recursive>
  40350e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  403512:	e71a      	b.n	40334a <_vfiprintf_r+0x8ae>
  403514:	9b02      	ldr	r3, [sp, #8]
  403516:	9302      	str	r3, [sp, #8]
  403518:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40351c:	3630      	adds	r6, #48	; 0x30
  40351e:	2301      	movs	r3, #1
  403520:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  403524:	9305      	str	r3, [sp, #20]
  403526:	e40b      	b.n	402d40 <_vfiprintf_r+0x2a4>
  403528:	aa0f      	add	r2, sp, #60	; 0x3c
  40352a:	9904      	ldr	r1, [sp, #16]
  40352c:	9806      	ldr	r0, [sp, #24]
  40352e:	f7ff fa75 	bl	402a1c <__sprint_r.part.0>
  403532:	2800      	cmp	r0, #0
  403534:	f47f af64 	bne.w	403400 <_vfiprintf_r+0x964>
  403538:	9910      	ldr	r1, [sp, #64]	; 0x40
  40353a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40353c:	1c48      	adds	r0, r1, #1
  40353e:	46ca      	mov	sl, r9
  403540:	e651      	b.n	4031e6 <_vfiprintf_r+0x74a>
  403542:	aa0f      	add	r2, sp, #60	; 0x3c
  403544:	9904      	ldr	r1, [sp, #16]
  403546:	9806      	ldr	r0, [sp, #24]
  403548:	f7ff fa68 	bl	402a1c <__sprint_r.part.0>
  40354c:	2800      	cmp	r0, #0
  40354e:	f47f af57 	bne.w	403400 <_vfiprintf_r+0x964>
  403552:	9910      	ldr	r1, [sp, #64]	; 0x40
  403554:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403556:	1c48      	adds	r0, r1, #1
  403558:	46ca      	mov	sl, r9
  40355a:	e448      	b.n	402dee <_vfiprintf_r+0x352>
  40355c:	2a00      	cmp	r2, #0
  40355e:	f040 8091 	bne.w	403684 <_vfiprintf_r+0xbe8>
  403562:	2001      	movs	r0, #1
  403564:	4611      	mov	r1, r2
  403566:	46ca      	mov	sl, r9
  403568:	e641      	b.n	4031ee <_vfiprintf_r+0x752>
  40356a:	aa0f      	add	r2, sp, #60	; 0x3c
  40356c:	9904      	ldr	r1, [sp, #16]
  40356e:	9806      	ldr	r0, [sp, #24]
  403570:	f7ff fa54 	bl	402a1c <__sprint_r.part.0>
  403574:	2800      	cmp	r0, #0
  403576:	f47f af43 	bne.w	403400 <_vfiprintf_r+0x964>
  40357a:	9810      	ldr	r0, [sp, #64]	; 0x40
  40357c:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40357e:	3001      	adds	r0, #1
  403580:	46ca      	mov	sl, r9
  403582:	e667      	b.n	403254 <_vfiprintf_r+0x7b8>
  403584:	46d3      	mov	fp, sl
  403586:	e6d6      	b.n	403336 <_vfiprintf_r+0x89a>
  403588:	9e07      	ldr	r6, [sp, #28]
  40358a:	3607      	adds	r6, #7
  40358c:	f026 0207 	bic.w	r2, r6, #7
  403590:	f102 0108 	add.w	r1, r2, #8
  403594:	e9d2 6700 	ldrd	r6, r7, [r2]
  403598:	9107      	str	r1, [sp, #28]
  40359a:	2201      	movs	r2, #1
  40359c:	f7ff bbb1 	b.w	402d02 <_vfiprintf_r+0x266>
  4035a0:	9e07      	ldr	r6, [sp, #28]
  4035a2:	3607      	adds	r6, #7
  4035a4:	f026 0607 	bic.w	r6, r6, #7
  4035a8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4035ac:	f106 0208 	add.w	r2, r6, #8
  4035b0:	9207      	str	r2, [sp, #28]
  4035b2:	4606      	mov	r6, r0
  4035b4:	460f      	mov	r7, r1
  4035b6:	e4b6      	b.n	402f26 <_vfiprintf_r+0x48a>
  4035b8:	9e07      	ldr	r6, [sp, #28]
  4035ba:	3607      	adds	r6, #7
  4035bc:	f026 0207 	bic.w	r2, r6, #7
  4035c0:	f102 0108 	add.w	r1, r2, #8
  4035c4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4035c8:	9107      	str	r1, [sp, #28]
  4035ca:	2200      	movs	r2, #0
  4035cc:	f7ff bb99 	b.w	402d02 <_vfiprintf_r+0x266>
  4035d0:	9e07      	ldr	r6, [sp, #28]
  4035d2:	3607      	adds	r6, #7
  4035d4:	f026 0107 	bic.w	r1, r6, #7
  4035d8:	f101 0008 	add.w	r0, r1, #8
  4035dc:	9007      	str	r0, [sp, #28]
  4035de:	e9d1 6700 	ldrd	r6, r7, [r1]
  4035e2:	e519      	b.n	403018 <_vfiprintf_r+0x57c>
  4035e4:	46cb      	mov	fp, r9
  4035e6:	f7ff bbab 	b.w	402d40 <_vfiprintf_r+0x2a4>
  4035ea:	252d      	movs	r5, #45	; 0x2d
  4035ec:	4276      	negs	r6, r6
  4035ee:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  4035f2:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  4035f6:	2201      	movs	r2, #1
  4035f8:	f7ff bb88 	b.w	402d0c <_vfiprintf_r+0x270>
  4035fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4035fe:	b9b3      	cbnz	r3, 40362e <_vfiprintf_r+0xb92>
  403600:	4611      	mov	r1, r2
  403602:	2001      	movs	r0, #1
  403604:	46ca      	mov	sl, r9
  403606:	e5f2      	b.n	4031ee <_vfiprintf_r+0x752>
  403608:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40360c:	f000 fdfe 	bl	40420c <__retarget_lock_release_recursive>
  403610:	f04f 33ff 	mov.w	r3, #4294967295
  403614:	9303      	str	r3, [sp, #12]
  403616:	f7ff bb50 	b.w	402cba <_vfiprintf_r+0x21e>
  40361a:	aa0f      	add	r2, sp, #60	; 0x3c
  40361c:	9904      	ldr	r1, [sp, #16]
  40361e:	9806      	ldr	r0, [sp, #24]
  403620:	f7ff f9fc 	bl	402a1c <__sprint_r.part.0>
  403624:	2800      	cmp	r0, #0
  403626:	f47f aeeb 	bne.w	403400 <_vfiprintf_r+0x964>
  40362a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40362c:	e6a9      	b.n	403382 <_vfiprintf_r+0x8e6>
  40362e:	ab0e      	add	r3, sp, #56	; 0x38
  403630:	2202      	movs	r2, #2
  403632:	931c      	str	r3, [sp, #112]	; 0x70
  403634:	921d      	str	r2, [sp, #116]	; 0x74
  403636:	2001      	movs	r0, #1
  403638:	46ca      	mov	sl, r9
  40363a:	e5d0      	b.n	4031de <_vfiprintf_r+0x742>
  40363c:	aa0f      	add	r2, sp, #60	; 0x3c
  40363e:	9904      	ldr	r1, [sp, #16]
  403640:	9806      	ldr	r0, [sp, #24]
  403642:	f7ff f9eb 	bl	402a1c <__sprint_r.part.0>
  403646:	2800      	cmp	r0, #0
  403648:	f47f aeda 	bne.w	403400 <_vfiprintf_r+0x964>
  40364c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40364e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403650:	1c48      	adds	r0, r1, #1
  403652:	46ca      	mov	sl, r9
  403654:	e5a4      	b.n	4031a0 <_vfiprintf_r+0x704>
  403656:	9a07      	ldr	r2, [sp, #28]
  403658:	9903      	ldr	r1, [sp, #12]
  40365a:	6813      	ldr	r3, [r2, #0]
  40365c:	17cd      	asrs	r5, r1, #31
  40365e:	4608      	mov	r0, r1
  403660:	3204      	adds	r2, #4
  403662:	4629      	mov	r1, r5
  403664:	9207      	str	r2, [sp, #28]
  403666:	e9c3 0100 	strd	r0, r1, [r3]
  40366a:	f7ff ba54 	b.w	402b16 <_vfiprintf_r+0x7a>
  40366e:	4658      	mov	r0, fp
  403670:	9607      	str	r6, [sp, #28]
  403672:	9302      	str	r3, [sp, #8]
  403674:	f7ff f964 	bl	402940 <strlen>
  403678:	2400      	movs	r4, #0
  40367a:	9005      	str	r0, [sp, #20]
  40367c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  403680:	f7ff bb5e 	b.w	402d40 <_vfiprintf_r+0x2a4>
  403684:	aa0f      	add	r2, sp, #60	; 0x3c
  403686:	9904      	ldr	r1, [sp, #16]
  403688:	9806      	ldr	r0, [sp, #24]
  40368a:	f7ff f9c7 	bl	402a1c <__sprint_r.part.0>
  40368e:	2800      	cmp	r0, #0
  403690:	f47f aeb6 	bne.w	403400 <_vfiprintf_r+0x964>
  403694:	9910      	ldr	r1, [sp, #64]	; 0x40
  403696:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403698:	1c48      	adds	r0, r1, #1
  40369a:	46ca      	mov	sl, r9
  40369c:	e5a7      	b.n	4031ee <_vfiprintf_r+0x752>
  40369e:	9910      	ldr	r1, [sp, #64]	; 0x40
  4036a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4036a2:	4e20      	ldr	r6, [pc, #128]	; (403724 <_vfiprintf_r+0xc88>)
  4036a4:	3101      	adds	r1, #1
  4036a6:	f7ff bb90 	b.w	402dca <_vfiprintf_r+0x32e>
  4036aa:	2c06      	cmp	r4, #6
  4036ac:	bf28      	it	cs
  4036ae:	2406      	movcs	r4, #6
  4036b0:	9405      	str	r4, [sp, #20]
  4036b2:	9607      	str	r6, [sp, #28]
  4036b4:	9401      	str	r4, [sp, #4]
  4036b6:	f8df b070 	ldr.w	fp, [pc, #112]	; 403728 <_vfiprintf_r+0xc8c>
  4036ba:	e4d5      	b.n	403068 <_vfiprintf_r+0x5cc>
  4036bc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4036be:	4e19      	ldr	r6, [pc, #100]	; (403724 <_vfiprintf_r+0xc88>)
  4036c0:	3001      	adds	r0, #1
  4036c2:	e603      	b.n	4032cc <_vfiprintf_r+0x830>
  4036c4:	9405      	str	r4, [sp, #20]
  4036c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4036ca:	9607      	str	r6, [sp, #28]
  4036cc:	9302      	str	r3, [sp, #8]
  4036ce:	4604      	mov	r4, r0
  4036d0:	f7ff bb36 	b.w	402d40 <_vfiprintf_r+0x2a4>
  4036d4:	4686      	mov	lr, r0
  4036d6:	f7ff bbce 	b.w	402e76 <_vfiprintf_r+0x3da>
  4036da:	9806      	ldr	r0, [sp, #24]
  4036dc:	aa0f      	add	r2, sp, #60	; 0x3c
  4036de:	4659      	mov	r1, fp
  4036e0:	f7ff f99c 	bl	402a1c <__sprint_r.part.0>
  4036e4:	2800      	cmp	r0, #0
  4036e6:	f43f ae24 	beq.w	403332 <_vfiprintf_r+0x896>
  4036ea:	e624      	b.n	403336 <_vfiprintf_r+0x89a>
  4036ec:	9907      	ldr	r1, [sp, #28]
  4036ee:	f898 2001 	ldrb.w	r2, [r8, #1]
  4036f2:	680c      	ldr	r4, [r1, #0]
  4036f4:	3104      	adds	r1, #4
  4036f6:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  4036fa:	46b8      	mov	r8, r7
  4036fc:	9107      	str	r1, [sp, #28]
  4036fe:	f7ff ba3f 	b.w	402b80 <_vfiprintf_r+0xe4>
  403702:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403706:	e43c      	b.n	402f82 <_vfiprintf_r+0x4e6>
  403708:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40370c:	e521      	b.n	403152 <_vfiprintf_r+0x6b6>
  40370e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403712:	f7ff bbf4 	b.w	402efe <_vfiprintf_r+0x462>
  403716:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40371a:	e491      	b.n	403040 <_vfiprintf_r+0x5a4>
  40371c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  403720:	e469      	b.n	402ff6 <_vfiprintf_r+0x55a>
  403722:	bf00      	nop
  403724:	00405104 	.word	0x00405104
  403728:	004050fc 	.word	0x004050fc

0040372c <__sbprintf>:
  40372c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403730:	460c      	mov	r4, r1
  403732:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  403736:	8989      	ldrh	r1, [r1, #12]
  403738:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40373a:	89e5      	ldrh	r5, [r4, #14]
  40373c:	9619      	str	r6, [sp, #100]	; 0x64
  40373e:	f021 0102 	bic.w	r1, r1, #2
  403742:	4606      	mov	r6, r0
  403744:	69e0      	ldr	r0, [r4, #28]
  403746:	f8ad 100c 	strh.w	r1, [sp, #12]
  40374a:	4617      	mov	r7, r2
  40374c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  403750:	6a62      	ldr	r2, [r4, #36]	; 0x24
  403752:	f8ad 500e 	strh.w	r5, [sp, #14]
  403756:	4698      	mov	r8, r3
  403758:	ad1a      	add	r5, sp, #104	; 0x68
  40375a:	2300      	movs	r3, #0
  40375c:	9007      	str	r0, [sp, #28]
  40375e:	a816      	add	r0, sp, #88	; 0x58
  403760:	9209      	str	r2, [sp, #36]	; 0x24
  403762:	9306      	str	r3, [sp, #24]
  403764:	9500      	str	r5, [sp, #0]
  403766:	9504      	str	r5, [sp, #16]
  403768:	9102      	str	r1, [sp, #8]
  40376a:	9105      	str	r1, [sp, #20]
  40376c:	f000 fd48 	bl	404200 <__retarget_lock_init_recursive>
  403770:	4643      	mov	r3, r8
  403772:	463a      	mov	r2, r7
  403774:	4669      	mov	r1, sp
  403776:	4630      	mov	r0, r6
  403778:	f7ff f990 	bl	402a9c <_vfiprintf_r>
  40377c:	1e05      	subs	r5, r0, #0
  40377e:	db07      	blt.n	403790 <__sbprintf+0x64>
  403780:	4630      	mov	r0, r6
  403782:	4669      	mov	r1, sp
  403784:	f000 f928 	bl	4039d8 <_fflush_r>
  403788:	2800      	cmp	r0, #0
  40378a:	bf18      	it	ne
  40378c:	f04f 35ff 	movne.w	r5, #4294967295
  403790:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  403794:	065b      	lsls	r3, r3, #25
  403796:	d503      	bpl.n	4037a0 <__sbprintf+0x74>
  403798:	89a3      	ldrh	r3, [r4, #12]
  40379a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40379e:	81a3      	strh	r3, [r4, #12]
  4037a0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4037a2:	f000 fd2f 	bl	404204 <__retarget_lock_close_recursive>
  4037a6:	4628      	mov	r0, r5
  4037a8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4037ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004037b0 <__swsetup_r>:
  4037b0:	b538      	push	{r3, r4, r5, lr}
  4037b2:	4b30      	ldr	r3, [pc, #192]	; (403874 <__swsetup_r+0xc4>)
  4037b4:	681b      	ldr	r3, [r3, #0]
  4037b6:	4605      	mov	r5, r0
  4037b8:	460c      	mov	r4, r1
  4037ba:	b113      	cbz	r3, 4037c2 <__swsetup_r+0x12>
  4037bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4037be:	2a00      	cmp	r2, #0
  4037c0:	d038      	beq.n	403834 <__swsetup_r+0x84>
  4037c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4037c6:	b293      	uxth	r3, r2
  4037c8:	0718      	lsls	r0, r3, #28
  4037ca:	d50c      	bpl.n	4037e6 <__swsetup_r+0x36>
  4037cc:	6920      	ldr	r0, [r4, #16]
  4037ce:	b1a8      	cbz	r0, 4037fc <__swsetup_r+0x4c>
  4037d0:	f013 0201 	ands.w	r2, r3, #1
  4037d4:	d01e      	beq.n	403814 <__swsetup_r+0x64>
  4037d6:	6963      	ldr	r3, [r4, #20]
  4037d8:	2200      	movs	r2, #0
  4037da:	425b      	negs	r3, r3
  4037dc:	61a3      	str	r3, [r4, #24]
  4037de:	60a2      	str	r2, [r4, #8]
  4037e0:	b1f0      	cbz	r0, 403820 <__swsetup_r+0x70>
  4037e2:	2000      	movs	r0, #0
  4037e4:	bd38      	pop	{r3, r4, r5, pc}
  4037e6:	06d9      	lsls	r1, r3, #27
  4037e8:	d53c      	bpl.n	403864 <__swsetup_r+0xb4>
  4037ea:	0758      	lsls	r0, r3, #29
  4037ec:	d426      	bmi.n	40383c <__swsetup_r+0x8c>
  4037ee:	6920      	ldr	r0, [r4, #16]
  4037f0:	f042 0308 	orr.w	r3, r2, #8
  4037f4:	81a3      	strh	r3, [r4, #12]
  4037f6:	b29b      	uxth	r3, r3
  4037f8:	2800      	cmp	r0, #0
  4037fa:	d1e9      	bne.n	4037d0 <__swsetup_r+0x20>
  4037fc:	f403 7220 	and.w	r2, r3, #640	; 0x280
  403800:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  403804:	d0e4      	beq.n	4037d0 <__swsetup_r+0x20>
  403806:	4628      	mov	r0, r5
  403808:	4621      	mov	r1, r4
  40380a:	f000 fd2f 	bl	40426c <__smakebuf_r>
  40380e:	89a3      	ldrh	r3, [r4, #12]
  403810:	6920      	ldr	r0, [r4, #16]
  403812:	e7dd      	b.n	4037d0 <__swsetup_r+0x20>
  403814:	0799      	lsls	r1, r3, #30
  403816:	bf58      	it	pl
  403818:	6962      	ldrpl	r2, [r4, #20]
  40381a:	60a2      	str	r2, [r4, #8]
  40381c:	2800      	cmp	r0, #0
  40381e:	d1e0      	bne.n	4037e2 <__swsetup_r+0x32>
  403820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403824:	061a      	lsls	r2, r3, #24
  403826:	d5dd      	bpl.n	4037e4 <__swsetup_r+0x34>
  403828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40382c:	81a3      	strh	r3, [r4, #12]
  40382e:	f04f 30ff 	mov.w	r0, #4294967295
  403832:	bd38      	pop	{r3, r4, r5, pc}
  403834:	4618      	mov	r0, r3
  403836:	f000 f927 	bl	403a88 <__sinit>
  40383a:	e7c2      	b.n	4037c2 <__swsetup_r+0x12>
  40383c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40383e:	b151      	cbz	r1, 403856 <__swsetup_r+0xa6>
  403840:	f104 0340 	add.w	r3, r4, #64	; 0x40
  403844:	4299      	cmp	r1, r3
  403846:	d004      	beq.n	403852 <__swsetup_r+0xa2>
  403848:	4628      	mov	r0, r5
  40384a:	f000 fa43 	bl	403cd4 <_free_r>
  40384e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  403852:	2300      	movs	r3, #0
  403854:	6323      	str	r3, [r4, #48]	; 0x30
  403856:	2300      	movs	r3, #0
  403858:	6920      	ldr	r0, [r4, #16]
  40385a:	6063      	str	r3, [r4, #4]
  40385c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  403860:	6020      	str	r0, [r4, #0]
  403862:	e7c5      	b.n	4037f0 <__swsetup_r+0x40>
  403864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  403868:	2309      	movs	r3, #9
  40386a:	602b      	str	r3, [r5, #0]
  40386c:	f04f 30ff 	mov.w	r0, #4294967295
  403870:	81a2      	strh	r2, [r4, #12]
  403872:	bd38      	pop	{r3, r4, r5, pc}
  403874:	20400014 	.word	0x20400014

00403878 <register_fini>:
  403878:	4b02      	ldr	r3, [pc, #8]	; (403884 <register_fini+0xc>)
  40387a:	b113      	cbz	r3, 403882 <register_fini+0xa>
  40387c:	4802      	ldr	r0, [pc, #8]	; (403888 <register_fini+0x10>)
  40387e:	f000 b805 	b.w	40388c <atexit>
  403882:	4770      	bx	lr
  403884:	00000000 	.word	0x00000000
  403888:	00403af9 	.word	0x00403af9

0040388c <atexit>:
  40388c:	2300      	movs	r3, #0
  40388e:	4601      	mov	r1, r0
  403890:	461a      	mov	r2, r3
  403892:	4618      	mov	r0, r3
  403894:	f001 b92a 	b.w	404aec <__register_exitproc>

00403898 <__sflush_r>:
  403898:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  40389c:	b29a      	uxth	r2, r3
  40389e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4038a2:	460d      	mov	r5, r1
  4038a4:	0711      	lsls	r1, r2, #28
  4038a6:	4680      	mov	r8, r0
  4038a8:	d43a      	bmi.n	403920 <__sflush_r+0x88>
  4038aa:	686a      	ldr	r2, [r5, #4]
  4038ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4038b0:	2a00      	cmp	r2, #0
  4038b2:	81ab      	strh	r3, [r5, #12]
  4038b4:	dd6f      	ble.n	403996 <__sflush_r+0xfe>
  4038b6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4038b8:	2c00      	cmp	r4, #0
  4038ba:	d049      	beq.n	403950 <__sflush_r+0xb8>
  4038bc:	2200      	movs	r2, #0
  4038be:	b29b      	uxth	r3, r3
  4038c0:	f8d8 6000 	ldr.w	r6, [r8]
  4038c4:	f8c8 2000 	str.w	r2, [r8]
  4038c8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  4038cc:	d067      	beq.n	40399e <__sflush_r+0x106>
  4038ce:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  4038d0:	075f      	lsls	r7, r3, #29
  4038d2:	d505      	bpl.n	4038e0 <__sflush_r+0x48>
  4038d4:	6869      	ldr	r1, [r5, #4]
  4038d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  4038d8:	1a52      	subs	r2, r2, r1
  4038da:	b10b      	cbz	r3, 4038e0 <__sflush_r+0x48>
  4038dc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  4038de:	1ad2      	subs	r2, r2, r3
  4038e0:	2300      	movs	r3, #0
  4038e2:	69e9      	ldr	r1, [r5, #28]
  4038e4:	4640      	mov	r0, r8
  4038e6:	47a0      	blx	r4
  4038e8:	1c44      	adds	r4, r0, #1
  4038ea:	d03c      	beq.n	403966 <__sflush_r+0xce>
  4038ec:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  4038f0:	692a      	ldr	r2, [r5, #16]
  4038f2:	602a      	str	r2, [r5, #0]
  4038f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4038f8:	2200      	movs	r2, #0
  4038fa:	81ab      	strh	r3, [r5, #12]
  4038fc:	04db      	lsls	r3, r3, #19
  4038fe:	606a      	str	r2, [r5, #4]
  403900:	d447      	bmi.n	403992 <__sflush_r+0xfa>
  403902:	6b29      	ldr	r1, [r5, #48]	; 0x30
  403904:	f8c8 6000 	str.w	r6, [r8]
  403908:	b311      	cbz	r1, 403950 <__sflush_r+0xb8>
  40390a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  40390e:	4299      	cmp	r1, r3
  403910:	d002      	beq.n	403918 <__sflush_r+0x80>
  403912:	4640      	mov	r0, r8
  403914:	f000 f9de 	bl	403cd4 <_free_r>
  403918:	2000      	movs	r0, #0
  40391a:	6328      	str	r0, [r5, #48]	; 0x30
  40391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403920:	692e      	ldr	r6, [r5, #16]
  403922:	b1ae      	cbz	r6, 403950 <__sflush_r+0xb8>
  403924:	682c      	ldr	r4, [r5, #0]
  403926:	602e      	str	r6, [r5, #0]
  403928:	0791      	lsls	r1, r2, #30
  40392a:	bf0c      	ite	eq
  40392c:	696b      	ldreq	r3, [r5, #20]
  40392e:	2300      	movne	r3, #0
  403930:	1ba4      	subs	r4, r4, r6
  403932:	60ab      	str	r3, [r5, #8]
  403934:	e00a      	b.n	40394c <__sflush_r+0xb4>
  403936:	4623      	mov	r3, r4
  403938:	4632      	mov	r2, r6
  40393a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  40393c:	69e9      	ldr	r1, [r5, #28]
  40393e:	4640      	mov	r0, r8
  403940:	47b8      	blx	r7
  403942:	2800      	cmp	r0, #0
  403944:	eba4 0400 	sub.w	r4, r4, r0
  403948:	4406      	add	r6, r0
  40394a:	dd04      	ble.n	403956 <__sflush_r+0xbe>
  40394c:	2c00      	cmp	r4, #0
  40394e:	dcf2      	bgt.n	403936 <__sflush_r+0x9e>
  403950:	2000      	movs	r0, #0
  403952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403956:	89ab      	ldrh	r3, [r5, #12]
  403958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40395c:	81ab      	strh	r3, [r5, #12]
  40395e:	f04f 30ff 	mov.w	r0, #4294967295
  403962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  403966:	f8d8 4000 	ldr.w	r4, [r8]
  40396a:	2c1d      	cmp	r4, #29
  40396c:	d8f3      	bhi.n	403956 <__sflush_r+0xbe>
  40396e:	4b19      	ldr	r3, [pc, #100]	; (4039d4 <__sflush_r+0x13c>)
  403970:	40e3      	lsrs	r3, r4
  403972:	43db      	mvns	r3, r3
  403974:	f013 0301 	ands.w	r3, r3, #1
  403978:	d1ed      	bne.n	403956 <__sflush_r+0xbe>
  40397a:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  40397e:	606b      	str	r3, [r5, #4]
  403980:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  403984:	6929      	ldr	r1, [r5, #16]
  403986:	81ab      	strh	r3, [r5, #12]
  403988:	04da      	lsls	r2, r3, #19
  40398a:	6029      	str	r1, [r5, #0]
  40398c:	d5b9      	bpl.n	403902 <__sflush_r+0x6a>
  40398e:	2c00      	cmp	r4, #0
  403990:	d1b7      	bne.n	403902 <__sflush_r+0x6a>
  403992:	6528      	str	r0, [r5, #80]	; 0x50
  403994:	e7b5      	b.n	403902 <__sflush_r+0x6a>
  403996:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  403998:	2a00      	cmp	r2, #0
  40399a:	dc8c      	bgt.n	4038b6 <__sflush_r+0x1e>
  40399c:	e7d8      	b.n	403950 <__sflush_r+0xb8>
  40399e:	2301      	movs	r3, #1
  4039a0:	69e9      	ldr	r1, [r5, #28]
  4039a2:	4640      	mov	r0, r8
  4039a4:	47a0      	blx	r4
  4039a6:	1c43      	adds	r3, r0, #1
  4039a8:	4602      	mov	r2, r0
  4039aa:	d002      	beq.n	4039b2 <__sflush_r+0x11a>
  4039ac:	89ab      	ldrh	r3, [r5, #12]
  4039ae:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4039b0:	e78e      	b.n	4038d0 <__sflush_r+0x38>
  4039b2:	f8d8 3000 	ldr.w	r3, [r8]
  4039b6:	2b00      	cmp	r3, #0
  4039b8:	d0f8      	beq.n	4039ac <__sflush_r+0x114>
  4039ba:	2b1d      	cmp	r3, #29
  4039bc:	d001      	beq.n	4039c2 <__sflush_r+0x12a>
  4039be:	2b16      	cmp	r3, #22
  4039c0:	d102      	bne.n	4039c8 <__sflush_r+0x130>
  4039c2:	f8c8 6000 	str.w	r6, [r8]
  4039c6:	e7c3      	b.n	403950 <__sflush_r+0xb8>
  4039c8:	89ab      	ldrh	r3, [r5, #12]
  4039ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4039ce:	81ab      	strh	r3, [r5, #12]
  4039d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4039d4:	20400001 	.word	0x20400001

004039d8 <_fflush_r>:
  4039d8:	b538      	push	{r3, r4, r5, lr}
  4039da:	460d      	mov	r5, r1
  4039dc:	4604      	mov	r4, r0
  4039de:	b108      	cbz	r0, 4039e4 <_fflush_r+0xc>
  4039e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4039e2:	b1bb      	cbz	r3, 403a14 <_fflush_r+0x3c>
  4039e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  4039e8:	b188      	cbz	r0, 403a0e <_fflush_r+0x36>
  4039ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4039ec:	07db      	lsls	r3, r3, #31
  4039ee:	d401      	bmi.n	4039f4 <_fflush_r+0x1c>
  4039f0:	0581      	lsls	r1, r0, #22
  4039f2:	d517      	bpl.n	403a24 <_fflush_r+0x4c>
  4039f4:	4620      	mov	r0, r4
  4039f6:	4629      	mov	r1, r5
  4039f8:	f7ff ff4e 	bl	403898 <__sflush_r>
  4039fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  4039fe:	07da      	lsls	r2, r3, #31
  403a00:	4604      	mov	r4, r0
  403a02:	d402      	bmi.n	403a0a <_fflush_r+0x32>
  403a04:	89ab      	ldrh	r3, [r5, #12]
  403a06:	059b      	lsls	r3, r3, #22
  403a08:	d507      	bpl.n	403a1a <_fflush_r+0x42>
  403a0a:	4620      	mov	r0, r4
  403a0c:	bd38      	pop	{r3, r4, r5, pc}
  403a0e:	4604      	mov	r4, r0
  403a10:	4620      	mov	r0, r4
  403a12:	bd38      	pop	{r3, r4, r5, pc}
  403a14:	f000 f838 	bl	403a88 <__sinit>
  403a18:	e7e4      	b.n	4039e4 <_fflush_r+0xc>
  403a1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403a1c:	f000 fbf6 	bl	40420c <__retarget_lock_release_recursive>
  403a20:	4620      	mov	r0, r4
  403a22:	bd38      	pop	{r3, r4, r5, pc}
  403a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
  403a26:	f000 fbef 	bl	404208 <__retarget_lock_acquire_recursive>
  403a2a:	e7e3      	b.n	4039f4 <_fflush_r+0x1c>

00403a2c <_cleanup_r>:
  403a2c:	4901      	ldr	r1, [pc, #4]	; (403a34 <_cleanup_r+0x8>)
  403a2e:	f000 bbaf 	b.w	404190 <_fwalk_reent>
  403a32:	bf00      	nop
  403a34:	00404bd5 	.word	0x00404bd5

00403a38 <std.isra.0>:
  403a38:	b510      	push	{r4, lr}
  403a3a:	2300      	movs	r3, #0
  403a3c:	4604      	mov	r4, r0
  403a3e:	8181      	strh	r1, [r0, #12]
  403a40:	81c2      	strh	r2, [r0, #14]
  403a42:	6003      	str	r3, [r0, #0]
  403a44:	6043      	str	r3, [r0, #4]
  403a46:	6083      	str	r3, [r0, #8]
  403a48:	6643      	str	r3, [r0, #100]	; 0x64
  403a4a:	6103      	str	r3, [r0, #16]
  403a4c:	6143      	str	r3, [r0, #20]
  403a4e:	6183      	str	r3, [r0, #24]
  403a50:	4619      	mov	r1, r3
  403a52:	2208      	movs	r2, #8
  403a54:	305c      	adds	r0, #92	; 0x5c
  403a56:	f7fe fe2b 	bl	4026b0 <memset>
  403a5a:	4807      	ldr	r0, [pc, #28]	; (403a78 <std.isra.0+0x40>)
  403a5c:	4907      	ldr	r1, [pc, #28]	; (403a7c <std.isra.0+0x44>)
  403a5e:	4a08      	ldr	r2, [pc, #32]	; (403a80 <std.isra.0+0x48>)
  403a60:	4b08      	ldr	r3, [pc, #32]	; (403a84 <std.isra.0+0x4c>)
  403a62:	6220      	str	r0, [r4, #32]
  403a64:	61e4      	str	r4, [r4, #28]
  403a66:	6261      	str	r1, [r4, #36]	; 0x24
  403a68:	62a2      	str	r2, [r4, #40]	; 0x28
  403a6a:	62e3      	str	r3, [r4, #44]	; 0x2c
  403a6c:	f104 0058 	add.w	r0, r4, #88	; 0x58
  403a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403a74:	f000 bbc4 	b.w	404200 <__retarget_lock_init_recursive>
  403a78:	00404919 	.word	0x00404919
  403a7c:	0040493d 	.word	0x0040493d
  403a80:	00404979 	.word	0x00404979
  403a84:	00404999 	.word	0x00404999

00403a88 <__sinit>:
  403a88:	b510      	push	{r4, lr}
  403a8a:	4604      	mov	r4, r0
  403a8c:	4812      	ldr	r0, [pc, #72]	; (403ad8 <__sinit+0x50>)
  403a8e:	f000 fbbb 	bl	404208 <__retarget_lock_acquire_recursive>
  403a92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  403a94:	b9d2      	cbnz	r2, 403acc <__sinit+0x44>
  403a96:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  403a9a:	4810      	ldr	r0, [pc, #64]	; (403adc <__sinit+0x54>)
  403a9c:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  403aa0:	2103      	movs	r1, #3
  403aa2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  403aa6:	63e0      	str	r0, [r4, #60]	; 0x3c
  403aa8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  403aac:	6860      	ldr	r0, [r4, #4]
  403aae:	2104      	movs	r1, #4
  403ab0:	f7ff ffc2 	bl	403a38 <std.isra.0>
  403ab4:	2201      	movs	r2, #1
  403ab6:	2109      	movs	r1, #9
  403ab8:	68a0      	ldr	r0, [r4, #8]
  403aba:	f7ff ffbd 	bl	403a38 <std.isra.0>
  403abe:	2202      	movs	r2, #2
  403ac0:	2112      	movs	r1, #18
  403ac2:	68e0      	ldr	r0, [r4, #12]
  403ac4:	f7ff ffb8 	bl	403a38 <std.isra.0>
  403ac8:	2301      	movs	r3, #1
  403aca:	63a3      	str	r3, [r4, #56]	; 0x38
  403acc:	4802      	ldr	r0, [pc, #8]	; (403ad8 <__sinit+0x50>)
  403ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  403ad2:	f000 bb9b 	b.w	40420c <__retarget_lock_release_recursive>
  403ad6:	bf00      	nop
  403ad8:	20400e70 	.word	0x20400e70
  403adc:	00403a2d 	.word	0x00403a2d

00403ae0 <__sfp_lock_acquire>:
  403ae0:	4801      	ldr	r0, [pc, #4]	; (403ae8 <__sfp_lock_acquire+0x8>)
  403ae2:	f000 bb91 	b.w	404208 <__retarget_lock_acquire_recursive>
  403ae6:	bf00      	nop
  403ae8:	20400e84 	.word	0x20400e84

00403aec <__sfp_lock_release>:
  403aec:	4801      	ldr	r0, [pc, #4]	; (403af4 <__sfp_lock_release+0x8>)
  403aee:	f000 bb8d 	b.w	40420c <__retarget_lock_release_recursive>
  403af2:	bf00      	nop
  403af4:	20400e84 	.word	0x20400e84

00403af8 <__libc_fini_array>:
  403af8:	b538      	push	{r3, r4, r5, lr}
  403afa:	4c0a      	ldr	r4, [pc, #40]	; (403b24 <__libc_fini_array+0x2c>)
  403afc:	4d0a      	ldr	r5, [pc, #40]	; (403b28 <__libc_fini_array+0x30>)
  403afe:	1b64      	subs	r4, r4, r5
  403b00:	10a4      	asrs	r4, r4, #2
  403b02:	d00a      	beq.n	403b1a <__libc_fini_array+0x22>
  403b04:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  403b08:	3b01      	subs	r3, #1
  403b0a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  403b0e:	3c01      	subs	r4, #1
  403b10:	f855 3904 	ldr.w	r3, [r5], #-4
  403b14:	4798      	blx	r3
  403b16:	2c00      	cmp	r4, #0
  403b18:	d1f9      	bne.n	403b0e <__libc_fini_array+0x16>
  403b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  403b1e:	f001 bb95 	b.w	40524c <_fini>
  403b22:	bf00      	nop
  403b24:	0040525c 	.word	0x0040525c
  403b28:	00405258 	.word	0x00405258

00403b2c <__fputwc>:
  403b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403b30:	b082      	sub	sp, #8
  403b32:	4680      	mov	r8, r0
  403b34:	4689      	mov	r9, r1
  403b36:	4614      	mov	r4, r2
  403b38:	f000 fb54 	bl	4041e4 <__locale_mb_cur_max>
  403b3c:	2801      	cmp	r0, #1
  403b3e:	d036      	beq.n	403bae <__fputwc+0x82>
  403b40:	464a      	mov	r2, r9
  403b42:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  403b46:	a901      	add	r1, sp, #4
  403b48:	4640      	mov	r0, r8
  403b4a:	f000 ff81 	bl	404a50 <_wcrtomb_r>
  403b4e:	1c42      	adds	r2, r0, #1
  403b50:	4606      	mov	r6, r0
  403b52:	d025      	beq.n	403ba0 <__fputwc+0x74>
  403b54:	b3a8      	cbz	r0, 403bc2 <__fputwc+0x96>
  403b56:	f89d e004 	ldrb.w	lr, [sp, #4]
  403b5a:	2500      	movs	r5, #0
  403b5c:	f10d 0a04 	add.w	sl, sp, #4
  403b60:	e009      	b.n	403b76 <__fputwc+0x4a>
  403b62:	6823      	ldr	r3, [r4, #0]
  403b64:	1c5a      	adds	r2, r3, #1
  403b66:	6022      	str	r2, [r4, #0]
  403b68:	f883 e000 	strb.w	lr, [r3]
  403b6c:	3501      	adds	r5, #1
  403b6e:	42b5      	cmp	r5, r6
  403b70:	d227      	bcs.n	403bc2 <__fputwc+0x96>
  403b72:	f815 e00a 	ldrb.w	lr, [r5, sl]
  403b76:	68a3      	ldr	r3, [r4, #8]
  403b78:	3b01      	subs	r3, #1
  403b7a:	2b00      	cmp	r3, #0
  403b7c:	60a3      	str	r3, [r4, #8]
  403b7e:	daf0      	bge.n	403b62 <__fputwc+0x36>
  403b80:	69a7      	ldr	r7, [r4, #24]
  403b82:	42bb      	cmp	r3, r7
  403b84:	4671      	mov	r1, lr
  403b86:	4622      	mov	r2, r4
  403b88:	4640      	mov	r0, r8
  403b8a:	db02      	blt.n	403b92 <__fputwc+0x66>
  403b8c:	f1be 0f0a 	cmp.w	lr, #10
  403b90:	d1e7      	bne.n	403b62 <__fputwc+0x36>
  403b92:	f000 ff05 	bl	4049a0 <__swbuf_r>
  403b96:	1c43      	adds	r3, r0, #1
  403b98:	d1e8      	bne.n	403b6c <__fputwc+0x40>
  403b9a:	b002      	add	sp, #8
  403b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403ba0:	89a3      	ldrh	r3, [r4, #12]
  403ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403ba6:	81a3      	strh	r3, [r4, #12]
  403ba8:	b002      	add	sp, #8
  403baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bae:	f109 33ff 	add.w	r3, r9, #4294967295
  403bb2:	2bfe      	cmp	r3, #254	; 0xfe
  403bb4:	d8c4      	bhi.n	403b40 <__fputwc+0x14>
  403bb6:	fa5f fe89 	uxtb.w	lr, r9
  403bba:	4606      	mov	r6, r0
  403bbc:	f88d e004 	strb.w	lr, [sp, #4]
  403bc0:	e7cb      	b.n	403b5a <__fputwc+0x2e>
  403bc2:	4648      	mov	r0, r9
  403bc4:	b002      	add	sp, #8
  403bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403bca:	bf00      	nop

00403bcc <_fputwc_r>:
  403bcc:	b530      	push	{r4, r5, lr}
  403bce:	6e53      	ldr	r3, [r2, #100]	; 0x64
  403bd0:	f013 0f01 	tst.w	r3, #1
  403bd4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  403bd8:	4614      	mov	r4, r2
  403bda:	b083      	sub	sp, #12
  403bdc:	4605      	mov	r5, r0
  403bde:	b29a      	uxth	r2, r3
  403be0:	d101      	bne.n	403be6 <_fputwc_r+0x1a>
  403be2:	0590      	lsls	r0, r2, #22
  403be4:	d51c      	bpl.n	403c20 <_fputwc_r+0x54>
  403be6:	0490      	lsls	r0, r2, #18
  403be8:	d406      	bmi.n	403bf8 <_fputwc_r+0x2c>
  403bea:	6e62      	ldr	r2, [r4, #100]	; 0x64
  403bec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  403bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  403bf4:	81a3      	strh	r3, [r4, #12]
  403bf6:	6662      	str	r2, [r4, #100]	; 0x64
  403bf8:	4628      	mov	r0, r5
  403bfa:	4622      	mov	r2, r4
  403bfc:	f7ff ff96 	bl	403b2c <__fputwc>
  403c00:	6e63      	ldr	r3, [r4, #100]	; 0x64
  403c02:	07da      	lsls	r2, r3, #31
  403c04:	4605      	mov	r5, r0
  403c06:	d402      	bmi.n	403c0e <_fputwc_r+0x42>
  403c08:	89a3      	ldrh	r3, [r4, #12]
  403c0a:	059b      	lsls	r3, r3, #22
  403c0c:	d502      	bpl.n	403c14 <_fputwc_r+0x48>
  403c0e:	4628      	mov	r0, r5
  403c10:	b003      	add	sp, #12
  403c12:	bd30      	pop	{r4, r5, pc}
  403c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c16:	f000 faf9 	bl	40420c <__retarget_lock_release_recursive>
  403c1a:	4628      	mov	r0, r5
  403c1c:	b003      	add	sp, #12
  403c1e:	bd30      	pop	{r4, r5, pc}
  403c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
  403c22:	9101      	str	r1, [sp, #4]
  403c24:	f000 faf0 	bl	404208 <__retarget_lock_acquire_recursive>
  403c28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403c2c:	9901      	ldr	r1, [sp, #4]
  403c2e:	b29a      	uxth	r2, r3
  403c30:	e7d9      	b.n	403be6 <_fputwc_r+0x1a>
  403c32:	bf00      	nop

00403c34 <_malloc_trim_r>:
  403c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  403c36:	4f24      	ldr	r7, [pc, #144]	; (403cc8 <_malloc_trim_r+0x94>)
  403c38:	460c      	mov	r4, r1
  403c3a:	4606      	mov	r6, r0
  403c3c:	f7fe fd86 	bl	40274c <__malloc_lock>
  403c40:	68bb      	ldr	r3, [r7, #8]
  403c42:	685d      	ldr	r5, [r3, #4]
  403c44:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  403c48:	310f      	adds	r1, #15
  403c4a:	f025 0503 	bic.w	r5, r5, #3
  403c4e:	4429      	add	r1, r5
  403c50:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  403c54:	f021 010f 	bic.w	r1, r1, #15
  403c58:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  403c5c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  403c60:	db07      	blt.n	403c72 <_malloc_trim_r+0x3e>
  403c62:	2100      	movs	r1, #0
  403c64:	4630      	mov	r0, r6
  403c66:	f7fe fd7d 	bl	402764 <_sbrk_r>
  403c6a:	68bb      	ldr	r3, [r7, #8]
  403c6c:	442b      	add	r3, r5
  403c6e:	4298      	cmp	r0, r3
  403c70:	d004      	beq.n	403c7c <_malloc_trim_r+0x48>
  403c72:	4630      	mov	r0, r6
  403c74:	f7fe fd70 	bl	402758 <__malloc_unlock>
  403c78:	2000      	movs	r0, #0
  403c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403c7c:	4261      	negs	r1, r4
  403c7e:	4630      	mov	r0, r6
  403c80:	f7fe fd70 	bl	402764 <_sbrk_r>
  403c84:	3001      	adds	r0, #1
  403c86:	d00d      	beq.n	403ca4 <_malloc_trim_r+0x70>
  403c88:	4b10      	ldr	r3, [pc, #64]	; (403ccc <_malloc_trim_r+0x98>)
  403c8a:	68ba      	ldr	r2, [r7, #8]
  403c8c:	6819      	ldr	r1, [r3, #0]
  403c8e:	1b2d      	subs	r5, r5, r4
  403c90:	f045 0501 	orr.w	r5, r5, #1
  403c94:	4630      	mov	r0, r6
  403c96:	1b09      	subs	r1, r1, r4
  403c98:	6055      	str	r5, [r2, #4]
  403c9a:	6019      	str	r1, [r3, #0]
  403c9c:	f7fe fd5c 	bl	402758 <__malloc_unlock>
  403ca0:	2001      	movs	r0, #1
  403ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  403ca4:	2100      	movs	r1, #0
  403ca6:	4630      	mov	r0, r6
  403ca8:	f7fe fd5c 	bl	402764 <_sbrk_r>
  403cac:	68ba      	ldr	r2, [r7, #8]
  403cae:	1a83      	subs	r3, r0, r2
  403cb0:	2b0f      	cmp	r3, #15
  403cb2:	ddde      	ble.n	403c72 <_malloc_trim_r+0x3e>
  403cb4:	4c06      	ldr	r4, [pc, #24]	; (403cd0 <_malloc_trim_r+0x9c>)
  403cb6:	4905      	ldr	r1, [pc, #20]	; (403ccc <_malloc_trim_r+0x98>)
  403cb8:	6824      	ldr	r4, [r4, #0]
  403cba:	f043 0301 	orr.w	r3, r3, #1
  403cbe:	1b00      	subs	r0, r0, r4
  403cc0:	6053      	str	r3, [r2, #4]
  403cc2:	6008      	str	r0, [r1, #0]
  403cc4:	e7d5      	b.n	403c72 <_malloc_trim_r+0x3e>
  403cc6:	bf00      	nop
  403cc8:	20400440 	.word	0x20400440
  403ccc:	20400e14 	.word	0x20400e14
  403cd0:	20400848 	.word	0x20400848

00403cd4 <_free_r>:
  403cd4:	2900      	cmp	r1, #0
  403cd6:	d044      	beq.n	403d62 <_free_r+0x8e>
  403cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  403cdc:	460d      	mov	r5, r1
  403cde:	4680      	mov	r8, r0
  403ce0:	f7fe fd34 	bl	40274c <__malloc_lock>
  403ce4:	f855 7c04 	ldr.w	r7, [r5, #-4]
  403ce8:	4969      	ldr	r1, [pc, #420]	; (403e90 <_free_r+0x1bc>)
  403cea:	f027 0301 	bic.w	r3, r7, #1
  403cee:	f1a5 0408 	sub.w	r4, r5, #8
  403cf2:	18e2      	adds	r2, r4, r3
  403cf4:	688e      	ldr	r6, [r1, #8]
  403cf6:	6850      	ldr	r0, [r2, #4]
  403cf8:	42b2      	cmp	r2, r6
  403cfa:	f020 0003 	bic.w	r0, r0, #3
  403cfe:	d05e      	beq.n	403dbe <_free_r+0xea>
  403d00:	07fe      	lsls	r6, r7, #31
  403d02:	6050      	str	r0, [r2, #4]
  403d04:	d40b      	bmi.n	403d1e <_free_r+0x4a>
  403d06:	f855 7c08 	ldr.w	r7, [r5, #-8]
  403d0a:	1be4      	subs	r4, r4, r7
  403d0c:	f101 0e08 	add.w	lr, r1, #8
  403d10:	68a5      	ldr	r5, [r4, #8]
  403d12:	4575      	cmp	r5, lr
  403d14:	443b      	add	r3, r7
  403d16:	d06d      	beq.n	403df4 <_free_r+0x120>
  403d18:	68e7      	ldr	r7, [r4, #12]
  403d1a:	60ef      	str	r7, [r5, #12]
  403d1c:	60bd      	str	r5, [r7, #8]
  403d1e:	1815      	adds	r5, r2, r0
  403d20:	686d      	ldr	r5, [r5, #4]
  403d22:	07ed      	lsls	r5, r5, #31
  403d24:	d53e      	bpl.n	403da4 <_free_r+0xd0>
  403d26:	f043 0201 	orr.w	r2, r3, #1
  403d2a:	6062      	str	r2, [r4, #4]
  403d2c:	50e3      	str	r3, [r4, r3]
  403d2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  403d32:	d217      	bcs.n	403d64 <_free_r+0x90>
  403d34:	08db      	lsrs	r3, r3, #3
  403d36:	1c58      	adds	r0, r3, #1
  403d38:	109a      	asrs	r2, r3, #2
  403d3a:	684d      	ldr	r5, [r1, #4]
  403d3c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  403d40:	60a7      	str	r7, [r4, #8]
  403d42:	2301      	movs	r3, #1
  403d44:	4093      	lsls	r3, r2
  403d46:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  403d4a:	432b      	orrs	r3, r5
  403d4c:	3a08      	subs	r2, #8
  403d4e:	60e2      	str	r2, [r4, #12]
  403d50:	604b      	str	r3, [r1, #4]
  403d52:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  403d56:	60fc      	str	r4, [r7, #12]
  403d58:	4640      	mov	r0, r8
  403d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403d5e:	f7fe bcfb 	b.w	402758 <__malloc_unlock>
  403d62:	4770      	bx	lr
  403d64:	0a5a      	lsrs	r2, r3, #9
  403d66:	2a04      	cmp	r2, #4
  403d68:	d852      	bhi.n	403e10 <_free_r+0x13c>
  403d6a:	099a      	lsrs	r2, r3, #6
  403d6c:	f102 0739 	add.w	r7, r2, #57	; 0x39
  403d70:	00ff      	lsls	r7, r7, #3
  403d72:	f102 0538 	add.w	r5, r2, #56	; 0x38
  403d76:	19c8      	adds	r0, r1, r7
  403d78:	59ca      	ldr	r2, [r1, r7]
  403d7a:	3808      	subs	r0, #8
  403d7c:	4290      	cmp	r0, r2
  403d7e:	d04f      	beq.n	403e20 <_free_r+0x14c>
  403d80:	6851      	ldr	r1, [r2, #4]
  403d82:	f021 0103 	bic.w	r1, r1, #3
  403d86:	428b      	cmp	r3, r1
  403d88:	d232      	bcs.n	403df0 <_free_r+0x11c>
  403d8a:	6892      	ldr	r2, [r2, #8]
  403d8c:	4290      	cmp	r0, r2
  403d8e:	d1f7      	bne.n	403d80 <_free_r+0xac>
  403d90:	68c3      	ldr	r3, [r0, #12]
  403d92:	60a0      	str	r0, [r4, #8]
  403d94:	60e3      	str	r3, [r4, #12]
  403d96:	609c      	str	r4, [r3, #8]
  403d98:	60c4      	str	r4, [r0, #12]
  403d9a:	4640      	mov	r0, r8
  403d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  403da0:	f7fe bcda 	b.w	402758 <__malloc_unlock>
  403da4:	6895      	ldr	r5, [r2, #8]
  403da6:	4f3b      	ldr	r7, [pc, #236]	; (403e94 <_free_r+0x1c0>)
  403da8:	42bd      	cmp	r5, r7
  403daa:	4403      	add	r3, r0
  403dac:	d040      	beq.n	403e30 <_free_r+0x15c>
  403dae:	68d0      	ldr	r0, [r2, #12]
  403db0:	60e8      	str	r0, [r5, #12]
  403db2:	f043 0201 	orr.w	r2, r3, #1
  403db6:	6085      	str	r5, [r0, #8]
  403db8:	6062      	str	r2, [r4, #4]
  403dba:	50e3      	str	r3, [r4, r3]
  403dbc:	e7b7      	b.n	403d2e <_free_r+0x5a>
  403dbe:	07ff      	lsls	r7, r7, #31
  403dc0:	4403      	add	r3, r0
  403dc2:	d407      	bmi.n	403dd4 <_free_r+0x100>
  403dc4:	f855 2c08 	ldr.w	r2, [r5, #-8]
  403dc8:	1aa4      	subs	r4, r4, r2
  403dca:	4413      	add	r3, r2
  403dcc:	68a0      	ldr	r0, [r4, #8]
  403dce:	68e2      	ldr	r2, [r4, #12]
  403dd0:	60c2      	str	r2, [r0, #12]
  403dd2:	6090      	str	r0, [r2, #8]
  403dd4:	4a30      	ldr	r2, [pc, #192]	; (403e98 <_free_r+0x1c4>)
  403dd6:	6812      	ldr	r2, [r2, #0]
  403dd8:	f043 0001 	orr.w	r0, r3, #1
  403ddc:	4293      	cmp	r3, r2
  403dde:	6060      	str	r0, [r4, #4]
  403de0:	608c      	str	r4, [r1, #8]
  403de2:	d3b9      	bcc.n	403d58 <_free_r+0x84>
  403de4:	4b2d      	ldr	r3, [pc, #180]	; (403e9c <_free_r+0x1c8>)
  403de6:	4640      	mov	r0, r8
  403de8:	6819      	ldr	r1, [r3, #0]
  403dea:	f7ff ff23 	bl	403c34 <_malloc_trim_r>
  403dee:	e7b3      	b.n	403d58 <_free_r+0x84>
  403df0:	4610      	mov	r0, r2
  403df2:	e7cd      	b.n	403d90 <_free_r+0xbc>
  403df4:	1811      	adds	r1, r2, r0
  403df6:	6849      	ldr	r1, [r1, #4]
  403df8:	07c9      	lsls	r1, r1, #31
  403dfa:	d444      	bmi.n	403e86 <_free_r+0x1b2>
  403dfc:	6891      	ldr	r1, [r2, #8]
  403dfe:	68d2      	ldr	r2, [r2, #12]
  403e00:	60ca      	str	r2, [r1, #12]
  403e02:	4403      	add	r3, r0
  403e04:	f043 0001 	orr.w	r0, r3, #1
  403e08:	6091      	str	r1, [r2, #8]
  403e0a:	6060      	str	r0, [r4, #4]
  403e0c:	50e3      	str	r3, [r4, r3]
  403e0e:	e7a3      	b.n	403d58 <_free_r+0x84>
  403e10:	2a14      	cmp	r2, #20
  403e12:	d816      	bhi.n	403e42 <_free_r+0x16e>
  403e14:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  403e18:	00ff      	lsls	r7, r7, #3
  403e1a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  403e1e:	e7aa      	b.n	403d76 <_free_r+0xa2>
  403e20:	10aa      	asrs	r2, r5, #2
  403e22:	2301      	movs	r3, #1
  403e24:	684d      	ldr	r5, [r1, #4]
  403e26:	4093      	lsls	r3, r2
  403e28:	432b      	orrs	r3, r5
  403e2a:	604b      	str	r3, [r1, #4]
  403e2c:	4603      	mov	r3, r0
  403e2e:	e7b0      	b.n	403d92 <_free_r+0xbe>
  403e30:	f043 0201 	orr.w	r2, r3, #1
  403e34:	614c      	str	r4, [r1, #20]
  403e36:	610c      	str	r4, [r1, #16]
  403e38:	60e5      	str	r5, [r4, #12]
  403e3a:	60a5      	str	r5, [r4, #8]
  403e3c:	6062      	str	r2, [r4, #4]
  403e3e:	50e3      	str	r3, [r4, r3]
  403e40:	e78a      	b.n	403d58 <_free_r+0x84>
  403e42:	2a54      	cmp	r2, #84	; 0x54
  403e44:	d806      	bhi.n	403e54 <_free_r+0x180>
  403e46:	0b1a      	lsrs	r2, r3, #12
  403e48:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  403e4c:	00ff      	lsls	r7, r7, #3
  403e4e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  403e52:	e790      	b.n	403d76 <_free_r+0xa2>
  403e54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  403e58:	d806      	bhi.n	403e68 <_free_r+0x194>
  403e5a:	0bda      	lsrs	r2, r3, #15
  403e5c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  403e60:	00ff      	lsls	r7, r7, #3
  403e62:	f102 0577 	add.w	r5, r2, #119	; 0x77
  403e66:	e786      	b.n	403d76 <_free_r+0xa2>
  403e68:	f240 5054 	movw	r0, #1364	; 0x554
  403e6c:	4282      	cmp	r2, r0
  403e6e:	d806      	bhi.n	403e7e <_free_r+0x1aa>
  403e70:	0c9a      	lsrs	r2, r3, #18
  403e72:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  403e76:	00ff      	lsls	r7, r7, #3
  403e78:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  403e7c:	e77b      	b.n	403d76 <_free_r+0xa2>
  403e7e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  403e82:	257e      	movs	r5, #126	; 0x7e
  403e84:	e777      	b.n	403d76 <_free_r+0xa2>
  403e86:	f043 0101 	orr.w	r1, r3, #1
  403e8a:	6061      	str	r1, [r4, #4]
  403e8c:	6013      	str	r3, [r2, #0]
  403e8e:	e763      	b.n	403d58 <_free_r+0x84>
  403e90:	20400440 	.word	0x20400440
  403e94:	20400448 	.word	0x20400448
  403e98:	2040084c 	.word	0x2040084c
  403e9c:	20400e44 	.word	0x20400e44

00403ea0 <__sfvwrite_r>:
  403ea0:	6893      	ldr	r3, [r2, #8]
  403ea2:	2b00      	cmp	r3, #0
  403ea4:	d073      	beq.n	403f8e <__sfvwrite_r+0xee>
  403ea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  403eaa:	898b      	ldrh	r3, [r1, #12]
  403eac:	b083      	sub	sp, #12
  403eae:	460c      	mov	r4, r1
  403eb0:	0719      	lsls	r1, r3, #28
  403eb2:	9000      	str	r0, [sp, #0]
  403eb4:	4616      	mov	r6, r2
  403eb6:	d526      	bpl.n	403f06 <__sfvwrite_r+0x66>
  403eb8:	6922      	ldr	r2, [r4, #16]
  403eba:	b322      	cbz	r2, 403f06 <__sfvwrite_r+0x66>
  403ebc:	f013 0002 	ands.w	r0, r3, #2
  403ec0:	6835      	ldr	r5, [r6, #0]
  403ec2:	d02c      	beq.n	403f1e <__sfvwrite_r+0x7e>
  403ec4:	f04f 0900 	mov.w	r9, #0
  403ec8:	4fb0      	ldr	r7, [pc, #704]	; (40418c <__sfvwrite_r+0x2ec>)
  403eca:	46c8      	mov	r8, r9
  403ecc:	46b2      	mov	sl, r6
  403ece:	45b8      	cmp	r8, r7
  403ed0:	4643      	mov	r3, r8
  403ed2:	464a      	mov	r2, r9
  403ed4:	bf28      	it	cs
  403ed6:	463b      	movcs	r3, r7
  403ed8:	9800      	ldr	r0, [sp, #0]
  403eda:	f1b8 0f00 	cmp.w	r8, #0
  403ede:	d050      	beq.n	403f82 <__sfvwrite_r+0xe2>
  403ee0:	69e1      	ldr	r1, [r4, #28]
  403ee2:	6a66      	ldr	r6, [r4, #36]	; 0x24
  403ee4:	47b0      	blx	r6
  403ee6:	2800      	cmp	r0, #0
  403ee8:	dd58      	ble.n	403f9c <__sfvwrite_r+0xfc>
  403eea:	f8da 3008 	ldr.w	r3, [sl, #8]
  403eee:	1a1b      	subs	r3, r3, r0
  403ef0:	4481      	add	r9, r0
  403ef2:	eba8 0800 	sub.w	r8, r8, r0
  403ef6:	f8ca 3008 	str.w	r3, [sl, #8]
  403efa:	2b00      	cmp	r3, #0
  403efc:	d1e7      	bne.n	403ece <__sfvwrite_r+0x2e>
  403efe:	2000      	movs	r0, #0
  403f00:	b003      	add	sp, #12
  403f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403f06:	4621      	mov	r1, r4
  403f08:	9800      	ldr	r0, [sp, #0]
  403f0a:	f7ff fc51 	bl	4037b0 <__swsetup_r>
  403f0e:	2800      	cmp	r0, #0
  403f10:	f040 8133 	bne.w	40417a <__sfvwrite_r+0x2da>
  403f14:	89a3      	ldrh	r3, [r4, #12]
  403f16:	6835      	ldr	r5, [r6, #0]
  403f18:	f013 0002 	ands.w	r0, r3, #2
  403f1c:	d1d2      	bne.n	403ec4 <__sfvwrite_r+0x24>
  403f1e:	f013 0901 	ands.w	r9, r3, #1
  403f22:	d145      	bne.n	403fb0 <__sfvwrite_r+0x110>
  403f24:	464f      	mov	r7, r9
  403f26:	9601      	str	r6, [sp, #4]
  403f28:	b337      	cbz	r7, 403f78 <__sfvwrite_r+0xd8>
  403f2a:	059a      	lsls	r2, r3, #22
  403f2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  403f30:	f140 8083 	bpl.w	40403a <__sfvwrite_r+0x19a>
  403f34:	4547      	cmp	r7, r8
  403f36:	46c3      	mov	fp, r8
  403f38:	f0c0 80ab 	bcc.w	404092 <__sfvwrite_r+0x1f2>
  403f3c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  403f40:	f040 80ac 	bne.w	40409c <__sfvwrite_r+0x1fc>
  403f44:	6820      	ldr	r0, [r4, #0]
  403f46:	46ba      	mov	sl, r7
  403f48:	465a      	mov	r2, fp
  403f4a:	4649      	mov	r1, r9
  403f4c:	f000 fada 	bl	404504 <memmove>
  403f50:	68a2      	ldr	r2, [r4, #8]
  403f52:	6823      	ldr	r3, [r4, #0]
  403f54:	eba2 0208 	sub.w	r2, r2, r8
  403f58:	445b      	add	r3, fp
  403f5a:	60a2      	str	r2, [r4, #8]
  403f5c:	6023      	str	r3, [r4, #0]
  403f5e:	9a01      	ldr	r2, [sp, #4]
  403f60:	6893      	ldr	r3, [r2, #8]
  403f62:	eba3 030a 	sub.w	r3, r3, sl
  403f66:	44d1      	add	r9, sl
  403f68:	eba7 070a 	sub.w	r7, r7, sl
  403f6c:	6093      	str	r3, [r2, #8]
  403f6e:	2b00      	cmp	r3, #0
  403f70:	d0c5      	beq.n	403efe <__sfvwrite_r+0x5e>
  403f72:	89a3      	ldrh	r3, [r4, #12]
  403f74:	2f00      	cmp	r7, #0
  403f76:	d1d8      	bne.n	403f2a <__sfvwrite_r+0x8a>
  403f78:	f8d5 9000 	ldr.w	r9, [r5]
  403f7c:	686f      	ldr	r7, [r5, #4]
  403f7e:	3508      	adds	r5, #8
  403f80:	e7d2      	b.n	403f28 <__sfvwrite_r+0x88>
  403f82:	f8d5 9000 	ldr.w	r9, [r5]
  403f86:	f8d5 8004 	ldr.w	r8, [r5, #4]
  403f8a:	3508      	adds	r5, #8
  403f8c:	e79f      	b.n	403ece <__sfvwrite_r+0x2e>
  403f8e:	2000      	movs	r0, #0
  403f90:	4770      	bx	lr
  403f92:	4621      	mov	r1, r4
  403f94:	9800      	ldr	r0, [sp, #0]
  403f96:	f7ff fd1f 	bl	4039d8 <_fflush_r>
  403f9a:	b370      	cbz	r0, 403ffa <__sfvwrite_r+0x15a>
  403f9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  403fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  403fa4:	f04f 30ff 	mov.w	r0, #4294967295
  403fa8:	81a3      	strh	r3, [r4, #12]
  403faa:	b003      	add	sp, #12
  403fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403fb0:	4681      	mov	r9, r0
  403fb2:	4633      	mov	r3, r6
  403fb4:	464e      	mov	r6, r9
  403fb6:	46a8      	mov	r8, r5
  403fb8:	469a      	mov	sl, r3
  403fba:	464d      	mov	r5, r9
  403fbc:	b34e      	cbz	r6, 404012 <__sfvwrite_r+0x172>
  403fbe:	b380      	cbz	r0, 404022 <__sfvwrite_r+0x182>
  403fc0:	6820      	ldr	r0, [r4, #0]
  403fc2:	6923      	ldr	r3, [r4, #16]
  403fc4:	6962      	ldr	r2, [r4, #20]
  403fc6:	45b1      	cmp	r9, r6
  403fc8:	46cb      	mov	fp, r9
  403fca:	bf28      	it	cs
  403fcc:	46b3      	movcs	fp, r6
  403fce:	4298      	cmp	r0, r3
  403fd0:	465f      	mov	r7, fp
  403fd2:	d904      	bls.n	403fde <__sfvwrite_r+0x13e>
  403fd4:	68a3      	ldr	r3, [r4, #8]
  403fd6:	4413      	add	r3, r2
  403fd8:	459b      	cmp	fp, r3
  403fda:	f300 80a6 	bgt.w	40412a <__sfvwrite_r+0x28a>
  403fde:	4593      	cmp	fp, r2
  403fe0:	db4b      	blt.n	40407a <__sfvwrite_r+0x1da>
  403fe2:	4613      	mov	r3, r2
  403fe4:	6a67      	ldr	r7, [r4, #36]	; 0x24
  403fe6:	69e1      	ldr	r1, [r4, #28]
  403fe8:	9800      	ldr	r0, [sp, #0]
  403fea:	462a      	mov	r2, r5
  403fec:	47b8      	blx	r7
  403fee:	1e07      	subs	r7, r0, #0
  403ff0:	ddd4      	ble.n	403f9c <__sfvwrite_r+0xfc>
  403ff2:	ebb9 0907 	subs.w	r9, r9, r7
  403ff6:	d0cc      	beq.n	403f92 <__sfvwrite_r+0xf2>
  403ff8:	2001      	movs	r0, #1
  403ffa:	f8da 3008 	ldr.w	r3, [sl, #8]
  403ffe:	1bdb      	subs	r3, r3, r7
  404000:	443d      	add	r5, r7
  404002:	1bf6      	subs	r6, r6, r7
  404004:	f8ca 3008 	str.w	r3, [sl, #8]
  404008:	2b00      	cmp	r3, #0
  40400a:	f43f af78 	beq.w	403efe <__sfvwrite_r+0x5e>
  40400e:	2e00      	cmp	r6, #0
  404010:	d1d5      	bne.n	403fbe <__sfvwrite_r+0x11e>
  404012:	f108 0308 	add.w	r3, r8, #8
  404016:	e913 0060 	ldmdb	r3, {r5, r6}
  40401a:	4698      	mov	r8, r3
  40401c:	3308      	adds	r3, #8
  40401e:	2e00      	cmp	r6, #0
  404020:	d0f9      	beq.n	404016 <__sfvwrite_r+0x176>
  404022:	4632      	mov	r2, r6
  404024:	210a      	movs	r1, #10
  404026:	4628      	mov	r0, r5
  404028:	f000 f982 	bl	404330 <memchr>
  40402c:	2800      	cmp	r0, #0
  40402e:	f000 80a1 	beq.w	404174 <__sfvwrite_r+0x2d4>
  404032:	3001      	adds	r0, #1
  404034:	eba0 0905 	sub.w	r9, r0, r5
  404038:	e7c2      	b.n	403fc0 <__sfvwrite_r+0x120>
  40403a:	6820      	ldr	r0, [r4, #0]
  40403c:	6923      	ldr	r3, [r4, #16]
  40403e:	4298      	cmp	r0, r3
  404040:	d802      	bhi.n	404048 <__sfvwrite_r+0x1a8>
  404042:	6963      	ldr	r3, [r4, #20]
  404044:	429f      	cmp	r7, r3
  404046:	d25d      	bcs.n	404104 <__sfvwrite_r+0x264>
  404048:	45b8      	cmp	r8, r7
  40404a:	bf28      	it	cs
  40404c:	46b8      	movcs	r8, r7
  40404e:	4642      	mov	r2, r8
  404050:	4649      	mov	r1, r9
  404052:	f000 fa57 	bl	404504 <memmove>
  404056:	68a3      	ldr	r3, [r4, #8]
  404058:	6822      	ldr	r2, [r4, #0]
  40405a:	eba3 0308 	sub.w	r3, r3, r8
  40405e:	4442      	add	r2, r8
  404060:	60a3      	str	r3, [r4, #8]
  404062:	6022      	str	r2, [r4, #0]
  404064:	b10b      	cbz	r3, 40406a <__sfvwrite_r+0x1ca>
  404066:	46c2      	mov	sl, r8
  404068:	e779      	b.n	403f5e <__sfvwrite_r+0xbe>
  40406a:	4621      	mov	r1, r4
  40406c:	9800      	ldr	r0, [sp, #0]
  40406e:	f7ff fcb3 	bl	4039d8 <_fflush_r>
  404072:	2800      	cmp	r0, #0
  404074:	d192      	bne.n	403f9c <__sfvwrite_r+0xfc>
  404076:	46c2      	mov	sl, r8
  404078:	e771      	b.n	403f5e <__sfvwrite_r+0xbe>
  40407a:	465a      	mov	r2, fp
  40407c:	4629      	mov	r1, r5
  40407e:	f000 fa41 	bl	404504 <memmove>
  404082:	68a2      	ldr	r2, [r4, #8]
  404084:	6823      	ldr	r3, [r4, #0]
  404086:	eba2 020b 	sub.w	r2, r2, fp
  40408a:	445b      	add	r3, fp
  40408c:	60a2      	str	r2, [r4, #8]
  40408e:	6023      	str	r3, [r4, #0]
  404090:	e7af      	b.n	403ff2 <__sfvwrite_r+0x152>
  404092:	6820      	ldr	r0, [r4, #0]
  404094:	46b8      	mov	r8, r7
  404096:	46ba      	mov	sl, r7
  404098:	46bb      	mov	fp, r7
  40409a:	e755      	b.n	403f48 <__sfvwrite_r+0xa8>
  40409c:	6962      	ldr	r2, [r4, #20]
  40409e:	6820      	ldr	r0, [r4, #0]
  4040a0:	6921      	ldr	r1, [r4, #16]
  4040a2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4040a6:	eba0 0a01 	sub.w	sl, r0, r1
  4040aa:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4040ae:	f10a 0001 	add.w	r0, sl, #1
  4040b2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4040b6:	4438      	add	r0, r7
  4040b8:	4540      	cmp	r0, r8
  4040ba:	4642      	mov	r2, r8
  4040bc:	bf84      	itt	hi
  4040be:	4680      	movhi	r8, r0
  4040c0:	4642      	movhi	r2, r8
  4040c2:	055b      	lsls	r3, r3, #21
  4040c4:	d544      	bpl.n	404150 <__sfvwrite_r+0x2b0>
  4040c6:	4611      	mov	r1, r2
  4040c8:	9800      	ldr	r0, [sp, #0]
  4040ca:	f7fe f841 	bl	402150 <_malloc_r>
  4040ce:	4683      	mov	fp, r0
  4040d0:	2800      	cmp	r0, #0
  4040d2:	d055      	beq.n	404180 <__sfvwrite_r+0x2e0>
  4040d4:	4652      	mov	r2, sl
  4040d6:	6921      	ldr	r1, [r4, #16]
  4040d8:	f000 f97a 	bl	4043d0 <memcpy>
  4040dc:	89a3      	ldrh	r3, [r4, #12]
  4040de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  4040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4040e6:	81a3      	strh	r3, [r4, #12]
  4040e8:	eb0b 000a 	add.w	r0, fp, sl
  4040ec:	eba8 030a 	sub.w	r3, r8, sl
  4040f0:	f8c4 b010 	str.w	fp, [r4, #16]
  4040f4:	f8c4 8014 	str.w	r8, [r4, #20]
  4040f8:	6020      	str	r0, [r4, #0]
  4040fa:	60a3      	str	r3, [r4, #8]
  4040fc:	46b8      	mov	r8, r7
  4040fe:	46ba      	mov	sl, r7
  404100:	46bb      	mov	fp, r7
  404102:	e721      	b.n	403f48 <__sfvwrite_r+0xa8>
  404104:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  404108:	42b9      	cmp	r1, r7
  40410a:	bf28      	it	cs
  40410c:	4639      	movcs	r1, r7
  40410e:	464a      	mov	r2, r9
  404110:	fb91 f1f3 	sdiv	r1, r1, r3
  404114:	9800      	ldr	r0, [sp, #0]
  404116:	6a66      	ldr	r6, [r4, #36]	; 0x24
  404118:	fb03 f301 	mul.w	r3, r3, r1
  40411c:	69e1      	ldr	r1, [r4, #28]
  40411e:	47b0      	blx	r6
  404120:	f1b0 0a00 	subs.w	sl, r0, #0
  404124:	f73f af1b 	bgt.w	403f5e <__sfvwrite_r+0xbe>
  404128:	e738      	b.n	403f9c <__sfvwrite_r+0xfc>
  40412a:	461a      	mov	r2, r3
  40412c:	4629      	mov	r1, r5
  40412e:	9301      	str	r3, [sp, #4]
  404130:	f000 f9e8 	bl	404504 <memmove>
  404134:	6822      	ldr	r2, [r4, #0]
  404136:	9b01      	ldr	r3, [sp, #4]
  404138:	9800      	ldr	r0, [sp, #0]
  40413a:	441a      	add	r2, r3
  40413c:	6022      	str	r2, [r4, #0]
  40413e:	4621      	mov	r1, r4
  404140:	f7ff fc4a 	bl	4039d8 <_fflush_r>
  404144:	9b01      	ldr	r3, [sp, #4]
  404146:	2800      	cmp	r0, #0
  404148:	f47f af28 	bne.w	403f9c <__sfvwrite_r+0xfc>
  40414c:	461f      	mov	r7, r3
  40414e:	e750      	b.n	403ff2 <__sfvwrite_r+0x152>
  404150:	9800      	ldr	r0, [sp, #0]
  404152:	f000 fa3b 	bl	4045cc <_realloc_r>
  404156:	4683      	mov	fp, r0
  404158:	2800      	cmp	r0, #0
  40415a:	d1c5      	bne.n	4040e8 <__sfvwrite_r+0x248>
  40415c:	9d00      	ldr	r5, [sp, #0]
  40415e:	6921      	ldr	r1, [r4, #16]
  404160:	4628      	mov	r0, r5
  404162:	f7ff fdb7 	bl	403cd4 <_free_r>
  404166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40416a:	220c      	movs	r2, #12
  40416c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  404170:	602a      	str	r2, [r5, #0]
  404172:	e715      	b.n	403fa0 <__sfvwrite_r+0x100>
  404174:	f106 0901 	add.w	r9, r6, #1
  404178:	e722      	b.n	403fc0 <__sfvwrite_r+0x120>
  40417a:	f04f 30ff 	mov.w	r0, #4294967295
  40417e:	e6bf      	b.n	403f00 <__sfvwrite_r+0x60>
  404180:	9a00      	ldr	r2, [sp, #0]
  404182:	230c      	movs	r3, #12
  404184:	6013      	str	r3, [r2, #0]
  404186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40418a:	e709      	b.n	403fa0 <__sfvwrite_r+0x100>
  40418c:	7ffffc00 	.word	0x7ffffc00

00404190 <_fwalk_reent>:
  404190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404194:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  404198:	d01f      	beq.n	4041da <_fwalk_reent+0x4a>
  40419a:	4688      	mov	r8, r1
  40419c:	4606      	mov	r6, r0
  40419e:	f04f 0900 	mov.w	r9, #0
  4041a2:	687d      	ldr	r5, [r7, #4]
  4041a4:	68bc      	ldr	r4, [r7, #8]
  4041a6:	3d01      	subs	r5, #1
  4041a8:	d411      	bmi.n	4041ce <_fwalk_reent+0x3e>
  4041aa:	89a3      	ldrh	r3, [r4, #12]
  4041ac:	2b01      	cmp	r3, #1
  4041ae:	f105 35ff 	add.w	r5, r5, #4294967295
  4041b2:	d908      	bls.n	4041c6 <_fwalk_reent+0x36>
  4041b4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4041b8:	3301      	adds	r3, #1
  4041ba:	4621      	mov	r1, r4
  4041bc:	4630      	mov	r0, r6
  4041be:	d002      	beq.n	4041c6 <_fwalk_reent+0x36>
  4041c0:	47c0      	blx	r8
  4041c2:	ea49 0900 	orr.w	r9, r9, r0
  4041c6:	1c6b      	adds	r3, r5, #1
  4041c8:	f104 0468 	add.w	r4, r4, #104	; 0x68
  4041cc:	d1ed      	bne.n	4041aa <_fwalk_reent+0x1a>
  4041ce:	683f      	ldr	r7, [r7, #0]
  4041d0:	2f00      	cmp	r7, #0
  4041d2:	d1e6      	bne.n	4041a2 <_fwalk_reent+0x12>
  4041d4:	4648      	mov	r0, r9
  4041d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041da:	46b9      	mov	r9, r7
  4041dc:	4648      	mov	r0, r9
  4041de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4041e2:	bf00      	nop

004041e4 <__locale_mb_cur_max>:
  4041e4:	4b04      	ldr	r3, [pc, #16]	; (4041f8 <__locale_mb_cur_max+0x14>)
  4041e6:	4a05      	ldr	r2, [pc, #20]	; (4041fc <__locale_mb_cur_max+0x18>)
  4041e8:	681b      	ldr	r3, [r3, #0]
  4041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  4041ec:	2b00      	cmp	r3, #0
  4041ee:	bf08      	it	eq
  4041f0:	4613      	moveq	r3, r2
  4041f2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  4041f6:	4770      	bx	lr
  4041f8:	20400014 	.word	0x20400014
  4041fc:	20400854 	.word	0x20400854

00404200 <__retarget_lock_init_recursive>:
  404200:	4770      	bx	lr
  404202:	bf00      	nop

00404204 <__retarget_lock_close_recursive>:
  404204:	4770      	bx	lr
  404206:	bf00      	nop

00404208 <__retarget_lock_acquire_recursive>:
  404208:	4770      	bx	lr
  40420a:	bf00      	nop

0040420c <__retarget_lock_release_recursive>:
  40420c:	4770      	bx	lr
  40420e:	bf00      	nop

00404210 <__swhatbuf_r>:
  404210:	b570      	push	{r4, r5, r6, lr}
  404212:	460c      	mov	r4, r1
  404214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404218:	2900      	cmp	r1, #0
  40421a:	b090      	sub	sp, #64	; 0x40
  40421c:	4615      	mov	r5, r2
  40421e:	461e      	mov	r6, r3
  404220:	db14      	blt.n	40424c <__swhatbuf_r+0x3c>
  404222:	aa01      	add	r2, sp, #4
  404224:	f000 fd38 	bl	404c98 <_fstat_r>
  404228:	2800      	cmp	r0, #0
  40422a:	db0f      	blt.n	40424c <__swhatbuf_r+0x3c>
  40422c:	9a02      	ldr	r2, [sp, #8]
  40422e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  404232:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  404236:	fab2 f282 	clz	r2, r2
  40423a:	0952      	lsrs	r2, r2, #5
  40423c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404240:	f44f 6000 	mov.w	r0, #2048	; 0x800
  404244:	6032      	str	r2, [r6, #0]
  404246:	602b      	str	r3, [r5, #0]
  404248:	b010      	add	sp, #64	; 0x40
  40424a:	bd70      	pop	{r4, r5, r6, pc}
  40424c:	89a2      	ldrh	r2, [r4, #12]
  40424e:	2300      	movs	r3, #0
  404250:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  404254:	6033      	str	r3, [r6, #0]
  404256:	d004      	beq.n	404262 <__swhatbuf_r+0x52>
  404258:	2240      	movs	r2, #64	; 0x40
  40425a:	4618      	mov	r0, r3
  40425c:	602a      	str	r2, [r5, #0]
  40425e:	b010      	add	sp, #64	; 0x40
  404260:	bd70      	pop	{r4, r5, r6, pc}
  404262:	f44f 6380 	mov.w	r3, #1024	; 0x400
  404266:	602b      	str	r3, [r5, #0]
  404268:	b010      	add	sp, #64	; 0x40
  40426a:	bd70      	pop	{r4, r5, r6, pc}

0040426c <__smakebuf_r>:
  40426c:	898a      	ldrh	r2, [r1, #12]
  40426e:	0792      	lsls	r2, r2, #30
  404270:	460b      	mov	r3, r1
  404272:	d506      	bpl.n	404282 <__smakebuf_r+0x16>
  404274:	f101 0243 	add.w	r2, r1, #67	; 0x43
  404278:	2101      	movs	r1, #1
  40427a:	601a      	str	r2, [r3, #0]
  40427c:	611a      	str	r2, [r3, #16]
  40427e:	6159      	str	r1, [r3, #20]
  404280:	4770      	bx	lr
  404282:	b5f0      	push	{r4, r5, r6, r7, lr}
  404284:	b083      	sub	sp, #12
  404286:	ab01      	add	r3, sp, #4
  404288:	466a      	mov	r2, sp
  40428a:	460c      	mov	r4, r1
  40428c:	4606      	mov	r6, r0
  40428e:	f7ff ffbf 	bl	404210 <__swhatbuf_r>
  404292:	9900      	ldr	r1, [sp, #0]
  404294:	4605      	mov	r5, r0
  404296:	4630      	mov	r0, r6
  404298:	f7fd ff5a 	bl	402150 <_malloc_r>
  40429c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042a0:	b1d8      	cbz	r0, 4042da <__smakebuf_r+0x6e>
  4042a2:	9a01      	ldr	r2, [sp, #4]
  4042a4:	4f15      	ldr	r7, [pc, #84]	; (4042fc <__smakebuf_r+0x90>)
  4042a6:	9900      	ldr	r1, [sp, #0]
  4042a8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4042aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4042ae:	81a3      	strh	r3, [r4, #12]
  4042b0:	6020      	str	r0, [r4, #0]
  4042b2:	6120      	str	r0, [r4, #16]
  4042b4:	6161      	str	r1, [r4, #20]
  4042b6:	b91a      	cbnz	r2, 4042c0 <__smakebuf_r+0x54>
  4042b8:	432b      	orrs	r3, r5
  4042ba:	81a3      	strh	r3, [r4, #12]
  4042bc:	b003      	add	sp, #12
  4042be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4042c0:	4630      	mov	r0, r6
  4042c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  4042c6:	f000 fcfb 	bl	404cc0 <_isatty_r>
  4042ca:	b1a0      	cbz	r0, 4042f6 <__smakebuf_r+0x8a>
  4042cc:	89a3      	ldrh	r3, [r4, #12]
  4042ce:	f023 0303 	bic.w	r3, r3, #3
  4042d2:	f043 0301 	orr.w	r3, r3, #1
  4042d6:	b21b      	sxth	r3, r3
  4042d8:	e7ee      	b.n	4042b8 <__smakebuf_r+0x4c>
  4042da:	059a      	lsls	r2, r3, #22
  4042dc:	d4ee      	bmi.n	4042bc <__smakebuf_r+0x50>
  4042de:	f023 0303 	bic.w	r3, r3, #3
  4042e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
  4042e6:	f043 0302 	orr.w	r3, r3, #2
  4042ea:	2101      	movs	r1, #1
  4042ec:	81a3      	strh	r3, [r4, #12]
  4042ee:	6022      	str	r2, [r4, #0]
  4042f0:	6122      	str	r2, [r4, #16]
  4042f2:	6161      	str	r1, [r4, #20]
  4042f4:	e7e2      	b.n	4042bc <__smakebuf_r+0x50>
  4042f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4042fa:	e7dd      	b.n	4042b8 <__smakebuf_r+0x4c>
  4042fc:	00403a2d 	.word	0x00403a2d

00404300 <__ascii_mbtowc>:
  404300:	b082      	sub	sp, #8
  404302:	b149      	cbz	r1, 404318 <__ascii_mbtowc+0x18>
  404304:	b15a      	cbz	r2, 40431e <__ascii_mbtowc+0x1e>
  404306:	b16b      	cbz	r3, 404324 <__ascii_mbtowc+0x24>
  404308:	7813      	ldrb	r3, [r2, #0]
  40430a:	600b      	str	r3, [r1, #0]
  40430c:	7812      	ldrb	r2, [r2, #0]
  40430e:	1c10      	adds	r0, r2, #0
  404310:	bf18      	it	ne
  404312:	2001      	movne	r0, #1
  404314:	b002      	add	sp, #8
  404316:	4770      	bx	lr
  404318:	a901      	add	r1, sp, #4
  40431a:	2a00      	cmp	r2, #0
  40431c:	d1f3      	bne.n	404306 <__ascii_mbtowc+0x6>
  40431e:	4610      	mov	r0, r2
  404320:	b002      	add	sp, #8
  404322:	4770      	bx	lr
  404324:	f06f 0001 	mvn.w	r0, #1
  404328:	e7f4      	b.n	404314 <__ascii_mbtowc+0x14>
  40432a:	bf00      	nop
  40432c:	0000      	movs	r0, r0
	...

00404330 <memchr>:
  404330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  404334:	2a10      	cmp	r2, #16
  404336:	db2b      	blt.n	404390 <memchr+0x60>
  404338:	f010 0f07 	tst.w	r0, #7
  40433c:	d008      	beq.n	404350 <memchr+0x20>
  40433e:	f810 3b01 	ldrb.w	r3, [r0], #1
  404342:	3a01      	subs	r2, #1
  404344:	428b      	cmp	r3, r1
  404346:	d02d      	beq.n	4043a4 <memchr+0x74>
  404348:	f010 0f07 	tst.w	r0, #7
  40434c:	b342      	cbz	r2, 4043a0 <memchr+0x70>
  40434e:	d1f6      	bne.n	40433e <memchr+0xe>
  404350:	b4f0      	push	{r4, r5, r6, r7}
  404352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  404356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40435a:	f022 0407 	bic.w	r4, r2, #7
  40435e:	f07f 0700 	mvns.w	r7, #0
  404362:	2300      	movs	r3, #0
  404364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  404368:	3c08      	subs	r4, #8
  40436a:	ea85 0501 	eor.w	r5, r5, r1
  40436e:	ea86 0601 	eor.w	r6, r6, r1
  404372:	fa85 f547 	uadd8	r5, r5, r7
  404376:	faa3 f587 	sel	r5, r3, r7
  40437a:	fa86 f647 	uadd8	r6, r6, r7
  40437e:	faa5 f687 	sel	r6, r5, r7
  404382:	b98e      	cbnz	r6, 4043a8 <memchr+0x78>
  404384:	d1ee      	bne.n	404364 <memchr+0x34>
  404386:	bcf0      	pop	{r4, r5, r6, r7}
  404388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40438c:	f002 0207 	and.w	r2, r2, #7
  404390:	b132      	cbz	r2, 4043a0 <memchr+0x70>
  404392:	f810 3b01 	ldrb.w	r3, [r0], #1
  404396:	3a01      	subs	r2, #1
  404398:	ea83 0301 	eor.w	r3, r3, r1
  40439c:	b113      	cbz	r3, 4043a4 <memchr+0x74>
  40439e:	d1f8      	bne.n	404392 <memchr+0x62>
  4043a0:	2000      	movs	r0, #0
  4043a2:	4770      	bx	lr
  4043a4:	3801      	subs	r0, #1
  4043a6:	4770      	bx	lr
  4043a8:	2d00      	cmp	r5, #0
  4043aa:	bf06      	itte	eq
  4043ac:	4635      	moveq	r5, r6
  4043ae:	3803      	subeq	r0, #3
  4043b0:	3807      	subne	r0, #7
  4043b2:	f015 0f01 	tst.w	r5, #1
  4043b6:	d107      	bne.n	4043c8 <memchr+0x98>
  4043b8:	3001      	adds	r0, #1
  4043ba:	f415 7f80 	tst.w	r5, #256	; 0x100
  4043be:	bf02      	ittt	eq
  4043c0:	3001      	addeq	r0, #1
  4043c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  4043c6:	3001      	addeq	r0, #1
  4043c8:	bcf0      	pop	{r4, r5, r6, r7}
  4043ca:	3801      	subs	r0, #1
  4043cc:	4770      	bx	lr
  4043ce:	bf00      	nop

004043d0 <memcpy>:
  4043d0:	4684      	mov	ip, r0
  4043d2:	ea41 0300 	orr.w	r3, r1, r0
  4043d6:	f013 0303 	ands.w	r3, r3, #3
  4043da:	d16d      	bne.n	4044b8 <memcpy+0xe8>
  4043dc:	3a40      	subs	r2, #64	; 0x40
  4043de:	d341      	bcc.n	404464 <memcpy+0x94>
  4043e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043e4:	f840 3b04 	str.w	r3, [r0], #4
  4043e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043ec:	f840 3b04 	str.w	r3, [r0], #4
  4043f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4043f4:	f840 3b04 	str.w	r3, [r0], #4
  4043f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4043fc:	f840 3b04 	str.w	r3, [r0], #4
  404400:	f851 3b04 	ldr.w	r3, [r1], #4
  404404:	f840 3b04 	str.w	r3, [r0], #4
  404408:	f851 3b04 	ldr.w	r3, [r1], #4
  40440c:	f840 3b04 	str.w	r3, [r0], #4
  404410:	f851 3b04 	ldr.w	r3, [r1], #4
  404414:	f840 3b04 	str.w	r3, [r0], #4
  404418:	f851 3b04 	ldr.w	r3, [r1], #4
  40441c:	f840 3b04 	str.w	r3, [r0], #4
  404420:	f851 3b04 	ldr.w	r3, [r1], #4
  404424:	f840 3b04 	str.w	r3, [r0], #4
  404428:	f851 3b04 	ldr.w	r3, [r1], #4
  40442c:	f840 3b04 	str.w	r3, [r0], #4
  404430:	f851 3b04 	ldr.w	r3, [r1], #4
  404434:	f840 3b04 	str.w	r3, [r0], #4
  404438:	f851 3b04 	ldr.w	r3, [r1], #4
  40443c:	f840 3b04 	str.w	r3, [r0], #4
  404440:	f851 3b04 	ldr.w	r3, [r1], #4
  404444:	f840 3b04 	str.w	r3, [r0], #4
  404448:	f851 3b04 	ldr.w	r3, [r1], #4
  40444c:	f840 3b04 	str.w	r3, [r0], #4
  404450:	f851 3b04 	ldr.w	r3, [r1], #4
  404454:	f840 3b04 	str.w	r3, [r0], #4
  404458:	f851 3b04 	ldr.w	r3, [r1], #4
  40445c:	f840 3b04 	str.w	r3, [r0], #4
  404460:	3a40      	subs	r2, #64	; 0x40
  404462:	d2bd      	bcs.n	4043e0 <memcpy+0x10>
  404464:	3230      	adds	r2, #48	; 0x30
  404466:	d311      	bcc.n	40448c <memcpy+0xbc>
  404468:	f851 3b04 	ldr.w	r3, [r1], #4
  40446c:	f840 3b04 	str.w	r3, [r0], #4
  404470:	f851 3b04 	ldr.w	r3, [r1], #4
  404474:	f840 3b04 	str.w	r3, [r0], #4
  404478:	f851 3b04 	ldr.w	r3, [r1], #4
  40447c:	f840 3b04 	str.w	r3, [r0], #4
  404480:	f851 3b04 	ldr.w	r3, [r1], #4
  404484:	f840 3b04 	str.w	r3, [r0], #4
  404488:	3a10      	subs	r2, #16
  40448a:	d2ed      	bcs.n	404468 <memcpy+0x98>
  40448c:	320c      	adds	r2, #12
  40448e:	d305      	bcc.n	40449c <memcpy+0xcc>
  404490:	f851 3b04 	ldr.w	r3, [r1], #4
  404494:	f840 3b04 	str.w	r3, [r0], #4
  404498:	3a04      	subs	r2, #4
  40449a:	d2f9      	bcs.n	404490 <memcpy+0xc0>
  40449c:	3204      	adds	r2, #4
  40449e:	d008      	beq.n	4044b2 <memcpy+0xe2>
  4044a0:	07d2      	lsls	r2, r2, #31
  4044a2:	bf1c      	itt	ne
  4044a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4044a8:	f800 3b01 	strbne.w	r3, [r0], #1
  4044ac:	d301      	bcc.n	4044b2 <memcpy+0xe2>
  4044ae:	880b      	ldrh	r3, [r1, #0]
  4044b0:	8003      	strh	r3, [r0, #0]
  4044b2:	4660      	mov	r0, ip
  4044b4:	4770      	bx	lr
  4044b6:	bf00      	nop
  4044b8:	2a08      	cmp	r2, #8
  4044ba:	d313      	bcc.n	4044e4 <memcpy+0x114>
  4044bc:	078b      	lsls	r3, r1, #30
  4044be:	d08d      	beq.n	4043dc <memcpy+0xc>
  4044c0:	f010 0303 	ands.w	r3, r0, #3
  4044c4:	d08a      	beq.n	4043dc <memcpy+0xc>
  4044c6:	f1c3 0304 	rsb	r3, r3, #4
  4044ca:	1ad2      	subs	r2, r2, r3
  4044cc:	07db      	lsls	r3, r3, #31
  4044ce:	bf1c      	itt	ne
  4044d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4044d4:	f800 3b01 	strbne.w	r3, [r0], #1
  4044d8:	d380      	bcc.n	4043dc <memcpy+0xc>
  4044da:	f831 3b02 	ldrh.w	r3, [r1], #2
  4044de:	f820 3b02 	strh.w	r3, [r0], #2
  4044e2:	e77b      	b.n	4043dc <memcpy+0xc>
  4044e4:	3a04      	subs	r2, #4
  4044e6:	d3d9      	bcc.n	40449c <memcpy+0xcc>
  4044e8:	3a01      	subs	r2, #1
  4044ea:	f811 3b01 	ldrb.w	r3, [r1], #1
  4044ee:	f800 3b01 	strb.w	r3, [r0], #1
  4044f2:	d2f9      	bcs.n	4044e8 <memcpy+0x118>
  4044f4:	780b      	ldrb	r3, [r1, #0]
  4044f6:	7003      	strb	r3, [r0, #0]
  4044f8:	784b      	ldrb	r3, [r1, #1]
  4044fa:	7043      	strb	r3, [r0, #1]
  4044fc:	788b      	ldrb	r3, [r1, #2]
  4044fe:	7083      	strb	r3, [r0, #2]
  404500:	4660      	mov	r0, ip
  404502:	4770      	bx	lr

00404504 <memmove>:
  404504:	4288      	cmp	r0, r1
  404506:	b5f0      	push	{r4, r5, r6, r7, lr}
  404508:	d90d      	bls.n	404526 <memmove+0x22>
  40450a:	188b      	adds	r3, r1, r2
  40450c:	4298      	cmp	r0, r3
  40450e:	d20a      	bcs.n	404526 <memmove+0x22>
  404510:	1884      	adds	r4, r0, r2
  404512:	2a00      	cmp	r2, #0
  404514:	d051      	beq.n	4045ba <memmove+0xb6>
  404516:	4622      	mov	r2, r4
  404518:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  40451c:	f802 4d01 	strb.w	r4, [r2, #-1]!
  404520:	4299      	cmp	r1, r3
  404522:	d1f9      	bne.n	404518 <memmove+0x14>
  404524:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404526:	2a0f      	cmp	r2, #15
  404528:	d948      	bls.n	4045bc <memmove+0xb8>
  40452a:	ea41 0300 	orr.w	r3, r1, r0
  40452e:	079b      	lsls	r3, r3, #30
  404530:	d146      	bne.n	4045c0 <memmove+0xbc>
  404532:	f100 0410 	add.w	r4, r0, #16
  404536:	f101 0310 	add.w	r3, r1, #16
  40453a:	4615      	mov	r5, r2
  40453c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  404540:	f844 6c10 	str.w	r6, [r4, #-16]
  404544:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  404548:	f844 6c0c 	str.w	r6, [r4, #-12]
  40454c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  404550:	f844 6c08 	str.w	r6, [r4, #-8]
  404554:	3d10      	subs	r5, #16
  404556:	f853 6c04 	ldr.w	r6, [r3, #-4]
  40455a:	f844 6c04 	str.w	r6, [r4, #-4]
  40455e:	2d0f      	cmp	r5, #15
  404560:	f103 0310 	add.w	r3, r3, #16
  404564:	f104 0410 	add.w	r4, r4, #16
  404568:	d8e8      	bhi.n	40453c <memmove+0x38>
  40456a:	f1a2 0310 	sub.w	r3, r2, #16
  40456e:	f023 030f 	bic.w	r3, r3, #15
  404572:	f002 0e0f 	and.w	lr, r2, #15
  404576:	3310      	adds	r3, #16
  404578:	f1be 0f03 	cmp.w	lr, #3
  40457c:	4419      	add	r1, r3
  40457e:	4403      	add	r3, r0
  404580:	d921      	bls.n	4045c6 <memmove+0xc2>
  404582:	1f1e      	subs	r6, r3, #4
  404584:	460d      	mov	r5, r1
  404586:	4674      	mov	r4, lr
  404588:	3c04      	subs	r4, #4
  40458a:	f855 7b04 	ldr.w	r7, [r5], #4
  40458e:	f846 7f04 	str.w	r7, [r6, #4]!
  404592:	2c03      	cmp	r4, #3
  404594:	d8f8      	bhi.n	404588 <memmove+0x84>
  404596:	f1ae 0404 	sub.w	r4, lr, #4
  40459a:	f024 0403 	bic.w	r4, r4, #3
  40459e:	3404      	adds	r4, #4
  4045a0:	4421      	add	r1, r4
  4045a2:	4423      	add	r3, r4
  4045a4:	f002 0203 	and.w	r2, r2, #3
  4045a8:	b162      	cbz	r2, 4045c4 <memmove+0xc0>
  4045aa:	3b01      	subs	r3, #1
  4045ac:	440a      	add	r2, r1
  4045ae:	f811 4b01 	ldrb.w	r4, [r1], #1
  4045b2:	f803 4f01 	strb.w	r4, [r3, #1]!
  4045b6:	428a      	cmp	r2, r1
  4045b8:	d1f9      	bne.n	4045ae <memmove+0xaa>
  4045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045bc:	4603      	mov	r3, r0
  4045be:	e7f3      	b.n	4045a8 <memmove+0xa4>
  4045c0:	4603      	mov	r3, r0
  4045c2:	e7f2      	b.n	4045aa <memmove+0xa6>
  4045c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4045c6:	4672      	mov	r2, lr
  4045c8:	e7ee      	b.n	4045a8 <memmove+0xa4>
  4045ca:	bf00      	nop

004045cc <_realloc_r>:
  4045cc:	2900      	cmp	r1, #0
  4045ce:	f000 8095 	beq.w	4046fc <_realloc_r+0x130>
  4045d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4045d6:	460d      	mov	r5, r1
  4045d8:	4616      	mov	r6, r2
  4045da:	b083      	sub	sp, #12
  4045dc:	4680      	mov	r8, r0
  4045de:	f106 070b 	add.w	r7, r6, #11
  4045e2:	f7fe f8b3 	bl	40274c <__malloc_lock>
  4045e6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4045ea:	2f16      	cmp	r7, #22
  4045ec:	f02e 0403 	bic.w	r4, lr, #3
  4045f0:	f1a5 0908 	sub.w	r9, r5, #8
  4045f4:	d83c      	bhi.n	404670 <_realloc_r+0xa4>
  4045f6:	2210      	movs	r2, #16
  4045f8:	4617      	mov	r7, r2
  4045fa:	42be      	cmp	r6, r7
  4045fc:	d83d      	bhi.n	40467a <_realloc_r+0xae>
  4045fe:	4294      	cmp	r4, r2
  404600:	da43      	bge.n	40468a <_realloc_r+0xbe>
  404602:	4bc4      	ldr	r3, [pc, #784]	; (404914 <_realloc_r+0x348>)
  404604:	6899      	ldr	r1, [r3, #8]
  404606:	eb09 0004 	add.w	r0, r9, r4
  40460a:	4288      	cmp	r0, r1
  40460c:	f000 80b4 	beq.w	404778 <_realloc_r+0x1ac>
  404610:	6843      	ldr	r3, [r0, #4]
  404612:	f023 0101 	bic.w	r1, r3, #1
  404616:	4401      	add	r1, r0
  404618:	6849      	ldr	r1, [r1, #4]
  40461a:	07c9      	lsls	r1, r1, #31
  40461c:	d54c      	bpl.n	4046b8 <_realloc_r+0xec>
  40461e:	f01e 0f01 	tst.w	lr, #1
  404622:	f000 809b 	beq.w	40475c <_realloc_r+0x190>
  404626:	4631      	mov	r1, r6
  404628:	4640      	mov	r0, r8
  40462a:	f7fd fd91 	bl	402150 <_malloc_r>
  40462e:	4606      	mov	r6, r0
  404630:	2800      	cmp	r0, #0
  404632:	d03a      	beq.n	4046aa <_realloc_r+0xde>
  404634:	f855 3c04 	ldr.w	r3, [r5, #-4]
  404638:	f023 0301 	bic.w	r3, r3, #1
  40463c:	444b      	add	r3, r9
  40463e:	f1a0 0208 	sub.w	r2, r0, #8
  404642:	429a      	cmp	r2, r3
  404644:	f000 8121 	beq.w	40488a <_realloc_r+0x2be>
  404648:	1f22      	subs	r2, r4, #4
  40464a:	2a24      	cmp	r2, #36	; 0x24
  40464c:	f200 8107 	bhi.w	40485e <_realloc_r+0x292>
  404650:	2a13      	cmp	r2, #19
  404652:	f200 80db 	bhi.w	40480c <_realloc_r+0x240>
  404656:	4603      	mov	r3, r0
  404658:	462a      	mov	r2, r5
  40465a:	6811      	ldr	r1, [r2, #0]
  40465c:	6019      	str	r1, [r3, #0]
  40465e:	6851      	ldr	r1, [r2, #4]
  404660:	6059      	str	r1, [r3, #4]
  404662:	6892      	ldr	r2, [r2, #8]
  404664:	609a      	str	r2, [r3, #8]
  404666:	4629      	mov	r1, r5
  404668:	4640      	mov	r0, r8
  40466a:	f7ff fb33 	bl	403cd4 <_free_r>
  40466e:	e01c      	b.n	4046aa <_realloc_r+0xde>
  404670:	f027 0707 	bic.w	r7, r7, #7
  404674:	2f00      	cmp	r7, #0
  404676:	463a      	mov	r2, r7
  404678:	dabf      	bge.n	4045fa <_realloc_r+0x2e>
  40467a:	2600      	movs	r6, #0
  40467c:	230c      	movs	r3, #12
  40467e:	4630      	mov	r0, r6
  404680:	f8c8 3000 	str.w	r3, [r8]
  404684:	b003      	add	sp, #12
  404686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40468a:	462e      	mov	r6, r5
  40468c:	1be3      	subs	r3, r4, r7
  40468e:	2b0f      	cmp	r3, #15
  404690:	d81e      	bhi.n	4046d0 <_realloc_r+0x104>
  404692:	f8d9 3004 	ldr.w	r3, [r9, #4]
  404696:	f003 0301 	and.w	r3, r3, #1
  40469a:	4323      	orrs	r3, r4
  40469c:	444c      	add	r4, r9
  40469e:	f8c9 3004 	str.w	r3, [r9, #4]
  4046a2:	6863      	ldr	r3, [r4, #4]
  4046a4:	f043 0301 	orr.w	r3, r3, #1
  4046a8:	6063      	str	r3, [r4, #4]
  4046aa:	4640      	mov	r0, r8
  4046ac:	f7fe f854 	bl	402758 <__malloc_unlock>
  4046b0:	4630      	mov	r0, r6
  4046b2:	b003      	add	sp, #12
  4046b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4046b8:	f023 0303 	bic.w	r3, r3, #3
  4046bc:	18e1      	adds	r1, r4, r3
  4046be:	4291      	cmp	r1, r2
  4046c0:	db1f      	blt.n	404702 <_realloc_r+0x136>
  4046c2:	68c3      	ldr	r3, [r0, #12]
  4046c4:	6882      	ldr	r2, [r0, #8]
  4046c6:	462e      	mov	r6, r5
  4046c8:	60d3      	str	r3, [r2, #12]
  4046ca:	460c      	mov	r4, r1
  4046cc:	609a      	str	r2, [r3, #8]
  4046ce:	e7dd      	b.n	40468c <_realloc_r+0xc0>
  4046d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4046d4:	eb09 0107 	add.w	r1, r9, r7
  4046d8:	f002 0201 	and.w	r2, r2, #1
  4046dc:	444c      	add	r4, r9
  4046de:	f043 0301 	orr.w	r3, r3, #1
  4046e2:	4317      	orrs	r7, r2
  4046e4:	f8c9 7004 	str.w	r7, [r9, #4]
  4046e8:	604b      	str	r3, [r1, #4]
  4046ea:	6863      	ldr	r3, [r4, #4]
  4046ec:	f043 0301 	orr.w	r3, r3, #1
  4046f0:	3108      	adds	r1, #8
  4046f2:	6063      	str	r3, [r4, #4]
  4046f4:	4640      	mov	r0, r8
  4046f6:	f7ff faed 	bl	403cd4 <_free_r>
  4046fa:	e7d6      	b.n	4046aa <_realloc_r+0xde>
  4046fc:	4611      	mov	r1, r2
  4046fe:	f7fd bd27 	b.w	402150 <_malloc_r>
  404702:	f01e 0f01 	tst.w	lr, #1
  404706:	d18e      	bne.n	404626 <_realloc_r+0x5a>
  404708:	f855 1c08 	ldr.w	r1, [r5, #-8]
  40470c:	eba9 0a01 	sub.w	sl, r9, r1
  404710:	f8da 1004 	ldr.w	r1, [sl, #4]
  404714:	f021 0103 	bic.w	r1, r1, #3
  404718:	440b      	add	r3, r1
  40471a:	4423      	add	r3, r4
  40471c:	4293      	cmp	r3, r2
  40471e:	db25      	blt.n	40476c <_realloc_r+0x1a0>
  404720:	68c2      	ldr	r2, [r0, #12]
  404722:	6881      	ldr	r1, [r0, #8]
  404724:	4656      	mov	r6, sl
  404726:	60ca      	str	r2, [r1, #12]
  404728:	6091      	str	r1, [r2, #8]
  40472a:	f8da 100c 	ldr.w	r1, [sl, #12]
  40472e:	f856 0f08 	ldr.w	r0, [r6, #8]!
  404732:	1f22      	subs	r2, r4, #4
  404734:	2a24      	cmp	r2, #36	; 0x24
  404736:	60c1      	str	r1, [r0, #12]
  404738:	6088      	str	r0, [r1, #8]
  40473a:	f200 8094 	bhi.w	404866 <_realloc_r+0x29a>
  40473e:	2a13      	cmp	r2, #19
  404740:	d96f      	bls.n	404822 <_realloc_r+0x256>
  404742:	6829      	ldr	r1, [r5, #0]
  404744:	f8ca 1008 	str.w	r1, [sl, #8]
  404748:	6869      	ldr	r1, [r5, #4]
  40474a:	f8ca 100c 	str.w	r1, [sl, #12]
  40474e:	2a1b      	cmp	r2, #27
  404750:	f200 80a2 	bhi.w	404898 <_realloc_r+0x2cc>
  404754:	3508      	adds	r5, #8
  404756:	f10a 0210 	add.w	r2, sl, #16
  40475a:	e063      	b.n	404824 <_realloc_r+0x258>
  40475c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  404760:	eba9 0a03 	sub.w	sl, r9, r3
  404764:	f8da 1004 	ldr.w	r1, [sl, #4]
  404768:	f021 0103 	bic.w	r1, r1, #3
  40476c:	1863      	adds	r3, r4, r1
  40476e:	4293      	cmp	r3, r2
  404770:	f6ff af59 	blt.w	404626 <_realloc_r+0x5a>
  404774:	4656      	mov	r6, sl
  404776:	e7d8      	b.n	40472a <_realloc_r+0x15e>
  404778:	6841      	ldr	r1, [r0, #4]
  40477a:	f021 0b03 	bic.w	fp, r1, #3
  40477e:	44a3      	add	fp, r4
  404780:	f107 0010 	add.w	r0, r7, #16
  404784:	4583      	cmp	fp, r0
  404786:	da56      	bge.n	404836 <_realloc_r+0x26a>
  404788:	f01e 0f01 	tst.w	lr, #1
  40478c:	f47f af4b 	bne.w	404626 <_realloc_r+0x5a>
  404790:	f855 1c08 	ldr.w	r1, [r5, #-8]
  404794:	eba9 0a01 	sub.w	sl, r9, r1
  404798:	f8da 1004 	ldr.w	r1, [sl, #4]
  40479c:	f021 0103 	bic.w	r1, r1, #3
  4047a0:	448b      	add	fp, r1
  4047a2:	4558      	cmp	r0, fp
  4047a4:	dce2      	bgt.n	40476c <_realloc_r+0x1a0>
  4047a6:	4656      	mov	r6, sl
  4047a8:	f8da 100c 	ldr.w	r1, [sl, #12]
  4047ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4047b0:	1f22      	subs	r2, r4, #4
  4047b2:	2a24      	cmp	r2, #36	; 0x24
  4047b4:	60c1      	str	r1, [r0, #12]
  4047b6:	6088      	str	r0, [r1, #8]
  4047b8:	f200 808f 	bhi.w	4048da <_realloc_r+0x30e>
  4047bc:	2a13      	cmp	r2, #19
  4047be:	f240 808a 	bls.w	4048d6 <_realloc_r+0x30a>
  4047c2:	6829      	ldr	r1, [r5, #0]
  4047c4:	f8ca 1008 	str.w	r1, [sl, #8]
  4047c8:	6869      	ldr	r1, [r5, #4]
  4047ca:	f8ca 100c 	str.w	r1, [sl, #12]
  4047ce:	2a1b      	cmp	r2, #27
  4047d0:	f200 808a 	bhi.w	4048e8 <_realloc_r+0x31c>
  4047d4:	3508      	adds	r5, #8
  4047d6:	f10a 0210 	add.w	r2, sl, #16
  4047da:	6829      	ldr	r1, [r5, #0]
  4047dc:	6011      	str	r1, [r2, #0]
  4047de:	6869      	ldr	r1, [r5, #4]
  4047e0:	6051      	str	r1, [r2, #4]
  4047e2:	68a9      	ldr	r1, [r5, #8]
  4047e4:	6091      	str	r1, [r2, #8]
  4047e6:	eb0a 0107 	add.w	r1, sl, r7
  4047ea:	ebab 0207 	sub.w	r2, fp, r7
  4047ee:	f042 0201 	orr.w	r2, r2, #1
  4047f2:	6099      	str	r1, [r3, #8]
  4047f4:	604a      	str	r2, [r1, #4]
  4047f6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4047fa:	f003 0301 	and.w	r3, r3, #1
  4047fe:	431f      	orrs	r7, r3
  404800:	4640      	mov	r0, r8
  404802:	f8ca 7004 	str.w	r7, [sl, #4]
  404806:	f7fd ffa7 	bl	402758 <__malloc_unlock>
  40480a:	e751      	b.n	4046b0 <_realloc_r+0xe4>
  40480c:	682b      	ldr	r3, [r5, #0]
  40480e:	6003      	str	r3, [r0, #0]
  404810:	686b      	ldr	r3, [r5, #4]
  404812:	6043      	str	r3, [r0, #4]
  404814:	2a1b      	cmp	r2, #27
  404816:	d82d      	bhi.n	404874 <_realloc_r+0x2a8>
  404818:	f100 0308 	add.w	r3, r0, #8
  40481c:	f105 0208 	add.w	r2, r5, #8
  404820:	e71b      	b.n	40465a <_realloc_r+0x8e>
  404822:	4632      	mov	r2, r6
  404824:	6829      	ldr	r1, [r5, #0]
  404826:	6011      	str	r1, [r2, #0]
  404828:	6869      	ldr	r1, [r5, #4]
  40482a:	6051      	str	r1, [r2, #4]
  40482c:	68a9      	ldr	r1, [r5, #8]
  40482e:	6091      	str	r1, [r2, #8]
  404830:	461c      	mov	r4, r3
  404832:	46d1      	mov	r9, sl
  404834:	e72a      	b.n	40468c <_realloc_r+0xc0>
  404836:	eb09 0107 	add.w	r1, r9, r7
  40483a:	ebab 0b07 	sub.w	fp, fp, r7
  40483e:	f04b 0201 	orr.w	r2, fp, #1
  404842:	6099      	str	r1, [r3, #8]
  404844:	604a      	str	r2, [r1, #4]
  404846:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40484a:	f003 0301 	and.w	r3, r3, #1
  40484e:	431f      	orrs	r7, r3
  404850:	4640      	mov	r0, r8
  404852:	f845 7c04 	str.w	r7, [r5, #-4]
  404856:	f7fd ff7f 	bl	402758 <__malloc_unlock>
  40485a:	462e      	mov	r6, r5
  40485c:	e728      	b.n	4046b0 <_realloc_r+0xe4>
  40485e:	4629      	mov	r1, r5
  404860:	f7ff fe50 	bl	404504 <memmove>
  404864:	e6ff      	b.n	404666 <_realloc_r+0x9a>
  404866:	4629      	mov	r1, r5
  404868:	4630      	mov	r0, r6
  40486a:	461c      	mov	r4, r3
  40486c:	46d1      	mov	r9, sl
  40486e:	f7ff fe49 	bl	404504 <memmove>
  404872:	e70b      	b.n	40468c <_realloc_r+0xc0>
  404874:	68ab      	ldr	r3, [r5, #8]
  404876:	6083      	str	r3, [r0, #8]
  404878:	68eb      	ldr	r3, [r5, #12]
  40487a:	60c3      	str	r3, [r0, #12]
  40487c:	2a24      	cmp	r2, #36	; 0x24
  40487e:	d017      	beq.n	4048b0 <_realloc_r+0x2e4>
  404880:	f100 0310 	add.w	r3, r0, #16
  404884:	f105 0210 	add.w	r2, r5, #16
  404888:	e6e7      	b.n	40465a <_realloc_r+0x8e>
  40488a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40488e:	f023 0303 	bic.w	r3, r3, #3
  404892:	441c      	add	r4, r3
  404894:	462e      	mov	r6, r5
  404896:	e6f9      	b.n	40468c <_realloc_r+0xc0>
  404898:	68a9      	ldr	r1, [r5, #8]
  40489a:	f8ca 1010 	str.w	r1, [sl, #16]
  40489e:	68e9      	ldr	r1, [r5, #12]
  4048a0:	f8ca 1014 	str.w	r1, [sl, #20]
  4048a4:	2a24      	cmp	r2, #36	; 0x24
  4048a6:	d00c      	beq.n	4048c2 <_realloc_r+0x2f6>
  4048a8:	3510      	adds	r5, #16
  4048aa:	f10a 0218 	add.w	r2, sl, #24
  4048ae:	e7b9      	b.n	404824 <_realloc_r+0x258>
  4048b0:	692b      	ldr	r3, [r5, #16]
  4048b2:	6103      	str	r3, [r0, #16]
  4048b4:	696b      	ldr	r3, [r5, #20]
  4048b6:	6143      	str	r3, [r0, #20]
  4048b8:	f105 0218 	add.w	r2, r5, #24
  4048bc:	f100 0318 	add.w	r3, r0, #24
  4048c0:	e6cb      	b.n	40465a <_realloc_r+0x8e>
  4048c2:	692a      	ldr	r2, [r5, #16]
  4048c4:	f8ca 2018 	str.w	r2, [sl, #24]
  4048c8:	696a      	ldr	r2, [r5, #20]
  4048ca:	f8ca 201c 	str.w	r2, [sl, #28]
  4048ce:	3518      	adds	r5, #24
  4048d0:	f10a 0220 	add.w	r2, sl, #32
  4048d4:	e7a6      	b.n	404824 <_realloc_r+0x258>
  4048d6:	4632      	mov	r2, r6
  4048d8:	e77f      	b.n	4047da <_realloc_r+0x20e>
  4048da:	4629      	mov	r1, r5
  4048dc:	4630      	mov	r0, r6
  4048de:	9301      	str	r3, [sp, #4]
  4048e0:	f7ff fe10 	bl	404504 <memmove>
  4048e4:	9b01      	ldr	r3, [sp, #4]
  4048e6:	e77e      	b.n	4047e6 <_realloc_r+0x21a>
  4048e8:	68a9      	ldr	r1, [r5, #8]
  4048ea:	f8ca 1010 	str.w	r1, [sl, #16]
  4048ee:	68e9      	ldr	r1, [r5, #12]
  4048f0:	f8ca 1014 	str.w	r1, [sl, #20]
  4048f4:	2a24      	cmp	r2, #36	; 0x24
  4048f6:	d003      	beq.n	404900 <_realloc_r+0x334>
  4048f8:	3510      	adds	r5, #16
  4048fa:	f10a 0218 	add.w	r2, sl, #24
  4048fe:	e76c      	b.n	4047da <_realloc_r+0x20e>
  404900:	692a      	ldr	r2, [r5, #16]
  404902:	f8ca 2018 	str.w	r2, [sl, #24]
  404906:	696a      	ldr	r2, [r5, #20]
  404908:	f8ca 201c 	str.w	r2, [sl, #28]
  40490c:	3518      	adds	r5, #24
  40490e:	f10a 0220 	add.w	r2, sl, #32
  404912:	e762      	b.n	4047da <_realloc_r+0x20e>
  404914:	20400440 	.word	0x20400440

00404918 <__sread>:
  404918:	b510      	push	{r4, lr}
  40491a:	460c      	mov	r4, r1
  40491c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404920:	f000 f9f6 	bl	404d10 <_read_r>
  404924:	2800      	cmp	r0, #0
  404926:	db03      	blt.n	404930 <__sread+0x18>
  404928:	6d23      	ldr	r3, [r4, #80]	; 0x50
  40492a:	4403      	add	r3, r0
  40492c:	6523      	str	r3, [r4, #80]	; 0x50
  40492e:	bd10      	pop	{r4, pc}
  404930:	89a3      	ldrh	r3, [r4, #12]
  404932:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  404936:	81a3      	strh	r3, [r4, #12]
  404938:	bd10      	pop	{r4, pc}
  40493a:	bf00      	nop

0040493c <__swrite>:
  40493c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  404940:	4616      	mov	r6, r2
  404942:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  404946:	461f      	mov	r7, r3
  404948:	05d3      	lsls	r3, r2, #23
  40494a:	460c      	mov	r4, r1
  40494c:	4605      	mov	r5, r0
  40494e:	d507      	bpl.n	404960 <__swrite+0x24>
  404950:	2200      	movs	r2, #0
  404952:	2302      	movs	r3, #2
  404954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404958:	f000 f9c4 	bl	404ce4 <_lseek_r>
  40495c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  404964:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  404968:	81a2      	strh	r2, [r4, #12]
  40496a:	463b      	mov	r3, r7
  40496c:	4632      	mov	r2, r6
  40496e:	4628      	mov	r0, r5
  404970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  404974:	f000 b8a4 	b.w	404ac0 <_write_r>

00404978 <__sseek>:
  404978:	b510      	push	{r4, lr}
  40497a:	460c      	mov	r4, r1
  40497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  404980:	f000 f9b0 	bl	404ce4 <_lseek_r>
  404984:	89a3      	ldrh	r3, [r4, #12]
  404986:	1c42      	adds	r2, r0, #1
  404988:	bf0e      	itee	eq
  40498a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40498e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  404992:	6520      	strne	r0, [r4, #80]	; 0x50
  404994:	81a3      	strh	r3, [r4, #12]
  404996:	bd10      	pop	{r4, pc}

00404998 <__sclose>:
  404998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40499c:	f000 b908 	b.w	404bb0 <_close_r>

004049a0 <__swbuf_r>:
  4049a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4049a2:	460d      	mov	r5, r1
  4049a4:	4614      	mov	r4, r2
  4049a6:	4606      	mov	r6, r0
  4049a8:	b110      	cbz	r0, 4049b0 <__swbuf_r+0x10>
  4049aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	d04b      	beq.n	404a48 <__swbuf_r+0xa8>
  4049b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049b4:	69a3      	ldr	r3, [r4, #24]
  4049b6:	60a3      	str	r3, [r4, #8]
  4049b8:	b291      	uxth	r1, r2
  4049ba:	0708      	lsls	r0, r1, #28
  4049bc:	d539      	bpl.n	404a32 <__swbuf_r+0x92>
  4049be:	6923      	ldr	r3, [r4, #16]
  4049c0:	2b00      	cmp	r3, #0
  4049c2:	d036      	beq.n	404a32 <__swbuf_r+0x92>
  4049c4:	b2ed      	uxtb	r5, r5
  4049c6:	0489      	lsls	r1, r1, #18
  4049c8:	462f      	mov	r7, r5
  4049ca:	d515      	bpl.n	4049f8 <__swbuf_r+0x58>
  4049cc:	6822      	ldr	r2, [r4, #0]
  4049ce:	6961      	ldr	r1, [r4, #20]
  4049d0:	1ad3      	subs	r3, r2, r3
  4049d2:	428b      	cmp	r3, r1
  4049d4:	da1c      	bge.n	404a10 <__swbuf_r+0x70>
  4049d6:	3301      	adds	r3, #1
  4049d8:	68a1      	ldr	r1, [r4, #8]
  4049da:	1c50      	adds	r0, r2, #1
  4049dc:	3901      	subs	r1, #1
  4049de:	60a1      	str	r1, [r4, #8]
  4049e0:	6020      	str	r0, [r4, #0]
  4049e2:	7015      	strb	r5, [r2, #0]
  4049e4:	6962      	ldr	r2, [r4, #20]
  4049e6:	429a      	cmp	r2, r3
  4049e8:	d01a      	beq.n	404a20 <__swbuf_r+0x80>
  4049ea:	89a3      	ldrh	r3, [r4, #12]
  4049ec:	07db      	lsls	r3, r3, #31
  4049ee:	d501      	bpl.n	4049f4 <__swbuf_r+0x54>
  4049f0:	2d0a      	cmp	r5, #10
  4049f2:	d015      	beq.n	404a20 <__swbuf_r+0x80>
  4049f4:	4638      	mov	r0, r7
  4049f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4049f8:	6e61      	ldr	r1, [r4, #100]	; 0x64
  4049fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  4049fe:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  404a02:	81a2      	strh	r2, [r4, #12]
  404a04:	6822      	ldr	r2, [r4, #0]
  404a06:	6661      	str	r1, [r4, #100]	; 0x64
  404a08:	6961      	ldr	r1, [r4, #20]
  404a0a:	1ad3      	subs	r3, r2, r3
  404a0c:	428b      	cmp	r3, r1
  404a0e:	dbe2      	blt.n	4049d6 <__swbuf_r+0x36>
  404a10:	4621      	mov	r1, r4
  404a12:	4630      	mov	r0, r6
  404a14:	f7fe ffe0 	bl	4039d8 <_fflush_r>
  404a18:	b940      	cbnz	r0, 404a2c <__swbuf_r+0x8c>
  404a1a:	6822      	ldr	r2, [r4, #0]
  404a1c:	2301      	movs	r3, #1
  404a1e:	e7db      	b.n	4049d8 <__swbuf_r+0x38>
  404a20:	4621      	mov	r1, r4
  404a22:	4630      	mov	r0, r6
  404a24:	f7fe ffd8 	bl	4039d8 <_fflush_r>
  404a28:	2800      	cmp	r0, #0
  404a2a:	d0e3      	beq.n	4049f4 <__swbuf_r+0x54>
  404a2c:	f04f 37ff 	mov.w	r7, #4294967295
  404a30:	e7e0      	b.n	4049f4 <__swbuf_r+0x54>
  404a32:	4621      	mov	r1, r4
  404a34:	4630      	mov	r0, r6
  404a36:	f7fe febb 	bl	4037b0 <__swsetup_r>
  404a3a:	2800      	cmp	r0, #0
  404a3c:	d1f6      	bne.n	404a2c <__swbuf_r+0x8c>
  404a3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  404a42:	6923      	ldr	r3, [r4, #16]
  404a44:	b291      	uxth	r1, r2
  404a46:	e7bd      	b.n	4049c4 <__swbuf_r+0x24>
  404a48:	f7ff f81e 	bl	403a88 <__sinit>
  404a4c:	e7b0      	b.n	4049b0 <__swbuf_r+0x10>
  404a4e:	bf00      	nop

00404a50 <_wcrtomb_r>:
  404a50:	b5f0      	push	{r4, r5, r6, r7, lr}
  404a52:	4606      	mov	r6, r0
  404a54:	b085      	sub	sp, #20
  404a56:	461f      	mov	r7, r3
  404a58:	b189      	cbz	r1, 404a7e <_wcrtomb_r+0x2e>
  404a5a:	4c10      	ldr	r4, [pc, #64]	; (404a9c <_wcrtomb_r+0x4c>)
  404a5c:	4d10      	ldr	r5, [pc, #64]	; (404aa0 <_wcrtomb_r+0x50>)
  404a5e:	6824      	ldr	r4, [r4, #0]
  404a60:	6b64      	ldr	r4, [r4, #52]	; 0x34
  404a62:	2c00      	cmp	r4, #0
  404a64:	bf08      	it	eq
  404a66:	462c      	moveq	r4, r5
  404a68:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  404a6c:	47a0      	blx	r4
  404a6e:	1c43      	adds	r3, r0, #1
  404a70:	d103      	bne.n	404a7a <_wcrtomb_r+0x2a>
  404a72:	2200      	movs	r2, #0
  404a74:	238a      	movs	r3, #138	; 0x8a
  404a76:	603a      	str	r2, [r7, #0]
  404a78:	6033      	str	r3, [r6, #0]
  404a7a:	b005      	add	sp, #20
  404a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  404a7e:	460c      	mov	r4, r1
  404a80:	4906      	ldr	r1, [pc, #24]	; (404a9c <_wcrtomb_r+0x4c>)
  404a82:	4a07      	ldr	r2, [pc, #28]	; (404aa0 <_wcrtomb_r+0x50>)
  404a84:	6809      	ldr	r1, [r1, #0]
  404a86:	6b49      	ldr	r1, [r1, #52]	; 0x34
  404a88:	2900      	cmp	r1, #0
  404a8a:	bf08      	it	eq
  404a8c:	4611      	moveq	r1, r2
  404a8e:	4622      	mov	r2, r4
  404a90:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  404a94:	a901      	add	r1, sp, #4
  404a96:	47a0      	blx	r4
  404a98:	e7e9      	b.n	404a6e <_wcrtomb_r+0x1e>
  404a9a:	bf00      	nop
  404a9c:	20400014 	.word	0x20400014
  404aa0:	20400854 	.word	0x20400854

00404aa4 <__ascii_wctomb>:
  404aa4:	b121      	cbz	r1, 404ab0 <__ascii_wctomb+0xc>
  404aa6:	2aff      	cmp	r2, #255	; 0xff
  404aa8:	d804      	bhi.n	404ab4 <__ascii_wctomb+0x10>
  404aaa:	700a      	strb	r2, [r1, #0]
  404aac:	2001      	movs	r0, #1
  404aae:	4770      	bx	lr
  404ab0:	4608      	mov	r0, r1
  404ab2:	4770      	bx	lr
  404ab4:	238a      	movs	r3, #138	; 0x8a
  404ab6:	6003      	str	r3, [r0, #0]
  404ab8:	f04f 30ff 	mov.w	r0, #4294967295
  404abc:	4770      	bx	lr
  404abe:	bf00      	nop

00404ac0 <_write_r>:
  404ac0:	b570      	push	{r4, r5, r6, lr}
  404ac2:	460d      	mov	r5, r1
  404ac4:	4c08      	ldr	r4, [pc, #32]	; (404ae8 <_write_r+0x28>)
  404ac6:	4611      	mov	r1, r2
  404ac8:	4606      	mov	r6, r0
  404aca:	461a      	mov	r2, r3
  404acc:	4628      	mov	r0, r5
  404ace:	2300      	movs	r3, #0
  404ad0:	6023      	str	r3, [r4, #0]
  404ad2:	f7fb fe6b 	bl	4007ac <_write>
  404ad6:	1c43      	adds	r3, r0, #1
  404ad8:	d000      	beq.n	404adc <_write_r+0x1c>
  404ada:	bd70      	pop	{r4, r5, r6, pc}
  404adc:	6823      	ldr	r3, [r4, #0]
  404ade:	2b00      	cmp	r3, #0
  404ae0:	d0fb      	beq.n	404ada <_write_r+0x1a>
  404ae2:	6033      	str	r3, [r6, #0]
  404ae4:	bd70      	pop	{r4, r5, r6, pc}
  404ae6:	bf00      	nop
  404ae8:	20400e88 	.word	0x20400e88

00404aec <__register_exitproc>:
  404aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  404af0:	4d2c      	ldr	r5, [pc, #176]	; (404ba4 <__register_exitproc+0xb8>)
  404af2:	4606      	mov	r6, r0
  404af4:	6828      	ldr	r0, [r5, #0]
  404af6:	4698      	mov	r8, r3
  404af8:	460f      	mov	r7, r1
  404afa:	4691      	mov	r9, r2
  404afc:	f7ff fb84 	bl	404208 <__retarget_lock_acquire_recursive>
  404b00:	4b29      	ldr	r3, [pc, #164]	; (404ba8 <__register_exitproc+0xbc>)
  404b02:	681c      	ldr	r4, [r3, #0]
  404b04:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  404b08:	2b00      	cmp	r3, #0
  404b0a:	d03e      	beq.n	404b8a <__register_exitproc+0x9e>
  404b0c:	685a      	ldr	r2, [r3, #4]
  404b0e:	2a1f      	cmp	r2, #31
  404b10:	dc1c      	bgt.n	404b4c <__register_exitproc+0x60>
  404b12:	f102 0e01 	add.w	lr, r2, #1
  404b16:	b176      	cbz	r6, 404b36 <__register_exitproc+0x4a>
  404b18:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  404b1c:	2401      	movs	r4, #1
  404b1e:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  404b22:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  404b26:	4094      	lsls	r4, r2
  404b28:	4320      	orrs	r0, r4
  404b2a:	2e02      	cmp	r6, #2
  404b2c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  404b30:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  404b34:	d023      	beq.n	404b7e <__register_exitproc+0x92>
  404b36:	3202      	adds	r2, #2
  404b38:	f8c3 e004 	str.w	lr, [r3, #4]
  404b3c:	6828      	ldr	r0, [r5, #0]
  404b3e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  404b42:	f7ff fb63 	bl	40420c <__retarget_lock_release_recursive>
  404b46:	2000      	movs	r0, #0
  404b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404b4c:	4b17      	ldr	r3, [pc, #92]	; (404bac <__register_exitproc+0xc0>)
  404b4e:	b30b      	cbz	r3, 404b94 <__register_exitproc+0xa8>
  404b50:	f44f 70c8 	mov.w	r0, #400	; 0x190
  404b54:	f7fd faf4 	bl	402140 <malloc>
  404b58:	4603      	mov	r3, r0
  404b5a:	b1d8      	cbz	r0, 404b94 <__register_exitproc+0xa8>
  404b5c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  404b60:	6002      	str	r2, [r0, #0]
  404b62:	2100      	movs	r1, #0
  404b64:	6041      	str	r1, [r0, #4]
  404b66:	460a      	mov	r2, r1
  404b68:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  404b6c:	f04f 0e01 	mov.w	lr, #1
  404b70:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  404b74:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  404b78:	2e00      	cmp	r6, #0
  404b7a:	d0dc      	beq.n	404b36 <__register_exitproc+0x4a>
  404b7c:	e7cc      	b.n	404b18 <__register_exitproc+0x2c>
  404b7e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  404b82:	430c      	orrs	r4, r1
  404b84:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  404b88:	e7d5      	b.n	404b36 <__register_exitproc+0x4a>
  404b8a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  404b8e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  404b92:	e7bb      	b.n	404b0c <__register_exitproc+0x20>
  404b94:	6828      	ldr	r0, [r5, #0]
  404b96:	f7ff fb39 	bl	40420c <__retarget_lock_release_recursive>
  404b9a:	f04f 30ff 	mov.w	r0, #4294967295
  404b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  404ba2:	bf00      	nop
  404ba4:	20400850 	.word	0x20400850
  404ba8:	004050d0 	.word	0x004050d0
  404bac:	00402141 	.word	0x00402141

00404bb0 <_close_r>:
  404bb0:	b538      	push	{r3, r4, r5, lr}
  404bb2:	4c07      	ldr	r4, [pc, #28]	; (404bd0 <_close_r+0x20>)
  404bb4:	2300      	movs	r3, #0
  404bb6:	4605      	mov	r5, r0
  404bb8:	4608      	mov	r0, r1
  404bba:	6023      	str	r3, [r4, #0]
  404bbc:	f7fd f846 	bl	401c4c <_close>
  404bc0:	1c43      	adds	r3, r0, #1
  404bc2:	d000      	beq.n	404bc6 <_close_r+0x16>
  404bc4:	bd38      	pop	{r3, r4, r5, pc}
  404bc6:	6823      	ldr	r3, [r4, #0]
  404bc8:	2b00      	cmp	r3, #0
  404bca:	d0fb      	beq.n	404bc4 <_close_r+0x14>
  404bcc:	602b      	str	r3, [r5, #0]
  404bce:	bd38      	pop	{r3, r4, r5, pc}
  404bd0:	20400e88 	.word	0x20400e88

00404bd4 <_fclose_r>:
  404bd4:	b570      	push	{r4, r5, r6, lr}
  404bd6:	b159      	cbz	r1, 404bf0 <_fclose_r+0x1c>
  404bd8:	4605      	mov	r5, r0
  404bda:	460c      	mov	r4, r1
  404bdc:	b110      	cbz	r0, 404be4 <_fclose_r+0x10>
  404bde:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404be0:	2b00      	cmp	r3, #0
  404be2:	d03c      	beq.n	404c5e <_fclose_r+0x8a>
  404be4:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404be6:	07d8      	lsls	r0, r3, #31
  404be8:	d505      	bpl.n	404bf6 <_fclose_r+0x22>
  404bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404bee:	b92b      	cbnz	r3, 404bfc <_fclose_r+0x28>
  404bf0:	2600      	movs	r6, #0
  404bf2:	4630      	mov	r0, r6
  404bf4:	bd70      	pop	{r4, r5, r6, pc}
  404bf6:	89a3      	ldrh	r3, [r4, #12]
  404bf8:	0599      	lsls	r1, r3, #22
  404bfa:	d53c      	bpl.n	404c76 <_fclose_r+0xa2>
  404bfc:	4621      	mov	r1, r4
  404bfe:	4628      	mov	r0, r5
  404c00:	f7fe fe4a 	bl	403898 <__sflush_r>
  404c04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  404c06:	4606      	mov	r6, r0
  404c08:	b133      	cbz	r3, 404c18 <_fclose_r+0x44>
  404c0a:	69e1      	ldr	r1, [r4, #28]
  404c0c:	4628      	mov	r0, r5
  404c0e:	4798      	blx	r3
  404c10:	2800      	cmp	r0, #0
  404c12:	bfb8      	it	lt
  404c14:	f04f 36ff 	movlt.w	r6, #4294967295
  404c18:	89a3      	ldrh	r3, [r4, #12]
  404c1a:	061a      	lsls	r2, r3, #24
  404c1c:	d422      	bmi.n	404c64 <_fclose_r+0x90>
  404c1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404c20:	b141      	cbz	r1, 404c34 <_fclose_r+0x60>
  404c22:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404c26:	4299      	cmp	r1, r3
  404c28:	d002      	beq.n	404c30 <_fclose_r+0x5c>
  404c2a:	4628      	mov	r0, r5
  404c2c:	f7ff f852 	bl	403cd4 <_free_r>
  404c30:	2300      	movs	r3, #0
  404c32:	6323      	str	r3, [r4, #48]	; 0x30
  404c34:	6c61      	ldr	r1, [r4, #68]	; 0x44
  404c36:	b121      	cbz	r1, 404c42 <_fclose_r+0x6e>
  404c38:	4628      	mov	r0, r5
  404c3a:	f7ff f84b 	bl	403cd4 <_free_r>
  404c3e:	2300      	movs	r3, #0
  404c40:	6463      	str	r3, [r4, #68]	; 0x44
  404c42:	f7fe ff4d 	bl	403ae0 <__sfp_lock_acquire>
  404c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404c48:	2200      	movs	r2, #0
  404c4a:	07db      	lsls	r3, r3, #31
  404c4c:	81a2      	strh	r2, [r4, #12]
  404c4e:	d50e      	bpl.n	404c6e <_fclose_r+0x9a>
  404c50:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c52:	f7ff fad7 	bl	404204 <__retarget_lock_close_recursive>
  404c56:	f7fe ff49 	bl	403aec <__sfp_lock_release>
  404c5a:	4630      	mov	r0, r6
  404c5c:	bd70      	pop	{r4, r5, r6, pc}
  404c5e:	f7fe ff13 	bl	403a88 <__sinit>
  404c62:	e7bf      	b.n	404be4 <_fclose_r+0x10>
  404c64:	6921      	ldr	r1, [r4, #16]
  404c66:	4628      	mov	r0, r5
  404c68:	f7ff f834 	bl	403cd4 <_free_r>
  404c6c:	e7d7      	b.n	404c1e <_fclose_r+0x4a>
  404c6e:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c70:	f7ff facc 	bl	40420c <__retarget_lock_release_recursive>
  404c74:	e7ec      	b.n	404c50 <_fclose_r+0x7c>
  404c76:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c78:	f7ff fac6 	bl	404208 <__retarget_lock_acquire_recursive>
  404c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404c80:	2b00      	cmp	r3, #0
  404c82:	d1bb      	bne.n	404bfc <_fclose_r+0x28>
  404c84:	6e66      	ldr	r6, [r4, #100]	; 0x64
  404c86:	f016 0601 	ands.w	r6, r6, #1
  404c8a:	d1b1      	bne.n	404bf0 <_fclose_r+0x1c>
  404c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404c8e:	f7ff fabd 	bl	40420c <__retarget_lock_release_recursive>
  404c92:	4630      	mov	r0, r6
  404c94:	bd70      	pop	{r4, r5, r6, pc}
  404c96:	bf00      	nop

00404c98 <_fstat_r>:
  404c98:	b538      	push	{r3, r4, r5, lr}
  404c9a:	460b      	mov	r3, r1
  404c9c:	4c07      	ldr	r4, [pc, #28]	; (404cbc <_fstat_r+0x24>)
  404c9e:	4605      	mov	r5, r0
  404ca0:	4611      	mov	r1, r2
  404ca2:	4618      	mov	r0, r3
  404ca4:	2300      	movs	r3, #0
  404ca6:	6023      	str	r3, [r4, #0]
  404ca8:	f7fc ffd3 	bl	401c52 <_fstat>
  404cac:	1c43      	adds	r3, r0, #1
  404cae:	d000      	beq.n	404cb2 <_fstat_r+0x1a>
  404cb0:	bd38      	pop	{r3, r4, r5, pc}
  404cb2:	6823      	ldr	r3, [r4, #0]
  404cb4:	2b00      	cmp	r3, #0
  404cb6:	d0fb      	beq.n	404cb0 <_fstat_r+0x18>
  404cb8:	602b      	str	r3, [r5, #0]
  404cba:	bd38      	pop	{r3, r4, r5, pc}
  404cbc:	20400e88 	.word	0x20400e88

00404cc0 <_isatty_r>:
  404cc0:	b538      	push	{r3, r4, r5, lr}
  404cc2:	4c07      	ldr	r4, [pc, #28]	; (404ce0 <_isatty_r+0x20>)
  404cc4:	2300      	movs	r3, #0
  404cc6:	4605      	mov	r5, r0
  404cc8:	4608      	mov	r0, r1
  404cca:	6023      	str	r3, [r4, #0]
  404ccc:	f7fc ffc6 	bl	401c5c <_isatty>
  404cd0:	1c43      	adds	r3, r0, #1
  404cd2:	d000      	beq.n	404cd6 <_isatty_r+0x16>
  404cd4:	bd38      	pop	{r3, r4, r5, pc}
  404cd6:	6823      	ldr	r3, [r4, #0]
  404cd8:	2b00      	cmp	r3, #0
  404cda:	d0fb      	beq.n	404cd4 <_isatty_r+0x14>
  404cdc:	602b      	str	r3, [r5, #0]
  404cde:	bd38      	pop	{r3, r4, r5, pc}
  404ce0:	20400e88 	.word	0x20400e88

00404ce4 <_lseek_r>:
  404ce4:	b570      	push	{r4, r5, r6, lr}
  404ce6:	460d      	mov	r5, r1
  404ce8:	4c08      	ldr	r4, [pc, #32]	; (404d0c <_lseek_r+0x28>)
  404cea:	4611      	mov	r1, r2
  404cec:	4606      	mov	r6, r0
  404cee:	461a      	mov	r2, r3
  404cf0:	4628      	mov	r0, r5
  404cf2:	2300      	movs	r3, #0
  404cf4:	6023      	str	r3, [r4, #0]
  404cf6:	f7fc ffb3 	bl	401c60 <_lseek>
  404cfa:	1c43      	adds	r3, r0, #1
  404cfc:	d000      	beq.n	404d00 <_lseek_r+0x1c>
  404cfe:	bd70      	pop	{r4, r5, r6, pc}
  404d00:	6823      	ldr	r3, [r4, #0]
  404d02:	2b00      	cmp	r3, #0
  404d04:	d0fb      	beq.n	404cfe <_lseek_r+0x1a>
  404d06:	6033      	str	r3, [r6, #0]
  404d08:	bd70      	pop	{r4, r5, r6, pc}
  404d0a:	bf00      	nop
  404d0c:	20400e88 	.word	0x20400e88

00404d10 <_read_r>:
  404d10:	b570      	push	{r4, r5, r6, lr}
  404d12:	460d      	mov	r5, r1
  404d14:	4c08      	ldr	r4, [pc, #32]	; (404d38 <_read_r+0x28>)
  404d16:	4611      	mov	r1, r2
  404d18:	4606      	mov	r6, r0
  404d1a:	461a      	mov	r2, r3
  404d1c:	4628      	mov	r0, r5
  404d1e:	2300      	movs	r3, #0
  404d20:	6023      	str	r3, [r4, #0]
  404d22:	f7fb fd25 	bl	400770 <_read>
  404d26:	1c43      	adds	r3, r0, #1
  404d28:	d000      	beq.n	404d2c <_read_r+0x1c>
  404d2a:	bd70      	pop	{r4, r5, r6, pc}
  404d2c:	6823      	ldr	r3, [r4, #0]
  404d2e:	2b00      	cmp	r3, #0
  404d30:	d0fb      	beq.n	404d2a <_read_r+0x1a>
  404d32:	6033      	str	r3, [r6, #0]
  404d34:	bd70      	pop	{r4, r5, r6, pc}
  404d36:	bf00      	nop
  404d38:	20400e88 	.word	0x20400e88

00404d3c <__aeabi_uldivmod>:
  404d3c:	b953      	cbnz	r3, 404d54 <__aeabi_uldivmod+0x18>
  404d3e:	b94a      	cbnz	r2, 404d54 <__aeabi_uldivmod+0x18>
  404d40:	2900      	cmp	r1, #0
  404d42:	bf08      	it	eq
  404d44:	2800      	cmpeq	r0, #0
  404d46:	bf1c      	itt	ne
  404d48:	f04f 31ff 	movne.w	r1, #4294967295
  404d4c:	f04f 30ff 	movne.w	r0, #4294967295
  404d50:	f000 b97a 	b.w	405048 <__aeabi_idiv0>
  404d54:	f1ad 0c08 	sub.w	ip, sp, #8
  404d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  404d5c:	f000 f806 	bl	404d6c <__udivmoddi4>
  404d60:	f8dd e004 	ldr.w	lr, [sp, #4]
  404d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  404d68:	b004      	add	sp, #16
  404d6a:	4770      	bx	lr

00404d6c <__udivmoddi4>:
  404d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  404d70:	468c      	mov	ip, r1
  404d72:	460d      	mov	r5, r1
  404d74:	4604      	mov	r4, r0
  404d76:	9e08      	ldr	r6, [sp, #32]
  404d78:	2b00      	cmp	r3, #0
  404d7a:	d151      	bne.n	404e20 <__udivmoddi4+0xb4>
  404d7c:	428a      	cmp	r2, r1
  404d7e:	4617      	mov	r7, r2
  404d80:	d96d      	bls.n	404e5e <__udivmoddi4+0xf2>
  404d82:	fab2 fe82 	clz	lr, r2
  404d86:	f1be 0f00 	cmp.w	lr, #0
  404d8a:	d00b      	beq.n	404da4 <__udivmoddi4+0x38>
  404d8c:	f1ce 0c20 	rsb	ip, lr, #32
  404d90:	fa01 f50e 	lsl.w	r5, r1, lr
  404d94:	fa20 fc0c 	lsr.w	ip, r0, ip
  404d98:	fa02 f70e 	lsl.w	r7, r2, lr
  404d9c:	ea4c 0c05 	orr.w	ip, ip, r5
  404da0:	fa00 f40e 	lsl.w	r4, r0, lr
  404da4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  404da8:	0c25      	lsrs	r5, r4, #16
  404daa:	fbbc f8fa 	udiv	r8, ip, sl
  404dae:	fa1f f987 	uxth.w	r9, r7
  404db2:	fb0a cc18 	mls	ip, sl, r8, ip
  404db6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  404dba:	fb08 f309 	mul.w	r3, r8, r9
  404dbe:	42ab      	cmp	r3, r5
  404dc0:	d90a      	bls.n	404dd8 <__udivmoddi4+0x6c>
  404dc2:	19ed      	adds	r5, r5, r7
  404dc4:	f108 32ff 	add.w	r2, r8, #4294967295
  404dc8:	f080 8123 	bcs.w	405012 <__udivmoddi4+0x2a6>
  404dcc:	42ab      	cmp	r3, r5
  404dce:	f240 8120 	bls.w	405012 <__udivmoddi4+0x2a6>
  404dd2:	f1a8 0802 	sub.w	r8, r8, #2
  404dd6:	443d      	add	r5, r7
  404dd8:	1aed      	subs	r5, r5, r3
  404dda:	b2a4      	uxth	r4, r4
  404ddc:	fbb5 f0fa 	udiv	r0, r5, sl
  404de0:	fb0a 5510 	mls	r5, sl, r0, r5
  404de4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  404de8:	fb00 f909 	mul.w	r9, r0, r9
  404dec:	45a1      	cmp	r9, r4
  404dee:	d909      	bls.n	404e04 <__udivmoddi4+0x98>
  404df0:	19e4      	adds	r4, r4, r7
  404df2:	f100 33ff 	add.w	r3, r0, #4294967295
  404df6:	f080 810a 	bcs.w	40500e <__udivmoddi4+0x2a2>
  404dfa:	45a1      	cmp	r9, r4
  404dfc:	f240 8107 	bls.w	40500e <__udivmoddi4+0x2a2>
  404e00:	3802      	subs	r0, #2
  404e02:	443c      	add	r4, r7
  404e04:	eba4 0409 	sub.w	r4, r4, r9
  404e08:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404e0c:	2100      	movs	r1, #0
  404e0e:	2e00      	cmp	r6, #0
  404e10:	d061      	beq.n	404ed6 <__udivmoddi4+0x16a>
  404e12:	fa24 f40e 	lsr.w	r4, r4, lr
  404e16:	2300      	movs	r3, #0
  404e18:	6034      	str	r4, [r6, #0]
  404e1a:	6073      	str	r3, [r6, #4]
  404e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e20:	428b      	cmp	r3, r1
  404e22:	d907      	bls.n	404e34 <__udivmoddi4+0xc8>
  404e24:	2e00      	cmp	r6, #0
  404e26:	d054      	beq.n	404ed2 <__udivmoddi4+0x166>
  404e28:	2100      	movs	r1, #0
  404e2a:	e886 0021 	stmia.w	r6, {r0, r5}
  404e2e:	4608      	mov	r0, r1
  404e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e34:	fab3 f183 	clz	r1, r3
  404e38:	2900      	cmp	r1, #0
  404e3a:	f040 808e 	bne.w	404f5a <__udivmoddi4+0x1ee>
  404e3e:	42ab      	cmp	r3, r5
  404e40:	d302      	bcc.n	404e48 <__udivmoddi4+0xdc>
  404e42:	4282      	cmp	r2, r0
  404e44:	f200 80fa 	bhi.w	40503c <__udivmoddi4+0x2d0>
  404e48:	1a84      	subs	r4, r0, r2
  404e4a:	eb65 0503 	sbc.w	r5, r5, r3
  404e4e:	2001      	movs	r0, #1
  404e50:	46ac      	mov	ip, r5
  404e52:	2e00      	cmp	r6, #0
  404e54:	d03f      	beq.n	404ed6 <__udivmoddi4+0x16a>
  404e56:	e886 1010 	stmia.w	r6, {r4, ip}
  404e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404e5e:	b912      	cbnz	r2, 404e66 <__udivmoddi4+0xfa>
  404e60:	2701      	movs	r7, #1
  404e62:	fbb7 f7f2 	udiv	r7, r7, r2
  404e66:	fab7 fe87 	clz	lr, r7
  404e6a:	f1be 0f00 	cmp.w	lr, #0
  404e6e:	d134      	bne.n	404eda <__udivmoddi4+0x16e>
  404e70:	1beb      	subs	r3, r5, r7
  404e72:	0c3a      	lsrs	r2, r7, #16
  404e74:	fa1f fc87 	uxth.w	ip, r7
  404e78:	2101      	movs	r1, #1
  404e7a:	fbb3 f8f2 	udiv	r8, r3, r2
  404e7e:	0c25      	lsrs	r5, r4, #16
  404e80:	fb02 3318 	mls	r3, r2, r8, r3
  404e84:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404e88:	fb0c f308 	mul.w	r3, ip, r8
  404e8c:	42ab      	cmp	r3, r5
  404e8e:	d907      	bls.n	404ea0 <__udivmoddi4+0x134>
  404e90:	19ed      	adds	r5, r5, r7
  404e92:	f108 30ff 	add.w	r0, r8, #4294967295
  404e96:	d202      	bcs.n	404e9e <__udivmoddi4+0x132>
  404e98:	42ab      	cmp	r3, r5
  404e9a:	f200 80d1 	bhi.w	405040 <__udivmoddi4+0x2d4>
  404e9e:	4680      	mov	r8, r0
  404ea0:	1aed      	subs	r5, r5, r3
  404ea2:	b2a3      	uxth	r3, r4
  404ea4:	fbb5 f0f2 	udiv	r0, r5, r2
  404ea8:	fb02 5510 	mls	r5, r2, r0, r5
  404eac:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  404eb0:	fb0c fc00 	mul.w	ip, ip, r0
  404eb4:	45a4      	cmp	ip, r4
  404eb6:	d907      	bls.n	404ec8 <__udivmoddi4+0x15c>
  404eb8:	19e4      	adds	r4, r4, r7
  404eba:	f100 33ff 	add.w	r3, r0, #4294967295
  404ebe:	d202      	bcs.n	404ec6 <__udivmoddi4+0x15a>
  404ec0:	45a4      	cmp	ip, r4
  404ec2:	f200 80b8 	bhi.w	405036 <__udivmoddi4+0x2ca>
  404ec6:	4618      	mov	r0, r3
  404ec8:	eba4 040c 	sub.w	r4, r4, ip
  404ecc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  404ed0:	e79d      	b.n	404e0e <__udivmoddi4+0xa2>
  404ed2:	4631      	mov	r1, r6
  404ed4:	4630      	mov	r0, r6
  404ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  404eda:	f1ce 0420 	rsb	r4, lr, #32
  404ede:	fa05 f30e 	lsl.w	r3, r5, lr
  404ee2:	fa07 f70e 	lsl.w	r7, r7, lr
  404ee6:	fa20 f804 	lsr.w	r8, r0, r4
  404eea:	0c3a      	lsrs	r2, r7, #16
  404eec:	fa25 f404 	lsr.w	r4, r5, r4
  404ef0:	ea48 0803 	orr.w	r8, r8, r3
  404ef4:	fbb4 f1f2 	udiv	r1, r4, r2
  404ef8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  404efc:	fb02 4411 	mls	r4, r2, r1, r4
  404f00:	fa1f fc87 	uxth.w	ip, r7
  404f04:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  404f08:	fb01 f30c 	mul.w	r3, r1, ip
  404f0c:	42ab      	cmp	r3, r5
  404f0e:	fa00 f40e 	lsl.w	r4, r0, lr
  404f12:	d909      	bls.n	404f28 <__udivmoddi4+0x1bc>
  404f14:	19ed      	adds	r5, r5, r7
  404f16:	f101 30ff 	add.w	r0, r1, #4294967295
  404f1a:	f080 808a 	bcs.w	405032 <__udivmoddi4+0x2c6>
  404f1e:	42ab      	cmp	r3, r5
  404f20:	f240 8087 	bls.w	405032 <__udivmoddi4+0x2c6>
  404f24:	3902      	subs	r1, #2
  404f26:	443d      	add	r5, r7
  404f28:	1aeb      	subs	r3, r5, r3
  404f2a:	fa1f f588 	uxth.w	r5, r8
  404f2e:	fbb3 f0f2 	udiv	r0, r3, r2
  404f32:	fb02 3310 	mls	r3, r2, r0, r3
  404f36:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  404f3a:	fb00 f30c 	mul.w	r3, r0, ip
  404f3e:	42ab      	cmp	r3, r5
  404f40:	d907      	bls.n	404f52 <__udivmoddi4+0x1e6>
  404f42:	19ed      	adds	r5, r5, r7
  404f44:	f100 38ff 	add.w	r8, r0, #4294967295
  404f48:	d26f      	bcs.n	40502a <__udivmoddi4+0x2be>
  404f4a:	42ab      	cmp	r3, r5
  404f4c:	d96d      	bls.n	40502a <__udivmoddi4+0x2be>
  404f4e:	3802      	subs	r0, #2
  404f50:	443d      	add	r5, r7
  404f52:	1aeb      	subs	r3, r5, r3
  404f54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  404f58:	e78f      	b.n	404e7a <__udivmoddi4+0x10e>
  404f5a:	f1c1 0720 	rsb	r7, r1, #32
  404f5e:	fa22 f807 	lsr.w	r8, r2, r7
  404f62:	408b      	lsls	r3, r1
  404f64:	fa05 f401 	lsl.w	r4, r5, r1
  404f68:	ea48 0303 	orr.w	r3, r8, r3
  404f6c:	fa20 fe07 	lsr.w	lr, r0, r7
  404f70:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  404f74:	40fd      	lsrs	r5, r7
  404f76:	ea4e 0e04 	orr.w	lr, lr, r4
  404f7a:	fbb5 f9fc 	udiv	r9, r5, ip
  404f7e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  404f82:	fb0c 5519 	mls	r5, ip, r9, r5
  404f86:	fa1f f883 	uxth.w	r8, r3
  404f8a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  404f8e:	fb09 f408 	mul.w	r4, r9, r8
  404f92:	42ac      	cmp	r4, r5
  404f94:	fa02 f201 	lsl.w	r2, r2, r1
  404f98:	fa00 fa01 	lsl.w	sl, r0, r1
  404f9c:	d908      	bls.n	404fb0 <__udivmoddi4+0x244>
  404f9e:	18ed      	adds	r5, r5, r3
  404fa0:	f109 30ff 	add.w	r0, r9, #4294967295
  404fa4:	d243      	bcs.n	40502e <__udivmoddi4+0x2c2>
  404fa6:	42ac      	cmp	r4, r5
  404fa8:	d941      	bls.n	40502e <__udivmoddi4+0x2c2>
  404faa:	f1a9 0902 	sub.w	r9, r9, #2
  404fae:	441d      	add	r5, r3
  404fb0:	1b2d      	subs	r5, r5, r4
  404fb2:	fa1f fe8e 	uxth.w	lr, lr
  404fb6:	fbb5 f0fc 	udiv	r0, r5, ip
  404fba:	fb0c 5510 	mls	r5, ip, r0, r5
  404fbe:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  404fc2:	fb00 f808 	mul.w	r8, r0, r8
  404fc6:	45a0      	cmp	r8, r4
  404fc8:	d907      	bls.n	404fda <__udivmoddi4+0x26e>
  404fca:	18e4      	adds	r4, r4, r3
  404fcc:	f100 35ff 	add.w	r5, r0, #4294967295
  404fd0:	d229      	bcs.n	405026 <__udivmoddi4+0x2ba>
  404fd2:	45a0      	cmp	r8, r4
  404fd4:	d927      	bls.n	405026 <__udivmoddi4+0x2ba>
  404fd6:	3802      	subs	r0, #2
  404fd8:	441c      	add	r4, r3
  404fda:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  404fde:	eba4 0408 	sub.w	r4, r4, r8
  404fe2:	fba0 8902 	umull	r8, r9, r0, r2
  404fe6:	454c      	cmp	r4, r9
  404fe8:	46c6      	mov	lr, r8
  404fea:	464d      	mov	r5, r9
  404fec:	d315      	bcc.n	40501a <__udivmoddi4+0x2ae>
  404fee:	d012      	beq.n	405016 <__udivmoddi4+0x2aa>
  404ff0:	b156      	cbz	r6, 405008 <__udivmoddi4+0x29c>
  404ff2:	ebba 030e 	subs.w	r3, sl, lr
  404ff6:	eb64 0405 	sbc.w	r4, r4, r5
  404ffa:	fa04 f707 	lsl.w	r7, r4, r7
  404ffe:	40cb      	lsrs	r3, r1
  405000:	431f      	orrs	r7, r3
  405002:	40cc      	lsrs	r4, r1
  405004:	6037      	str	r7, [r6, #0]
  405006:	6074      	str	r4, [r6, #4]
  405008:	2100      	movs	r1, #0
  40500a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40500e:	4618      	mov	r0, r3
  405010:	e6f8      	b.n	404e04 <__udivmoddi4+0x98>
  405012:	4690      	mov	r8, r2
  405014:	e6e0      	b.n	404dd8 <__udivmoddi4+0x6c>
  405016:	45c2      	cmp	sl, r8
  405018:	d2ea      	bcs.n	404ff0 <__udivmoddi4+0x284>
  40501a:	ebb8 0e02 	subs.w	lr, r8, r2
  40501e:	eb69 0503 	sbc.w	r5, r9, r3
  405022:	3801      	subs	r0, #1
  405024:	e7e4      	b.n	404ff0 <__udivmoddi4+0x284>
  405026:	4628      	mov	r0, r5
  405028:	e7d7      	b.n	404fda <__udivmoddi4+0x26e>
  40502a:	4640      	mov	r0, r8
  40502c:	e791      	b.n	404f52 <__udivmoddi4+0x1e6>
  40502e:	4681      	mov	r9, r0
  405030:	e7be      	b.n	404fb0 <__udivmoddi4+0x244>
  405032:	4601      	mov	r1, r0
  405034:	e778      	b.n	404f28 <__udivmoddi4+0x1bc>
  405036:	3802      	subs	r0, #2
  405038:	443c      	add	r4, r7
  40503a:	e745      	b.n	404ec8 <__udivmoddi4+0x15c>
  40503c:	4608      	mov	r0, r1
  40503e:	e708      	b.n	404e52 <__udivmoddi4+0xe6>
  405040:	f1a8 0802 	sub.w	r8, r8, #2
  405044:	443d      	add	r5, r7
  405046:	e72b      	b.n	404ea0 <__udivmoddi4+0x134>

00405048 <__aeabi_idiv0>:
  405048:	4770      	bx	lr
  40504a:	bf00      	nop
  40504c:	0a05000d 	.word	0x0a05000d
  405050:	0000004b 	.word	0x0000004b
  405054:	00001932 	.word	0x00001932
  405058:	0e00008b 	.word	0x0e00008b
  40505c:	32800008 	.word	0x32800008
  405060:	030a0205 	.word	0x030a0205
  405064:	0f022003 	.word	0x0f022003
  405068:	00000a0f 	.word	0x00000a0f
  40506c:	18180000 	.word	0x18180000
  405070:	00002020 	.word	0x00002020
  405074:	0a000000 	.word	0x0a000000
  405078:	02020000 	.word	0x02020000
  40507c:	18180000 	.word	0x18180000
  405080:	00030000 	.word	0x00030000
  405084:	00000000 	.word	0x00000000
  405088:	18010002 	.word	0x18010002
  40508c:	1e1e1e1e 	.word	0x1e1e1e1e
  405090:	1e1e1e1e 	.word	0x1e1e1e1e
  405094:	1e1e1e1e 	.word	0x1e1e1e1e
  405098:	00001e1e 	.word	0x00001e1e
	...
  4050ac:	616d0d0a 	.word	0x616d0d0a
  4050b0:	756f5458 	.word	0x756f5458
  4050b4:	64206863 	.word	0x64206863
  4050b8:	20617461 	.word	0x20617461
  4050bc:	52415355 	.word	0x52415355
  4050c0:	72742054 	.word	0x72742054
  4050c4:	6d736e61 	.word	0x6d736e61
  4050c8:	65747469 	.word	0x65747469
  4050cc:	000d0a72 	.word	0x000d0a72

004050d0 <_global_impure_ptr>:
  4050d0:	20400018 33323130 37363534 42413938     ..@ 0123456789AB
  4050e0:	46454443 00000000 33323130 37363534     CDEF....01234567
  4050f0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  405100:	0000296c                                l)..

00405104 <blanks.7217>:
  405104:	20202020 20202020 20202020 20202020                     

00405114 <zeroes.7218>:
  405114:	30303030 30303030 30303030 30303030     0000000000000000
  405124:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00405134 <_ctype_>:
  405134:	20202000 20202020 28282020 20282828     .         ((((( 
  405144:	20202020 20202020 20202020 20202020                     
  405154:	10108820 10101010 10101010 10101010      ...............
  405164:	04040410 04040404 10040404 10101010     ................
  405174:	41411010 41414141 01010101 01010101     ..AAAAAA........
  405184:	01010101 01010101 01010101 10101010     ................
  405194:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4051a4:	02020202 02020202 02020202 10101010     ................
  4051b4:	00000020 00000000 00000000 00000000      ...............
	...

00405238 <_init>:
  405238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40523a:	bf00      	nop
  40523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40523e:	bc08      	pop	{r3}
  405240:	469e      	mov	lr, r3
  405242:	4770      	bx	lr

00405244 <__init_array_start>:
  405244:	00403879 	.word	0x00403879

00405248 <__frame_dummy_init_array_entry>:
  405248:	0040018d                                ..@.

0040524c <_fini>:
  40524c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40524e:	bf00      	nop
  405250:	bcf8      	pop	{r3, r4, r5, r6, r7}
  405252:	bc08      	pop	{r3}
  405254:	469e      	mov	lr, r3
  405256:	4770      	bx	lr

00405258 <__fini_array_start>:
  405258:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <last_state.11170>:
20400010:	00ff 0000                                   ....

20400014 <_impure_ptr>:
20400014:	0018 2040                                   ..@ 

20400018 <impure_data>:
20400018:	0000 0000 0304 2040 036c 2040 03d4 2040     ......@ l.@ ..@ 
	...
204000c0:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d0:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400440 <__malloc_av_>:
	...
20400448:	0440 2040 0440 2040 0448 2040 0448 2040     @.@ @.@ H.@ H.@ 
20400458:	0450 2040 0450 2040 0458 2040 0458 2040     P.@ P.@ X.@ X.@ 
20400468:	0460 2040 0460 2040 0468 2040 0468 2040     `.@ `.@ h.@ h.@ 
20400478:	0470 2040 0470 2040 0478 2040 0478 2040     p.@ p.@ x.@ x.@ 
20400488:	0480 2040 0480 2040 0488 2040 0488 2040     ..@ ..@ ..@ ..@ 
20400498:	0490 2040 0490 2040 0498 2040 0498 2040     ..@ ..@ ..@ ..@ 
204004a8:	04a0 2040 04a0 2040 04a8 2040 04a8 2040     ..@ ..@ ..@ ..@ 
204004b8:	04b0 2040 04b0 2040 04b8 2040 04b8 2040     ..@ ..@ ..@ ..@ 
204004c8:	04c0 2040 04c0 2040 04c8 2040 04c8 2040     ..@ ..@ ..@ ..@ 
204004d8:	04d0 2040 04d0 2040 04d8 2040 04d8 2040     ..@ ..@ ..@ ..@ 
204004e8:	04e0 2040 04e0 2040 04e8 2040 04e8 2040     ..@ ..@ ..@ ..@ 
204004f8:	04f0 2040 04f0 2040 04f8 2040 04f8 2040     ..@ ..@ ..@ ..@ 
20400508:	0500 2040 0500 2040 0508 2040 0508 2040     ..@ ..@ ..@ ..@ 
20400518:	0510 2040 0510 2040 0518 2040 0518 2040     ..@ ..@ ..@ ..@ 
20400528:	0520 2040 0520 2040 0528 2040 0528 2040      .@  .@ (.@ (.@ 
20400538:	0530 2040 0530 2040 0538 2040 0538 2040     0.@ 0.@ 8.@ 8.@ 
20400548:	0540 2040 0540 2040 0548 2040 0548 2040     @.@ @.@ H.@ H.@ 
20400558:	0550 2040 0550 2040 0558 2040 0558 2040     P.@ P.@ X.@ X.@ 
20400568:	0560 2040 0560 2040 0568 2040 0568 2040     `.@ `.@ h.@ h.@ 
20400578:	0570 2040 0570 2040 0578 2040 0578 2040     p.@ p.@ x.@ x.@ 
20400588:	0580 2040 0580 2040 0588 2040 0588 2040     ..@ ..@ ..@ ..@ 
20400598:	0590 2040 0590 2040 0598 2040 0598 2040     ..@ ..@ ..@ ..@ 
204005a8:	05a0 2040 05a0 2040 05a8 2040 05a8 2040     ..@ ..@ ..@ ..@ 
204005b8:	05b0 2040 05b0 2040 05b8 2040 05b8 2040     ..@ ..@ ..@ ..@ 
204005c8:	05c0 2040 05c0 2040 05c8 2040 05c8 2040     ..@ ..@ ..@ ..@ 
204005d8:	05d0 2040 05d0 2040 05d8 2040 05d8 2040     ..@ ..@ ..@ ..@ 
204005e8:	05e0 2040 05e0 2040 05e8 2040 05e8 2040     ..@ ..@ ..@ ..@ 
204005f8:	05f0 2040 05f0 2040 05f8 2040 05f8 2040     ..@ ..@ ..@ ..@ 
20400608:	0600 2040 0600 2040 0608 2040 0608 2040     ..@ ..@ ..@ ..@ 
20400618:	0610 2040 0610 2040 0618 2040 0618 2040     ..@ ..@ ..@ ..@ 
20400628:	0620 2040 0620 2040 0628 2040 0628 2040      .@  .@ (.@ (.@ 
20400638:	0630 2040 0630 2040 0638 2040 0638 2040     0.@ 0.@ 8.@ 8.@ 
20400648:	0640 2040 0640 2040 0648 2040 0648 2040     @.@ @.@ H.@ H.@ 
20400658:	0650 2040 0650 2040 0658 2040 0658 2040     P.@ P.@ X.@ X.@ 
20400668:	0660 2040 0660 2040 0668 2040 0668 2040     `.@ `.@ h.@ h.@ 
20400678:	0670 2040 0670 2040 0678 2040 0678 2040     p.@ p.@ x.@ x.@ 
20400688:	0680 2040 0680 2040 0688 2040 0688 2040     ..@ ..@ ..@ ..@ 
20400698:	0690 2040 0690 2040 0698 2040 0698 2040     ..@ ..@ ..@ ..@ 
204006a8:	06a0 2040 06a0 2040 06a8 2040 06a8 2040     ..@ ..@ ..@ ..@ 
204006b8:	06b0 2040 06b0 2040 06b8 2040 06b8 2040     ..@ ..@ ..@ ..@ 
204006c8:	06c0 2040 06c0 2040 06c8 2040 06c8 2040     ..@ ..@ ..@ ..@ 
204006d8:	06d0 2040 06d0 2040 06d8 2040 06d8 2040     ..@ ..@ ..@ ..@ 
204006e8:	06e0 2040 06e0 2040 06e8 2040 06e8 2040     ..@ ..@ ..@ ..@ 
204006f8:	06f0 2040 06f0 2040 06f8 2040 06f8 2040     ..@ ..@ ..@ ..@ 
20400708:	0700 2040 0700 2040 0708 2040 0708 2040     ..@ ..@ ..@ ..@ 
20400718:	0710 2040 0710 2040 0718 2040 0718 2040     ..@ ..@ ..@ ..@ 
20400728:	0720 2040 0720 2040 0728 2040 0728 2040      .@  .@ (.@ (.@ 
20400738:	0730 2040 0730 2040 0738 2040 0738 2040     0.@ 0.@ 8.@ 8.@ 
20400748:	0740 2040 0740 2040 0748 2040 0748 2040     @.@ @.@ H.@ H.@ 
20400758:	0750 2040 0750 2040 0758 2040 0758 2040     P.@ P.@ X.@ X.@ 
20400768:	0760 2040 0760 2040 0768 2040 0768 2040     `.@ `.@ h.@ h.@ 
20400778:	0770 2040 0770 2040 0778 2040 0778 2040     p.@ p.@ x.@ x.@ 
20400788:	0780 2040 0780 2040 0788 2040 0788 2040     ..@ ..@ ..@ ..@ 
20400798:	0790 2040 0790 2040 0798 2040 0798 2040     ..@ ..@ ..@ ..@ 
204007a8:	07a0 2040 07a0 2040 07a8 2040 07a8 2040     ..@ ..@ ..@ ..@ 
204007b8:	07b0 2040 07b0 2040 07b8 2040 07b8 2040     ..@ ..@ ..@ ..@ 
204007c8:	07c0 2040 07c0 2040 07c8 2040 07c8 2040     ..@ ..@ ..@ ..@ 
204007d8:	07d0 2040 07d0 2040 07d8 2040 07d8 2040     ..@ ..@ ..@ ..@ 
204007e8:	07e0 2040 07e0 2040 07e8 2040 07e8 2040     ..@ ..@ ..@ ..@ 
204007f8:	07f0 2040 07f0 2040 07f8 2040 07f8 2040     ..@ ..@ ..@ ..@ 
20400808:	0800 2040 0800 2040 0808 2040 0808 2040     ..@ ..@ ..@ ..@ 
20400818:	0810 2040 0810 2040 0818 2040 0818 2040     ..@ ..@ ..@ ..@ 
20400828:	0820 2040 0820 2040 0828 2040 0828 2040      .@  .@ (.@ (.@ 
20400838:	0830 2040 0830 2040 0838 2040 0838 2040     0.@ 0.@ 8.@ 8.@ 

20400848 <__malloc_sbrk_base>:
20400848:	ffff ffff                                   ....

2040084c <__malloc_trim_threshold>:
2040084c:	0000 0002                                   ....

20400850 <__atexit_recursive_mutex>:
20400850:	0e64 2040                                   d.@ 

20400854 <__global_locale>:
20400854:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400874:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400894:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400914:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
20400934:	4aa5 0040 4301 0040 0000 0000 5134 0040     .J@..C@.....4Q@.
20400944:	5130 0040 50e4 0040 50e4 0040 50e4 0040     0Q@..P@..P@..P@.
20400954:	50e4 0040 50e4 0040 50e4 0040 50e4 0040     .P@..P@..P@..P@.
20400964:	50e4 0040 50e4 0040 ffff ffff ffff ffff     .P@..P@.........
20400974:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
2040099c:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
